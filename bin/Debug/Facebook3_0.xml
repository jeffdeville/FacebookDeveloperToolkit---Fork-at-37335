<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Facebook3_0</name>
    </assembly>
    <members>
        <member name="T:Facebook.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Facebook.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Facebook.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:Facebook.BindingHelper.FacebookNotificationInfo">
            <summary>
            Defines a facebook stream comment 
            </summary>
        </member>
        <member name="M:Facebook.BindingHelper.FacebookNotificationInfo.#ctor">
            <summary>
            Initializes FacebookNotificationInfo object
            </summary>
        </member>
        <member name="M:Facebook.BindingHelper.FacebookNotificationInfo.#ctor(Facebook.Schema.notifications)">
            <summary>
            Initializes FacebookNotificationInfo object
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.FacebookNotificationInfo.FriendRequestsProfiles">
            <summary>
            Profiles of all friend requests
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.FacebookNotificationInfo.EventRequests">
            <summary>
            Event info of all events requests
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.FacebookNotificationInfo.GroupRequests">
            <summary>
            Event info of all events requests
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.FacebookNotificationInfo.Messages">
            <summary>
            Messages Info
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.FacebookNotificationInfo.Pokes">
            <summary>
            Pokes Info
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.FacebookNotificationInfo.Shares">
            <summary>
            Shares Info
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.FacebookNotificationInfo.FriendRequests">
            <summary>
            List of friend requests
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.FacebookNotificationInfo.GroupInvites">
            <summary>
            List of group invies
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.FacebookNotificationInfo.EventInvites">
            <summary>
            List of event invites
            </summary>
        </member>
        <member name="E:Facebook.BindingHelper.FacebookNotificationInfo.PropertyChanged">
            <summary>
            Property change event handler
            </summary>
        </member>
        <member name="T:Facebook.BindingHelper.FacebookContactCollection">
            <summary>
            Represents user collection
            </summary>
        </member>
        <member name="T:Facebook.BindingHelper.FacebookDataCollection`1">
            <summary>
            Facebook data collection base class
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Facebook.BindingHelper.FacebookDataCollection`1.#ctor">
            <summary>
            Initializes new instance of FacebookDataCollection
            </summary>
        </member>
        <member name="M:Facebook.BindingHelper.FacebookDataCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes new instance of FacebookDataCollection
            </summary>
            <param name="dataObjects">Collection whose items are copied</param>
        </member>
        <member name="M:Facebook.BindingHelper.FacebookDataCollection`1.InvokeUsingDispatcher(System.Action)">
            <summary>
            Invokes the action on dispatcher thread
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:Facebook.BindingHelper.FacebookDataCollection`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            raises collection changed event
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Facebook.BindingHelper.FacebookDataCollection`1.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises proprety change event
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Facebook.BindingHelper.FacebookDataCollection`1.Merge(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Merges data from another collection.
            </summary>
            <param name="newCollection">The data object collection that contains new data.</param>
        </member>
        <member name="M:Facebook.BindingHelper.FacebookDataCollection`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Inserts a collection to existing collection, removing any entries that would be re-add to existing collection
            </summary>
            <param name="position"></param>
            <param name="newCollection"></param>
        </member>
        <member name="M:Facebook.BindingHelper.FacebookDataCollection`1.AddInternal(`0)">
            <summary>
            Adds an item on dispatcher thread
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Facebook.BindingHelper.FacebookDataCollection`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds an ienumerable collection to existing collection
            </summary>
            <param name="newCollection"></param>
        </member>
        <member name="M:Facebook.BindingHelper.FacebookDataCollection`1.InsertInternal(System.Int32,`0)">
            <summary>
            Inserts an item on dispatcher thread
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:Facebook.BindingHelper.FacebookDataCollection`1.RemoveRange(System.Int32,System.Int32)">
            <summary>
            removes range of items on dispatcher thread
            </summary>
            <param name="start"></param>
            <param name="count"></param>
        </member>
        <member name="E:Facebook.BindingHelper.FacebookDataCollection`1.DataRetrievalCompletedEvent">
            <summary>
            Event to raise when the asynch operation completes
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.FacebookDataCollection`1.DeferNotification">
            <summary>
            Indicates if notifications needs to be deferred
            </summary>
        </member>
        <member name="M:Facebook.BindingHelper.FacebookContactCollection.#ctor">
            <summary>
            Initializes FacebookContactCollection object
            </summary>
        </member>
        <member name="M:Facebook.BindingHelper.FacebookContactCollection.#ctor(System.Collections.Generic.IEnumerable{Facebook.BindingHelper.FacebookContact})">
            <summary>
            Initializes FacebookContactCollection from contacts list
            </summary>
            <param name="contacts">list of comments</param>
        </member>
        <member name="T:Facebook.BindingHelper.FacebookContact">
            <summary>
            Contains user information
            </summary>
        </member>
        <member name="M:Facebook.BindingHelper.FacebookContact.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Facebook.BindingHelper.FacebookContact.#ctor(Facebook.Schema.user)">
            <summary>
            Constructor that hydrates this object for object deserialized from xml
            </summary>
        </member>
        <member name="M:Facebook.BindingHelper.FacebookContact.Equals(Facebook.BindingHelper.FacebookContact)">
            <summary>
            Operator overload to compare this instance against another FacebookContact
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.FacebookContact.PhotosOf">
            <summary>
            Gets all photos tagged with this user
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.FacebookContact.PhotosBy">
            <summary>
            Gets top photos added by this user
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.FacebookContact.PhotoAlbums">
            <summary>
            Gets all photo albums created by this user
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.FacebookContact.RecentActivity">
            <summary>
            Gets all posting by this user
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.FacebookContact.Image">
            <summary>
            returns a facebook image object for user profile picture
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.FacebookContact.AboutMe">
            <summary>
            About me information
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.FacebookContact.Activities">
            <summary>
            Activities
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.FacebookContact.Birthday">
            <summary>
            Birthday of user
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.FacebookContact.Books">
            <summary>
            Books information
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.FacebookContact.CurrentLocation">
            <summary>
            current location
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.FacebookContact.HomeTownLocation">
            <summary>
            Hometown location
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.FacebookContact.FirstName">
            <summary>
            Firstname
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.FacebookContact.LastName">
            <summary>
            Last name
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.FacebookContact.Name">
            <summary>
            Full name
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.FacebookContact.Interests">
            <summary>
            Interests
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.FacebookContact.Music">
            <summary>
            Interests
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.FacebookContact.Movies">
            <summary>
            Interests
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.FacebookContact.NotesCount">
            <summary>
            Noted count for this user
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.FacebookContact.Picture">
            <summary>
            Picture of user
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.FacebookContact.PictureBig">
            <summary>
            Big picture of the user
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.FacebookContact.PictureSmall">
            <summary>
            Small picture of user
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.FacebookContact.PictureSquare">
            <summary>
            Square picture of user
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.FacebookContact.Sex">
            <summary>
            Sex of user
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.FacebookContact.Political">
            <summary>
            political info of user
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.FacebookContact.profileupdatetime">
            <summary>
            Profile updated time in facebook format
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.FacebookContact.ProfileUpdateTime">
            <summary>
            Time profile was updated
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.FacebookContact.UserId">
            <summary>
            User id
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.FacebookContact.WallCount">
            <summary>
            wall count
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.FacebookContact.Quotes">
            <summary>
            quotes
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.FacebookContact.Status">
            <summary>
            User status information
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.FacebookContact.RelationshipStatus">
            <summary>
            RelationshipStatus
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.FacebookContact.Religion">
            <summary>
            religion
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.FacebookContact.Locale">
            <summary>
            locale
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.FacebookContact.SignificantOtherId">
            <summary>
            significant_other_id
            </summary>
        </member>
        <member name="T:Facebook.Utility.AsyncResult">
            <summary>
            </summary>
        </member>
        <member name="F:Facebook.Utility.AsyncResult.callback">
            <summary>
            the delegate to call when the function completes
            </summary>
        </member>
        <member name="F:Facebook.Utility.AsyncResult.state">
            <summary>
            the state passed in by caller
            </summary>
        </member>
        <member name="F:Facebook.Utility.AsyncResult.externalstate">
            <summary>
            the state passed in by external caller.
            It is convieniently not keep it in the state so we can avoid another cast.
            </summary>
        </member>
        <member name="F:Facebook.Utility.AsyncResult.waitHandler">
            <summary>
            The sync construct to return when asked for the AsyncWaitHandle
            This is lazy-created to prevent a perf hit in cases when
            the caller doesn't use this.
            </summary>
        </member>
        <member name="F:Facebook.Utility.AsyncResult.isComplete">
            <summary>
            indicates whether an operation is completed.
            This is an Int32 and not a bool because Interlocked APIs don't
            work with bools.
            </summary>
        </member>
        <member name="M:Facebook.Utility.AsyncResult.#ctor(System.AsyncCallback,System.Object,System.Object)">
            <summary>
            Constructor
            </summary>
            <param name="callback"></param>
            <param name="state"></param>
            <param name="externalstate"></param>
        </member>
        <member name="M:Facebook.Utility.AsyncResult.SetComplete(System.String,Facebook.Utility.FacebookException)">
            <summary>
            Mark this operation as completed, set the waitHandle and call the callback delegate
            </summary>
            <param name="result"></param>
            <param name="e">the result of this operation if it was an exception (can be null)</param>
        </member>
        <member name="P:Facebook.Utility.AsyncResult.Exception">
            <summary>
            to hold the exception if the operation results in an exception
            </summary>
        </member>
        <member name="P:Facebook.Utility.AsyncResult.AsyncState">
            <summary>
            Gets a user-defined object that qualifies or contains information about an 
            asynchronous operation
            </summary>
        </member>
        <member name="P:Facebook.Utility.AsyncResult.AsyncExternalState">
            <summary>
            Gets a user-defined object that qualifies or contains information about an 
            asynchronous operation
            </summary>
        </member>
        <member name="P:Facebook.Utility.AsyncResult.CompletedSynchronously">
            <summary>
            Gets an indication of whether the asynchronous operation completed synchronously.
            </summary>
        </member>
        <member name="P:Facebook.Utility.AsyncResult.IsCompleted">
            <summary>
            Gets an indication whether the asynchronous operation has completed.
            </summary>
        </member>
        <member name="P:Facebook.Utility.AsyncResult.AsyncCallback">
            <summary>
            Callback that needs to be called when operation completes
            </summary>
        </member>
        <member name="P:Facebook.Utility.AsyncResult.AsyncWaitHandle">
            <summary>
            Gets a WaitHandle that is used to wait for an asynchronous operation to complete
            </summary>
        </member>
        <member name="P:Facebook.Utility.AsyncResult.Result">
            <summary>
            The result of operation
            </summary>
        </member>
        <member name="P:Facebook.Utility.AsyncResult.JSONFormat">
            <summary>
            The result of operation
            </summary>
        </member>
        <member name="T:Facebook.Rest.Photos">
            <summary>
            Facebook Photo API methods.
            </summary>
        </member>
        <member name="T:Facebook.Rest.RestBase">
            <summary>
            Represents object responsible for facebook REST calls.
            </summary>
        </member>
        <member name="M:Facebook.Rest.RestBase.#ctor(Facebook.Session.IFacebookSession)">
            <summary>
            Constructor
            </summary>
            <param name="session">Session object</param>
        </member>
        <member name="M:Facebook.Rest.RestBase.SendRequest(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Sends a request through the REST API to Facebook. This is what the other methods all use to communicate with Facebook.
            You should only use this method if you need to call a method that is not defined in this toolkit. This method
            will always use the session key in the request.
            </summary>
            <param name="parameterDictionary">
            A dictionary of parameters for the method being called, as specified in the documentation for the method. You will need
            to make sure to have a parameter named "method" corresponding to the method name. The toolkit will populate
            the api_key, call_id, sig, v, and session_key parameters.
            </param>
            <returns>The XML response returned by Facebook.</returns>
        </member>
        <member name="M:Facebook.Rest.RestBase.SendRequest(System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean)">
            <summary>
            Sends a request through the REST API to Facebook. This is what the other methods all use to communicate with Facebook.
            You should only use this method if you need to call a method that is not defined in this toolkit.
            </summary>
            <param name="parameterDictionary">
            A dictionary of parameters for the method being called, as specified in the documentation for the method. You will need
            to make sure to have a parameter named "method" corresponding to the method name. The toolkit will populate
            the api_key, call_id, sig, v, and session_key parameters.
            </param>
            <param name="useSession">Whether or not to use the session key in the request.</param>
            <returns>The XML response returned by Facebook.</returns>
        </member>
        <member name="M:Facebook.Rest.RestBase.SendRequest``1(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Makes a synchronous call to facebook server and returns result.
            </summary>
            <typeparam name="T">Output Type</typeparam>
            <param name="parameterDictionary">parameters that needs to be passed to call</param>
            <returns>This method returns an object (of type T) resulting from the request.</returns>
        </member>
        <member name="M:Facebook.Rest.RestBase.SendRequest``1(System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean)">
            <summary>
            Makes a synchronous call to facebook server and returns result.
            </summary>
            <typeparam name="T">Output Type</typeparam>
            <param name="parameterDictionary">parameters that needs to be passed to call</param>
            <param name="useSession"></param>
            <returns>This method returns an object (of type T) resulting from the request.</returns>
        </member>
        <member name="M:Facebook.Rest.RestBase.SendRequestAsync``1(System.Collections.Generic.Dictionary{System.String,System.String},Facebook.Rest.FacebookCallCompleted{``0},System.Object)">
            <summary>
            Makes a call to facebook server and returns the result in callback specified
            </summary>
            <typeparam name="T">Type of object to which result should be deserialized</typeparam>
            <param name="parameterList">parameters that needs to be passed to call</param>
            <param name="callback">Callback which will be called on response.</param>
            <param name="state">User defined object</param>
        </member>
        <member name="M:Facebook.Rest.RestBase.SendRequestAsync``1(System.Collections.Generic.Dictionary{System.String,System.String},System.Boolean,Facebook.Rest.FacebookCallCompleted{``0},System.Object)">
            <summary>
            Makes a call to facebook server and returns the result in callback specified
            </summary>
            <typeparam name="T">Type of object to which result should be deserialized</typeparam>
            <param name="parameterList">parameters that needs to be passed to call</param>
            <param name="useSession">whether the call should use the facebook session or not</param>
            <param name="callback">Callback which will be called on response.</param>
            <param name="state">User defined object</param>
        </member>
        <member name="M:Facebook.Rest.RestBase.SendRequestAsync``2(System.Collections.Generic.Dictionary{System.String,System.String},Facebook.Rest.FacebookCallCompleted{``1},System.Object)">
            <summary>
            Makes a call to facebook server and returns the result in callback specified
            </summary>
            <param name="parameterList">parameters that needs to be passed to call</param>
            <param name="callback">Callback which will be called on response.</param>
            <param name="state">User defined object</param>
        </member>
        <member name="M:Facebook.Rest.RestBase.SendRequestAsync``2(System.Collections.Generic.Dictionary{System.String,System.String},System.Boolean,Facebook.Rest.FacebookCallCompleted{``1},System.Object)">
            <summary>
            Makes a call to facebook server and returns the result in callback specified
            </summary>
            <param name="parameterList">parameters that needs to be passed to call</param>
            <param name="useSession">indicator if session should be used or not</param>
            <param name="callback">Callback which will be called on response.</param>
            <param name="state">User defined object</param>
        </member>
        <member name="M:Facebook.Rest.RestBase.SendRequestAsync``2(System.Collections.Generic.Dictionary{System.String,System.String},Facebook.Rest.FacebookCallCompleted{``1},System.Object,System.String)">
            <summary>
            Makes a call to facebook server and returns the result in callback specified
            </summary>
            <param name="parameterList">parameters that needs to be passed to call.</param>
            <param name="callback">Callback which will be called on response.</param>
            <param name="state">User defined object.</param>
            <param name="propertyName">The name of the property to retreive.</param>
        </member>
        <member name="M:Facebook.Rest.RestBase.SendRequestAsync``2(System.Collections.Generic.Dictionary{System.String,System.String},System.Boolean,Facebook.Rest.FacebookCallCompleted{``1},System.Object,System.String)">
            <summary>
            Makes a call to facebook server and returns the result in callback specified
            </summary>
            <param name="parameterList">parameters that needs to be passed to call.</param>
            <param name="useSession">indicator if session should be used or not</param>
            <param name="callback">Callback which will be called on response.</param>
            <param name="state">User defined object.</param>
            <param name="propertyName">The name of the property to retreive.</param>
        </member>
        <member name="M:Facebook.Rest.RestBase.SendRequestAsync(System.Collections.Generic.IDictionary{System.String,System.String},Facebook.Utility.AsyncResult)">
            <summary>
            Makes a REST call to facebook server. 
            </summary>
            <param name="parameterList">Parameters for REST call</param>
            <param name="ar"></param>
            <remarks>Function made virtual for unittesting</remarks>
        </member>
        <member name="M:Facebook.Rest.RestBase.SendRequestAsync(System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean,Facebook.Utility.AsyncResult)">
            <summary>
            Makes a REST call to facebook server. 
            </summary>
            <param name="parameterList">Parameters for REST call</param>
            <param name="useSession">indicator if session should be used or not</param>
            <param name="ar"></param>
            <remarks>Function made virtual for unittesting</remarks>
        </member>
        <member name="M:Facebook.Rest.RestBase.UploadVideoFile(System.Collections.Generic.IDictionary{System.String,System.String},System.Byte[],System.String,Facebook.Utility.AsyncResult)">
            <summary>
            Makes a REST call to upload a video to the facebook server. 
            </summary>
            <param name="parameters">Parameters for REST call</param>
            <param name="data">the bytes of the file</param>
            <param name="contentType"></param>
            <param name="ar"></param>
            <remarks>Function made virtual for unittesting</remarks>
        </member>
        <member name="M:Facebook.Rest.RestBase.UploadFile(System.Collections.Generic.IDictionary{System.String,System.String},System.Byte[],System.String,Facebook.Utility.AsyncResult)">
            <summary>
            Makes a REST call to upload a video to the facebook server. 
            </summary>
            <param name="parameters">Parameters for REST call</param>
            <param name="data">the bytes of the file</param>
            <param name="contentType"></param>
            <param name="ar"></param>
            <remarks>Function made virtual for unittesting</remarks>
        </member>
        <member name="M:Facebook.Rest.RestBase.UploadFile(System.Collections.Generic.IDictionary{System.String,System.String},System.Byte[],System.String,System.Uri,Facebook.Utility.AsyncResult)">
            <summary>
            Makes a REST call to upload a video to the facebook server. 
            </summary>
            <param name="parameters">Parameters for REST call</param>
            <param name="data">the bytes of the file</param>
            <param name="contentType"></param>
            <param name="uploadUrl">The url to upload the file to</param>
            <param name="ar"></param>
            <remarks>Function made virtual for unittesting</remarks>
        </member>
        <member name="M:Facebook.Rest.RestBase.ExecuteApiImageUpload(System.IO.FileSystemInfo,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Makes a REST call to upload an image to the facebook server. 
            </summary>
            <param name="uploadFile">pointer to the image file on the local drive</param>
            <param name="parameterList">Parameters for REST call</param>
        </member>
        <member name="M:Facebook.Rest.RestBase.ExecuteApiVideoUpload(System.IO.FileSystemInfo,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Makes a REST call to upload an video to the facebook server. 
            </summary>
            <param name="uploadFile">pointer to the image file on the local drive</param>
            <param name="parameterList">Parameters for REST call</param>
        </member>
        <member name="M:Facebook.Rest.RestBase.GetFileQueryResponse(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.IO.FileSystemInfo,System.String)">
            <summary>
            Get the string returned from a post to Facebook
            </summary>
            <param name="parameterDictionary">key value pairs to post as part of the request</param>
            <param name="uploadFile">The file to upload</param>
            <param name="contentType">video/avi or image/jpeg</param>
        </member>
        <member name="M:Facebook.Rest.RestBase.GenerateSignature(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            This method generates the signature based on parameters supplied
            </summary>
            <param name="parameters">List of paramenters</param>
            <returns>Generated signature</returns>
        </member>
        <member name="M:Facebook.Rest.RestBase.GenerateSignature(System.Boolean,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            This method generates the signature based on parameters supplied
            </summary>
            <param name="forceApplicationSecret">Flag to force use of Application, not User Session secret.</param>
            <param name="parameters">List of paramenters</param>
            <returns>Generated signature</returns>
        </member>
        <member name="M:Facebook.Rest.RestBase.XmlResultOperationCompleted(System.IAsyncResult)">
            <summary>
            Internal call back when xml deserialization completes. 
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:Facebook.Rest.RestBase.OnFacebookCallCompleted``1(System.IAsyncResult)">
            <summary>
            Internal call back when facebook call completes. 
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:Facebook.Rest.RestBase.OnFacebookCallCompleted``2(System.IAsyncResult,System.String)">
            <summary>
            Deserializes facebook response object if there is no exception and calls the callback with result
            </summary>
            <typeparam name="TObject"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="result"></param>
            <param name="propName"></param>
        </member>
        <member name="M:Facebook.Rest.RestBase.FixupJSONString(System.String,System.Type)">
            <summary>
            Server returns empty arrays in format not understood by our deserializer. This function fixs up
            such known instances.
            </summary>
            <param name="result"></param>
            <param name="type"></param>
            <returns>This method returns a cleaned JSON string.</returns>
        </member>
        <member name="M:Facebook.Rest.RestBase.OnRequestCompleted(System.Object,Facebook.Utility.RequestCompletedEventArgs)">
            <summary>
            Callback when http request is completed 
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Facebook.Rest.RestBase.CreatePostData(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Creates a POST data from parameters list
            </summary>
            <param name="parameters"></param>
            <returns>This method returns a formatted Post string.</returns>
        </member>
        <member name="P:Facebook.Rest.RestBase.Batch">
            <summary>
             Gets or sets the Batch object.
            </summary>
        </member>
        <member name="P:Facebook.Rest.RestBase.Permissions">
            <summary>
             Gets or Sets Permissions object.
            </summary>
        </member>
        <member name="P:Facebook.Rest.RestBase.Session">
            <summary>
            Gets the FacebookSession object.
            </summary>
        </member>
        <member name="M:Facebook.Rest.Photos.#ctor(Facebook.Session.IFacebookSession)">
            <summary>
            Public constructor for facebook.Photo
            </summary>
            <param name="session">Needs a connected Facebook Session object for making requests</param>
        </member>
        <member name="M:Facebook.Rest.Photos.AddTag(System.String,System.Nullable{System.Int64},System.String,System.Single,System.Single)">
            <summary>
            Adds a tag with the given information to a photo.
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new FBMLCanvasSession(Constants.WebApplicationKey, Constants.WebSecret));
            api.Session.UserId = Constants.UserId;
            api.Photos.AddTag(Constants.PhotoId, Constants.UserId, "test", 0F, 0F);
            </code>
            </example>
            <param name="pid">The photo id of the photo to be tagged.</param>
            <param name="tag_uid">The user id of the user being tagged. Either tag_uid or tag_text must be specified.</param>
            <param name="tag_text">Some text identifying the person being tagged. Either tag_uid or tag_text must be specified. This parameter is ignored if tag_uid is specified.</param>
            <param name="x">The horizontal position of the tag, as a percentage from 0 to 100, from the left of the photo.</param>
            <param name="y">The vertical position of the tag, as a percentage from 0 to 100, from the top of the photo.</param>
            <remarks>Tags can only be added to pending photos owned by the current session user. Once a photo has been approved or rejected, it can no longer be tagged with this method. There is a limit of 20 tags per pending photo.</remarks>
        </member>
        <member name="M:Facebook.Rest.Photos.AddTag(System.String,System.Int64,System.String,System.Single,System.Single)">
            <summary>
            Adds a tag with the given information to a photo.
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new FBMLCanvasSession(Constants.WebApplicationKey, Constants.WebSecret));
            api.Session.UserId = Constants.UserId;
            api.Photos.AddTag(Constants.PhotoId, Constants.UserId, "test", 0F, 0F);
            </code>
            </example>
            <param name="pid">The photo id of the photo to be tagged.</param>
            <param name="tag_uid">The user id of the user being tagged. Either tag_uid or tag_text must be specified.</param>
            <param name="tag_text">Some text identifying the person being tagged. Either tag_uid or tag_text must be specified. This parameter is ignored if tag_uid is specified.</param>
            <param name="x">The horizontal position of the tag, as a percentage from 0 to 100, from the left of the photo.</param>
            <param name="y">The vertical position of the tag, as a percentage from 0 to 100, from the top of the photo.</param>
            <remarks>Tags can only be added to pending photos owned by the current session user. Once a photo has been approved or rejected, it can no longer be tagged with this method. There is a limit of 20 tags per pending photo.</remarks>
        </member>
        <member name="M:Facebook.Rest.Photos.AddTag(System.String,System.Int64,System.String,System.Single,System.Single,System.Int64)">
            <summary>
            Adds a tag with the given information to a photo.
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new FBMLCanvasSession(Constants.WebApplicationKey, Constants.WebSecret));
            api.Session.UserId = Constants.UserId;
            api.Photos.AddTag(Constants.PhotoId, Constants.UserId, "test", 0F, 0F, Constants.UserId);
            </code>
            </example>
            <param name="pid">The photo id of the photo to be tagged.</param>
            <param name="tag_uid">The user id of the user being tagged. Either tag_uid or tag_text must be specified.</param>
            <param name="tag_text">Some text identifying the person being tagged. Either tag_uid or tag_text must be specified. This parameter is ignored if tag_uid is specified.</param>
            <param name="x">The horizontal position of the tag, as a percentage from 0 to 100, from the left of the photo.</param>
            <param name="y">The vertical position of the tag, as a percentage from 0 to 100, from the top of the photo.</param>
            <param name="owner_uid">The user ID of the user whose photo you are tagging. If this parameter is not specified, then it defaults to the session user.  Note: This parameter applies only to Web applications and is required by them only if the session_key is not specified. Facebook ignores this parameter if it is passed by a desktop application.</param>
            <remarks>Tags can only be added to pending photos owned by the current session user. Once a photo has been approved or rejected, it can no longer be tagged with this method. There is a limit of 20 tags per pending photo.</remarks>
        </member>
        <member name="M:Facebook.Rest.Photos.CreateAlbum(System.String,System.String,System.String)">
            <summary>
            Creates and returns a new album owned by the current session user.
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
            var result = api.Photos.CreateAlbum("test album name", "Chicago, IL", "Code sample album");
            </code>
            </example>
            <param name="name">The album name.</param>
            <param name="location">Optional - The album location.</param>
            <param name="description">Optional - The album description.</param>
            <returns>A new album owned by the current session user</returns>
            <remarks>The returned cover_pid is always 0.</remarks>
        </member>
        <member name="M:Facebook.Rest.Photos.CreateAlbum(System.String,System.String,System.String,System.Int64)">
            <summary>
            Creates and returns a new album owned by the current session user.
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
            var result = api.Photos.CreateAlbum("test album name", "Chicago, IL", "Code sample album", Constants.UserId);
            </code>
            </example>
            <param name="name">The album name.</param>
            <param name="location">Optional - The album location.</param>
            <param name="description">Optional - The album description.</param>
            <param name="uid"></param>
            <returns>A new album owned by the current session user</returns>
            <remarks>The returned cover_pid is always 0.</remarks>
        </member>
        <member name="M:Facebook.Rest.Photos.Get(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Returns all visible photos according to the filters specified.
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
            var result = api.Photos.Get(string.Empty, Constants.AlbumId.ToString(), null);
            </code>
            </example>
            <param name="subj_id">Filter by photos tagged with this user.</param>
            <param name="aid">Filter by photos in this album.</param>
            <param name="pids">Filter by photos in this list. This is a comma-separated list of pids.</param>
            <returns>This method returns all visible photos satisfying the filters specified. The method can be used to return all photos tagged with user, in an album, query a specific set of photos by a list of pids, or filter on any combination of these three.</returns>
            <remarks>It is an error to omit all three of the subj_id, aid, and pids parameters. They have no defaults.</remarks>
        </member>
        <member name="M:Facebook.Rest.Photos.GetTags(System.Collections.Generic.List{System.String})">
            <summary>
            Returns the set of user tags on all photos specified.
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
            var result = api.Photos.GetTags(new List&lt;string&gt; { Constants.PhotoId });
            </code>
            </example>
            <param name="pids">The list of photos from which to extract photo tags.</param>
            <returns>If no photo tags are found, the method will return an empty photos_getTags_response element. Text tags not corresponding to a user are not currently returned. Some tags may be text-only and will have an empty subect element. This occurs in the case where a user did not specifically tag another account, but just supplied text information.</returns>
            <remarks> A tag of a user will be visible to an application only if that user has not turned off access to the Facebook Platform.</remarks>
        </member>
        <member name="M:Facebook.Rest.Photos.Upload(System.String,System.String,System.IO.FileInfo)">
            <summary>
            Uploads a photo owned by the current session user and returns the new photo.
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
            var data = new FileInfo(@"C:\Fry.jpg");
            var result = api.Photos.Upload(Constants.AlbumId.ToString(), "uploading test", data);
            </code>
            </example>
            <param name="aid">Optional - The album id of the destination album.</param>
            <param name="caption">Optional - The caption of the photo.</param>
            <param name="data">The raw image data for the photo.</param>
            <returns>Photo information, including the photo URL.</returns>
            <remarks>If no album is specified, the photo will be uploaded to a default album for the application, which will be created if necessary. Regular albums have a size limit of 60 photos. Default application albums have a size limit of 1000 photos. It is strongly recommended that you scale the image in your application before adding it to the request. The largest dimension should be at most 604 pixels (the largest display size Facebook supports).</remarks>
        </member>
        <member name="M:Facebook.Rest.Photos.Upload(System.String,System.String,System.IO.FileInfo,System.Int64)">
            <summary>
            Uploads a photo owned by the current session user and returns the new photo.
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
            var data = new FileInfo(@"C:\Fry.jpg");
            var result = api.Photos.Upload(Constants.AlbumId.ToString(), "uploading test", data, Constants.UserId);
            </code>
            </example>
            <param name="aid">Optional - The album id of the destination album.</param>
            <param name="caption">Optional - The caption of the photo.</param>
            <param name="data">The raw image data for the photo.</param>
            <param name="uid"></param>
            <returns>Photo information, including the photo URL.</returns>
            <remarks>If no album is specified, the photo will be uploaded to a default album for the application, which will be created if necessary. Regular albums have a size limit of 60 photos. Default application albums have a size limit of 1000 photos. It is strongly recommended that you scale the image in your application before adding it to the request. The largest dimension should be at most 604 pixels (the largest display size Facebook supports).</remarks>
        </member>
        <member name="M:Facebook.Rest.Photos.GetAlbums">
            <summary>
            Returns metadata about all of the photo albums uploaded by the specified user.
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
            var result = api.Photos.GetAlbums();
            </code>
            </example>
            <returns>This method returns all visible photos satisfying the filters specified. The method can be used to return all photo albums created by a user, query a specific set of albums by a list of aids, or filter on any combination of these two. The album ids returned by this function can be passed in to facebook.photos.get.</returns>
            <remarks>It is an error to omit both of the uid and aids parameters. They have no defaults. In this call, an album owned by a user will be returned to an application if that user has not turned off access to the Facbook Platform.</remarks>
        </member>
        <member name="M:Facebook.Rest.Photos.GetAlbums(System.Int64)">
            <summary>
            Returns metadata about all of the photo albums uploaded by the specified user.
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
            var result = api.Photos.GetAlbums(Constants.UserId);
            </code>
            </example>
            <param name="uid">Return albums created by this user.</param>
            <returns>This method returns all visible photos satisfying the filters specified. The method can be used to return all photo albums created by a user, query a specific set of albums by a list of aids, or filter on any combination of these two. The album ids returned by this function can be passed in to facebook.photos.get.</returns>
            <remarks>It is an error to omit both of the uid and aids parameters. They have no defaults. In this call, an album owned by a user will be returned to an application if that user has not turned off access to the Facbook Platform.</remarks>
        </member>
        <member name="M:Facebook.Rest.Photos.GetAlbums(System.Collections.Generic.List{System.String})">
            <summary>
            Returns metadata about all of the photo albums uploaded by the specified user.
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
            var result = api.Photos.GetAlbums(new List&lt;string&gt; {Constants.AlbumId.ToString()});
            </code>
            </example>
            <param name="aids">Return albums with aids in this list. This is a List of aids. You must specify either uid or aids. The aids parameter has no default value.</param>
            <returns>This method returns all visible photos satisfying the filters specified. The method can be used to return all photo albums created by a user, query a specific set of albums by a list of aids, or filter on any combination of these two. The album ids returned by this function can be passed in to facebook.photos.get.</returns>
            <remarks>It is an error to omit both of the uid and aids parameters. They have no defaults. In this call, an album owned by a user will be returned to an application if that user has not turned off access to the Facbook Platform.</remarks>
        </member>
        <member name="M:Facebook.Rest.Photos.GetAlbums(System.Int64,System.Collections.Generic.List{System.String})">
            <summary>
            Returns metadata about all of the photo albums uploaded by the specified user.
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
            var result = api.Photos.GetAlbums(Constants.UserId, new List&lt;string&gt; {Constants.AlbumId.ToString()});
            </code>
            </example>
            <param name="uid">Return albums created by this user.</param>
            <param name="aids">Return albums with aids in this list. This is a List of aids. You must specify either uid or aids. The aids parameter has no default value.</param>
            <returns>This method returns all visible photos satisfying the filters specified. The method can be used to return all photo albums created by a user, query a specific set of albums by a list of aids, or filter on any combination of these two. The album ids returned by this function can be passed in to facebook.photos.get.</returns>
            <remarks>It is an error to omit both of the uid and aids parameters. They have no defaults. In this call, an album owned by a user will be returned to an application if that user has not turned off access to the Facbook Platform.</remarks>
        </member>
        <member name="M:Facebook.Rest.Photos.AddTagAsync(System.String,System.Nullable{System.Int64},System.String,System.Single,System.Single,Facebook.Rest.Photos.AddTagCallback,System.Object)">
             <summary>
             Adds a tag with the given information to a photo.
             </summary>
             <example>
             <code>
             private static void RunDemoAsync()
             {
                 FacebookApi api = new FacebookApi(new FBMLCanvasSession(Constants.WebApplicationKey, Constants.WebSecret));
                 api.Session.UserId = Constants.UserId;
                 api.Photos.AddTagAsync(Constants.PhotoId, Constants.UserId, "test", 30F, 30F, AsyncDemoCompleted, null);
             }
            
             private static void AsyncDemoCompleted(bool result, Object state, FacebookException e)
             {
                 var actual = result;
             }
             </code>
             </example>
             <param name="pid">The photo id of the photo to be tagged.</param>
             <param name="uid">The user ID of the user whose photo you are tagging. If this parameter is not specified, then it defaults to the session user.  Note: This parameter applies only to Web applications and is required by them only if the session_key is not specified. Facebook ignores this parameter if it is passed by a desktop application.</param>
             <param name="tag_text">Some text identifying the person being tagged. Either tag_uid or tag_text must be specified. This parameter is ignored if tag_uid is specified.</param>
             <param name="x">The horizontal position of the tag, as a percentage from 0 to 100, from the left of the photo.</param>
             <param name="y">The vertical position of the tag, as a percentage from 0 to 100, from the top of the photo.</param>
             <param name="callback">The AsyncCallback delegate</param>
             <param name="state">An object containing state information for this asynchronous request</param>        
             <remarks>Tags can only be added to pending photos owned by the current session user. Once a photo has been approved or rejected, it can no longer be tagged with this method. There is a limit of 20 tags per pending photo.</remarks>
        </member>
        <member name="M:Facebook.Rest.Photos.AddTagAsync(System.String,System.Int64,System.String,System.Single,System.Single,Facebook.Rest.Photos.AddTagCallback,System.Object)">
             <summary>
             Adds a tag with the given information to a photo.
             </summary>
             <example>
             <code>
             private static void RunDemoAsync()
             {
                 FacebookApi api = new FacebookApi(new FBMLCanvasSession(Constants.WebApplicationKey, Constants.WebSecret));
                 api.Session.UserId = Constants.UserId;
                 api.Photos.AddTagAsync(Constants.PhotoId, Constants.UserId, "test", 30F, 30F, AsyncDemoCompleted, null);
             }
            
             private static void AsyncDemoCompleted(bool result, Object state, FacebookException e)
             {
                 var actual = result;
             }
             </code>
             </example>
             <param name="pid">The photo id of the photo to be tagged.</param>
             <param name="tag_uid">The user id of the user being tagged. Either tag_uid or tag_text must be specified.</param>
             <param name="tag_text">Some text identifying the person being tagged. Either tag_uid or tag_text must be specified. This parameter is ignored if tag_uid is specified.</param>
             <param name="x">The horizontal position of the tag, as a percentage from 0 to 100, from the left of the photo.</param>
             <param name="y">The vertical position of the tag, as a percentage from 0 to 100, from the top of the photo.</param>
             <param name="callback">The AsyncCallback delegate</param>
             <param name="state">An object containing state information for this asynchronous request</param>        
             <remarks>Tags can only be added to pending photos owned by the current session user. Once a photo has been approved or rejected, it can no longer be tagged with this method. There is a limit of 20 tags per pending photo.</remarks>
        </member>
        <member name="M:Facebook.Rest.Photos.AddTagAsync(System.String,System.Int64,System.String,System.Single,System.Single,System.Int64,Facebook.Rest.Photos.AddTagCallback,System.Object)">
             <summary>
             Adds a tag with the given information to a photo.
             </summary>
             <example>
             <code>
             private static void RunDemoAsync()
             {
                 Api api = new FacebookApi(new FBMLCanvasSession(Constants.WebApplicationKey, Constants.WebSecret));
                 api.Session.UserId = Constants.UserId;
                 api.Photos.AddTagAsync(Constants.PhotoId, Constants.UserId, "test", 30F, 30F, Constants.UserId, AsyncDemoCompleted, null);
             }
            
             private static void AsyncDemoCompleted(bool result, Object state, FacebookException e)
             {
                 var actual = result;
             }
             </code>
             </example>
             <param name="pid">The photo id of the photo to be tagged.</param>
             <param name="tag_uid">The user id of the user being tagged. Either tag_uid or tag_text must be specified.</param>
             <param name="tag_text">Some text identifying the person being tagged. Either tag_uid or tag_text must be specified. This parameter is ignored if tag_uid is specified.</param>
             <param name="x">The horizontal position of the tag, as a percentage from 0 to 100, from the left of the photo.</param>
             <param name="y">The vertical position of the tag, as a percentage from 0 to 100, from the top of the photo.</param>
             <param name="owner_uid">The user ID of the user whose photo you are tagging. If this parameter is not specified, then it defaults to the session user.  Note: This parameter applies only to Web applications and is required by them only if the session_key is not specified. Facebook ignores this parameter if it is passed by a desktop application.</param>
             <param name="callback">The AsyncCallback delegate</param>
             <param name="state">An object containing state information for this asynchronous request</param>        
             <remarks>Tags can only be added to pending photos owned by the current session user. Once a photo has been approved or rejected, it can no longer be tagged with this method. There is a limit of 20 tags per pending photo.</remarks>
        </member>
        <member name="M:Facebook.Rest.Photos.CreateAlbumAsync(System.String,System.String,System.String,Facebook.Rest.Photos.CreateAlbumCallback,System.Object)">
             <summary>
             Creates and returns a new album owned by the current session user.
             </summary>
             <example>
             <code>
             private static void RunDemoAsync()
             {
                 FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.ApplicationSecret, Constants.SessionKey));
                 api.Photos.CreateAlbumAsync("test album name", "Chicago, IL", "Code sample album", AsyncDemoCompleted, null);
             }
            
             private static void AsyncDemoCompleted(album result, Object state, FacebookException e)
             {
                 var actual = result;
             }
             </code>
             </example>
             <param name="name">The album name.</param>
             <param name="location">Optional - The album location.</param>
             <param name="description">Optional - The album description.</param>
             <param name="callback">The AsyncCallback delegate</param>
             <param name="state">An object containing state information for this asynchronous request</param>        
             <returns>A new album owned by the current session user</returns>
             <remarks>The returned cover_pid is always 0.</remarks>
        </member>
        <member name="M:Facebook.Rest.Photos.CreateAlbumAsync(System.String,System.String,System.String,System.Int64,Facebook.Rest.Photos.CreateAlbumCallback,System.Object)">
             <summary>
             Creates and returns a new album owned by the current session user.
             </summary>
             <example>
             <code>
             private static void RunDemoAsync()
             {
                 FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.ApplicationSecret, Constants.SessionKey));
                 api.Photos.CreateAlbumAsync("test album name", "Chicago, IL", "Code sample album", Constants.UserId, AsyncDemoCompleted, null);
             }
            
             private static void AsyncDemoCompleted(album result, Object state, FacebookException e)
             {
                 var actual = result;
             }
             </code>
             </example>
             <param name="name">The album name.</param>
             <param name="location">Optional - The album location.</param>
             <param name="description">Optional - The album description.</param>
             <param name="uid"></param>
             <param name="callback">The AsyncCallback delegate</param>
             <param name="state">An object containing state information for this asynchronous request</param>        
             <returns>A new album owned by the current session user</returns>
             <remarks>The returned cover_pid is always 0.</remarks>
        </member>
        <member name="M:Facebook.Rest.Photos.GetAsync(System.String,System.String,System.Collections.Generic.List{System.String},Facebook.Rest.Photos.GetCallback,System.Object)">
             <summary>
             Returns all visible photos according to the filters specified.
             </summary>
             <example>
             <code>
             private static void RunDemoAsync()
             {
                 FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.ApplicationSecret, Constants.SessionKey));
                 api.Photos.GetAsync(string.Empty, Constants.AlbumId.ToString(), null, AsyncDemoCompleted, null);
             }
            
             private static void AsyncDemoCompleted(IList&lt;photo&gt; result, Object state, FacebookException e)
             {
                 var actual = result;
             }
             </code>
             </example>
             <param name="subj_id">Filter by photos tagged with this user.</param>
             <param name="aid">Filter by photos in this album.</param>
             <param name="pids">Filter by photos in this list. This is a comma-separated list of pids.</param>
             <param name="callback">The AsyncCallback delegate</param>
             <param name="state">An object containing state information for this asynchronous request</param>        
             <returns>This method returns all visible photos satisfying the filters specified. The method can be used to return all photos tagged with user, in an album, query a specific set of photos by a list of pids, or filter on any combination of these three.</returns>
             <remarks>It is an error to omit all three of the subj_id, aid, and pids parameters. They have no defaults.</remarks>
        </member>
        <member name="M:Facebook.Rest.Photos.GetAlbumsAsync(Facebook.Rest.Photos.GetAlbumsCallback,System.Object)">
            <summary>
            Returns metadata about all of the photo albums uploaded by the specified user.
            </summary>
            <example>
            <code>
            private static void RunDemoAsync()
            {
                FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.ApplicationSecret, Constants.SessionKey));
                api.Photos.GetAlbumsAsync(AsyncDemoCompleted, null);
            }
            
            private static void AsyncDemoCompleted(IList&lt;album&gt; result, Object state, FacebookException e)
            {
                var actual = result;
            }
            </code>
            </example>
            <param name="callback">The AsyncCallback delegate</param>
            <param name="state">An object containing state information for this asynchronous request</param>        
            <returns>This method returns all visible photos satisfying the filters specified. The method can be used to return all photo albums created by a user, query a specific set of albums by a list of aids, or filter on any combination of these two. The album ids returned by this function can be passed in to facebook.photos.get.</returns>
            <remarks>It is an error to omit both of the uid and aids parameters. They have no defaults. In this call, an album owned by a user will be returned to an application if that user has not turned off access to the Facbook Platform.</remarks>
        </member>
        <member name="M:Facebook.Rest.Photos.GetAlbumsAsync(System.Int64,Facebook.Rest.Photos.GetAlbumsCallback,System.Object)">
            <summary>
            Returns metadata about all of the photo albums uploaded by the specified user.
            </summary>
            <example>
            <code>
            private static void RunDemoAsync()
            {
                FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.ApplicationSecret, Constants.SessionKey));
                api.Photos.GetAlbumsAsync(Constants.UserId, AsyncDemoCompleted, null);
            }
            
            private static void AsyncDemoCompleted(IList&lt;album&gt; result, Object state, FacebookException e)
            {
                var actual = result;
            }
            </code>
            </example>
            <param name="uid">Return albums created by this user.</param>
            <param name="callback">The AsyncCallback delegate</param>
            <param name="state">An object containing state information for this asynchronous request</param>        
            <returns>This method returns all visible photos satisfying the filters specified. The method can be used to return all photo albums created by a user, query a specific set of albums by a list of aids, or filter on any combination of these two. The album ids returned by this function can be passed in to facebook.photos.get.</returns>
            <remarks>It is an error to omit both of the uid and aids parameters. They have no defaults. In this call, an album owned by a user will be returned to an application if that user has not turned off access to the Facbook Platform.</remarks>
        </member>
        <member name="M:Facebook.Rest.Photos.GetAlbumsAsync(System.Collections.Generic.List{System.String},Facebook.Rest.Photos.GetAlbumsCallback,System.Object)">
            <summary>
            Returns metadata about all of the photo albums uploaded by the specified user.
            </summary>
            <example>
            <code>
            private static void RunDemoAsync()
            {
                FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.ApplicationSecret, Constants.SessionKey));
                api.Photos.GetAlbumsAsync(new List&lt;string&gt; {Constants.AlbumId.ToString()}, AsyncDemoCompleted, null);
            }
            
            private static void AsyncDemoCompleted(IList&lt;album&gt; result, Object state, FacebookException e)
            {
                var actual = result;
            }
            </code>
            </example>
            <param name="aids">Return albums with aids in this list. This is a List of aids. You must specify either uid or aids. The aids parameter has no default value.</param>
            <param name="callback">The AsyncCallback delegate</param>
            <param name="state">An object containing state information for this asynchronous request</param>        
            <returns>This method returns all visible photos satisfying the filters specified. The method can be used to return all photo albums created by a user, query a specific set of albums by a list of aids, or filter on any combination of these two. The album ids returned by this function can be passed in to facebook.photos.get.</returns>
            <remarks>It is an error to omit both of the uid and aids parameters. They have no defaults. In this call, an album owned by a user will be returned to an application if that user has not turned off access to the Facbook Platform.</remarks>
        </member>
        <member name="M:Facebook.Rest.Photos.GetAlbumsAsync(System.Int64,System.Collections.Generic.List{System.String},Facebook.Rest.Photos.GetAlbumsCallback,System.Object)">
            <summary>
            Returns metadata about all of the photo albums uploaded by the specified user.
            </summary>
            <example>
            <code>
            private static void RunDemoAsync()
            {
                FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.ApplicationSecret, Constants.SessionKey));
                api.Photos.GetAlbumsAsync(Constants.UserId, new List&lt;string&gt; {Constants.AlbumId.ToString()}, AsyncDemoCompleted, null);
            }
            
            private static void AsyncDemoCompleted(IList&lt;album&gt; result, Object state, FacebookException e)
            {
                var actual = result;
            }
            </code>
            </example>
            <param name="uid">Return albums created by this user.</param>
            <param name="aids">Return albums with aids in this list. This is a List of aids. You must specify either uid or aids. The aids parameter has no default value.</param>
            <param name="callback">The AsyncCallback delegate</param>
            <param name="state">An object containing state information for this asynchronous request</param>        
            <returns>This method returns all visible photos satisfying the filters specified. The method can be used to return all photo albums created by a user, query a specific set of albums by a list of aids, or filter on any combination of these two. The album ids returned by this function can be passed in to facebook.photos.get.</returns>
            <remarks>It is an error to omit both of the uid and aids parameters. They have no defaults. In this call, an album owned by a user will be returned to an application if that user has not turned off access to the Facbook Platform.</remarks>
        </member>
        <member name="M:Facebook.Rest.Photos.GetTagsAsync(System.Collections.Generic.List{System.String},Facebook.Rest.Photos.GetTagsCallback,System.Object)">
             <summary>
             Returns the set of user tags on all photos specified.
             </summary>
             <example>
             <code>
             private static void RunDemoAsync()
             {
                 FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.ApplicationSecret, Constants.SessionKey));
                 api.Photos.GetTagsAsync(new List&lt;string&gt; {Constants.PhotoId}, AsyncDemoCompleted, null);
             }
            
             private static void AsyncDemoCompleted(IList&lt;photo_tag&gt; result, Object state, FacebookException e)
             {
                 var actual = result;
             }
             </code>
             </example>
             <param name="pids">The list of photos from which to extract photo tags.</param>
             <param name="callback">The AsyncCallback delegate</param>
             <param name="state">An object containing state information for this asynchronous request</param>        
             <returns>If no photo tags are found, the method will return an empty photos_getTags_response element. Text tags not corresponding to a user are not currently returned. Some tags may be text-only and will have an empty subect element. This occurs in the case where a user did not specifically tag another account, but just supplied text information.</returns>
             <remarks> A tag of a user will be visible to an application only if that user has not turned off access to the Facebook Platform.</remarks>
        </member>
        <member name="M:Facebook.Rest.Photos.UploadAsync(System.String,System.String,System.Byte[],System.String,Facebook.Rest.Photos.UploadCallback,System.Object)">
            <summary>
            Uploads a photo owned by the current session user and returns the new photo.
            </summary>
            <example>
            <code> 
            private static void RunDemoAsync()
            {
                FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
                var aid = Constants.AlbumId;
                var caption = "caption";
                var filePath = @"C:\Clarity.jpg";
                var fileStream = System.IO.File.OpenRead(filePath);
                var reader = new System.IO.BinaryReader(fileStream);
                var fileData = reader.ReadBytes((int)fileStream.Length);
                api.Photos.UploadAsync(aid, caption, System.IO.Path.GetFileName(filePath), fileData, "image/jpeg", AsyncDemoCompleted, null);
            }
            
            private static void AsyncDemoCompleted(photo result, Object state, FacebookException e)
            {
                var actual = result;
            }
            </code>
            </example>
            <param name="aid">Optional - The album id of the destination album.</param>
            <param name="caption">Optional - The caption of the photo.</param>
            <param name="data">The raw image data for the photo.</param>
            <param name="contentType">You can upload the following image file formats through this call: image/gif,image/jpeg,image/png,image/psd,image/tiff,image/jp2,image/iff,image/vnd.wap.wbmp,image/x-xbitmap,image/bmp.</param>
            <param name="callback">The AsyncCallback delegate</param>
            <param name="state">An object containing state information for this asynchronous request</param>        
            <returns>Photo information, including the photo URL.</returns>
            <remarks>If no album is specified, the photo will be uploaded to a default album for the application, which will be created if necessary. Regular albums have a size limit of 60 photos. Default application albums have a size limit of 1000 photos. It is strongly recommended that you scale the image in your application before adding it to the request. The largest dimension should be at most 604 pixels (the largest display size Facebook supports).</remarks>
        </member>
        <member name="M:Facebook.Rest.Photos.UploadAsync(System.String,System.String,System.Byte[],Facebook.Schema.Enums.FileType,Facebook.Rest.Photos.UploadCallback,System.Object)">
            <summary>
            Uploads a photo owned by the current session user and returns the new photo.
            </summary>
            <example>
            <code> 
            private static void RunDemoAsync()
            {
                FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
                var aid = Constants.AlbumId;
                var caption = "caption";
                var filePath = @"C:\Clarity.jpg";
                var fileStream = System.IO.File.OpenRead(filePath);
                var reader = new System.IO.BinaryReader(fileStream);
                var fileData = reader.ReadBytes((int)fileStream.Length);
                api.Photos.UploadAsync(aid, caption, System.IO.Path.GetFileName(filePath), fileData, "image/jpeg", AsyncDemoCompleted, null);
            }
            
            private static void AsyncDemoCompleted(photo result, Object state, FacebookException e)
            {
                var actual = result;
            }
            </code>
            </example>
            <param name="aid">Optional - The album id of the destination album.</param>
            <param name="caption">Optional - The caption of the photo.</param>
            <param name="data">The raw image data for the photo.</param>
            <param name="fileType">One of the image file types</param>
            <param name="callback">The AsyncCallback delegate</param>
            <param name="state">An object containing state information for this asynchronous request</param>        
            <returns>Photo information, including the photo URL.</returns>
            <remarks>If no album is specified, the photo will be uploaded to a default album for the application, which will be created if necessary. Regular albums have a size limit of 60 photos. Default application albums have a size limit of 1000 photos. It is strongly recommended that you scale the image in your application before adding it to the request. The largest dimension should be at most 604 pixels (the largest display size Facebook supports).</remarks>
        </member>
        <member name="T:Facebook.Rest.Photos.AddTagCallback">
            <summary>
            Delegate called when AddPhotoTag call completed
            </summary>
            <param name="result">result of operation</param>
            <param name="state">An object containing state information for this asynchronous request</param>
            <param name="e">Exception object, if the call resulted in exception.</param>
        </member>
        <member name="T:Facebook.Rest.Photos.CreateAlbumCallback">
            <summary>
            Delegate called when CreateAlbum call completed
            </summary>
            <param name="album">album that was created</param>
            <param name="state">An object containing state information for this asynchronous request</param>
            <param name="e">Exception object, if the call resulted in exception.</param>
        </member>
        <member name="T:Facebook.Rest.Photos.GetCallback">
            <summary>
            Delegate called when GetPhotos call completed
            </summary>
            <param name="photos">list of photos</param>
            <param name="state">An object containing state information for this asynchronous request</param>
            <param name="e">Exception object, if the call resulted in exception.</param>
        </member>
        <member name="T:Facebook.Rest.Photos.GetAlbumsCallback">
            <summary>
            Delegate called when GetPhotos call completed
            </summary>
            <param name="albums">list of albums</param>
            <param name="state">An object containing state information for this asynchronous request</param>
            <param name="e">Exception object, if the call resulted in exception.</param>
        </member>
        <member name="T:Facebook.Rest.Photos.GetTagsCallback">
            <summary>
            Delegate called when GetPhotos call completed
            </summary>
            <param name="tags">list of tags</param>
            <param name="state">An object containing state information for this asynchronous request</param>
            <param name="e">Exception object, if the call resulted in exception.</param>
        </member>
        <member name="T:Facebook.Rest.Photos.UploadCallback">
            <summary>
            Delegate called when PhotoUpload call completed
            </summary>
            <param name="photo">information about uploaded photo</param>
            <param name="state">An object containing state information for this asynchronous request</param>
            <param name="e">Exception object, if the call resulted in exception.</param>
        </member>
        <member name="T:Facebook.Rest.Feed">
            <summary>
            Facebook Feed API methods.
            </summary>
        </member>
        <member name="M:Facebook.Rest.Feed.#ctor(Facebook.Session.IFacebookSession)">
            <summary>
            Public constructor for facebook.Feed
            </summary>
            <param name="session">Needs a connected Facebook Session object for making requests</param>
        </member>
        <member name="M:Facebook.Rest.Feed.PublishTemplatizedAction(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.ObjectModel.Collection{Facebook.Schema.feed_image})">
            <summary>
            Publishes a Mini-Feed story to the Facebook Page corresponding to the page_actor_id parameter.
            </summary>
            <param name="title_template">The templatized markup displayed in the feed story's title section. This template must contain the token {actor} somewhere in it.</param>
            <param name="title_data">Optional - A collection of the values that should be substituted into the templates in the title_template markup string. The keys of this array are the tokens, and their associated values are the desired substitutions. 'actor' and 'target' are special tokens and should not be included in this array. If your title_template contains tokens besides 'actor' and 'target', then this is a required parameter.</param>
            <param name="body_template">Optional - The markup displayed in the feed story's body section.</param>
            <param name="body_data">Optional - A collection of the values that should be substituted into the templates in the body_template markup string. The keys of this array are the tokens, and their associated values are the desired substitutions. 'actor' and 'target' are special token and should not be included in this array.</param>
            <param name="images">Optional - A collection of images to be displayed in the Feed story. Similar to body_general, the image displayed is not aggregated -- the image from any one of the aggregated stories may be displayed.</param>
            <returns>The function returns true on success, false on permissions error, or an error response.</returns>
            <remarks>This method is deprecated for actions taken by users only; it still works for actions taken by Facebook Pages.</remarks>
        </member>
        <member name="M:Facebook.Rest.Feed.PublishTemplatizedAction(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.Int32,System.Collections.ObjectModel.Collection{Facebook.Schema.feed_image},System.Collections.ObjectModel.Collection{System.String})">
            <summary>
            Publishes a Mini-Feed story to the Facebook Page corresponding to the page_actor_id parameter.
            </summary>
            <param name="title_template">The templatized markup displayed in the feed story's title section. This template must contain the token {actor} somewhere in it.</param>
            <param name="title_data">Optional - A collection of the values that should be substituted into the templates in the title_template markup string. The keys of this array are the tokens, and their associated values are the desired substitutions. 'actor' and 'target' are special tokens and should not be included in this array. If your title_template contains tokens besides 'actor' and 'target', then this is a required parameter.</param>
            <param name="body_template">Optional - The markup displayed in the feed story's body section.</param>
            <param name="body_data">Optional - A collection of the values that should be substituted into the templates in the body_template markup string. The keys of this array are the tokens, and their associated values are the desired substitutions. 'actor' and 'target' are special token and should not be included in this array.</param>
            <param name="body_general">Optional - Additional markup displayed in the feed story's body section. This markup is not required to be identical for two stories to be aggregated. One of the two will be chosen at random.</param>
            <param name="page_actor_id">Optional - if publishing a story to a Facebook Page, use this parameter as the page who performed the action. If you use this parameter, the application must be added to that Page's Feed. A session key is not required to do this.</param>
            <param name="images">Optional - A collection of images to be displayed in the Feed story. Similar to body_general, the image displayed is not aggregated -- the image from any one of the aggregated stories may be displayed.</param>
            <param name="target_ids">Optional - A collection of IDs of friends of the actor, used for stories about a direct action between the actor and these targets of his/her action. This is required if either the title_template or body_template includes the token {target}.</param>
            <returns>The function returns true on success, false on permissions error, or an error response.</returns>
            <remarks>This method is deprecated for actions taken by users only; it still works for actions taken by Facebook Pages.</remarks>
        </member>
        <member name="M:Facebook.Rest.Feed.DeactivateTemplateBundleByID(System.String)">
            <summary>
            Deactivates a previously registered template bundle.
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
            var result = api.Feed.DeactivateTemplateBundleByID(Constants.TemplateBundleId);
            </code>
            </example>
            <param name="template_bundle_id">The template bundle ID used to identify a previously registered template bundle. The ID is the one returned by a previous call to Feed.RegisterTemplateBundle.</param>
            <returns>This method returns true if the specified template was deactivated.</returns>
        </member>
        <member name="M:Facebook.Rest.Feed.GetRegisteredTemplateBundleByID(System.Int64)">
            <summary>
            Retrieves information about a specified template bundle previously registered by the requesting application.
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
            var result = api.Feed.GetRegisteredTemplateBundleByID(long.Parse(Constants.TemplateBundleId));
            </code>
            </example>
            <param name="template_bundle_id">The template bundle ID used to identify a previously registered template bundle. The ID is the one returned by a previous call to Feed.RegisterTemplateBundle.</param>
            <returns>This method returns a template_bundle containing information on the specified template bundle ID.</returns>
        </member>
        <member name="M:Facebook.Rest.Feed.GetRegisteredTemplateBundles">
            <summary>
            Retrieves the full list of all the template bundles registered by the requesting application.
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
            var result = api.Feed.GetRegisteredTemplateBundles();
            </code>
            </example>
            <returns>This method returns a List of template_bundles.</returns>
        </member>
        <member name="M:Facebook.Rest.Feed.RegisterTemplateBundle(System.Collections.Generic.List{System.String},System.Collections.Generic.List{Facebook.Rest.feedTemplate},Facebook.Rest.feedTemplate)">
             <summary>
             Builds a template bundle around the specified templates, registers them on Facebook, and responds with a template bundle ID that can be used to identify your template bundle to other Feed-related API calls.
             </summary>
             <example>
             <code>
             FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
            
             string oneLineStoryTemplate = "{*actor*} has been playing.";
             string shortStoryTemplateTitle = "{*actor*} has been &lt;a href='http://www.facebook.com/apps/application.php?id=xxx&gt;testing!&lt;/a&gt;";
             string shortStoryTemplateBody = "short story body";
             string fullStoryTemplateTitle = "{*actor*} has been &lt;a href='http://www.facebook.com/apps/application.php?id=xxx&gt;testing!&lt;/a&gt;";
             string fullStoryTemplateBody = "full story body";
             List&lt;string&gt; oneLineTemplates = new List&lt;string&gt; { oneLineStoryTemplate };
             feedTemplate shortStoryTemplate = new feedTemplate { PreferredLayout = "1", TemplateBody = shortStoryTemplateBody, TemplateTitle = shortStoryTemplateTitle };
             List&lt;feedTemplate&gt; shortStoryTemplates = new List&lt;feedTemplate&gt; { shortStoryTemplate };
             feedTemplate fullStoryTemplate = new feedTemplate { PreferredLayout = "1", TemplateBody = fullStoryTemplateBody, TemplateTitle = fullStoryTemplateTitle };
            
             var result = api.Feed.RegisterTemplateBundle(oneLineTemplates, shortStoryTemplates, fullStoryTemplate);
             </code>
             </example>
             <param name="oneLineStoryTemplates">array containing one FBML template that can be used to render one line Feed stories</param>
             <param name="shortStoryTemplates">Array of short story templates</param>
             <param name="fullStoryTemplate">template for a single full story</param>
             <returns>This method returns an identifier that the developer can use to publish actual stories using that template bundle.</returns>
        </member>
        <member name="M:Facebook.Rest.Feed.RegisterTemplateBundle(System.Collections.Generic.List{System.String},System.Collections.Generic.List{Facebook.Rest.feedTemplate},Facebook.Rest.feedTemplate,System.Collections.Generic.IList{Facebook.Schema.action_link})">
             <summary>
             Builds a template bundle around the specified templates, registers them on Facebook, and responds with a template bundle ID that can be used to identify your template bundle to other Feed-related API calls.
             </summary>
             <example>
             <code>
             FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
            
             string oneLineStoryTemplate = "{*actor*} has been playing.";
             string shortStoryTemplateTitle = "{*actor*} has been &lt;a href='http://www.facebook.com/apps/application.php?id=xxx&gt;testing!&lt;/a&gt;";
             string shortStoryTemplateBody = "short story body";
             string fullStoryTemplateTitle = "{*actor*} has been &lt;a href='http://www.facebook.com/apps/application.php?id=xxx&gt;testing!&lt;/a&gt;";
             string fullStoryTemplateBody = "full story body";
             List&lt;string&gt; oneLineTemplates = new List&lt;string&gt; { oneLineStoryTemplate };
             feedTemplate shortStoryTemplate = new feedTemplate { PreferredLayout = "1", TemplateBody = shortStoryTemplateBody, TemplateTitle = shortStoryTemplateTitle };
             List&lt;feedTemplate&gt; shortStoryTemplates = new List&lt;feedTemplate&gt; { shortStoryTemplate };
             feedTemplate fullStoryTemplate = new feedTemplate { PreferredLayout = "1", TemplateBody = fullStoryTemplateBody, TemplateTitle = fullStoryTemplateTitle };
             List&lt;action_link&gt; actionLinks = new List&lt;action_link&gt;();
             actionLinks.Add(new action_link() { href = "http://www.facebook.com", text = "facebook link" });
            
             var result = api.Feed.RegisterTemplateBundle(oneLineTemplates, shortStoryTemplates, fullStoryTemplate, actionLinks);
             </code>
             </example>
             <param name="oneLineStoryTemplates">array containing one FBML template that can be used to render one line Feed stories</param>
             <param name="shortStoryTemplates">Array of short story templates</param>
             <param name="fullStoryTemplate">template for a single full story</param>
             <param name="actionLinks">Array of action link records</param>
             <returns>This method returns an identifier that the developer can use to publish actual stories using that template bundle.</returns>
        </member>
        <member name="M:Facebook.Rest.Feed.PublishUserAction(System.Int64,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.List{System.Int64},System.String,Facebook.Rest.Feed.PublishedStorySize)">
            <summary>
            Publishes a story on behalf of the user owning the session, using the specified template bundle.
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
            string oneLineStoryTemplate = "{*actor*} is at {*host*}'s house.";
            string shortStoryTemplateTitle = "{*actor*} has been &lt;a href='http://www.facebook.com/apps/application.php?id=xxx&gt;testing&lt;/a&gt;";
            string shortStoryTemplateBody = "short story body from {*host*}'s house";
            string fullStoryTemplateTitle = "{*actor*} has been &lt;a href='http://www.facebook.com/apps/application.php?id=xxx&gt;testing&lt;/a&gt;";
            string fullStoryTemplateBody = "full story body from {*host*}'s house.";
            List&lt;string&gt; oneLineTemplates = new List&lt;string&gt; { oneLineStoryTemplate };
            feedTemplate shortStoryTemplate = new feedTemplate { PreferredLayout = "1", TemplateBody = shortStoryTemplateBody, TemplateTitle = shortStoryTemplateTitle };
            List&lt;feedTemplate&gt; shortStoryTemplates = new List&lt;feedTemplate&gt; { shortStoryTemplate };
            feedTemplate fullStoryTemplate = new feedTemplate { PreferredLayout = "1", TemplateBody = fullStoryTemplateBody, TemplateTitle = fullStoryTemplateTitle };
            var templateBundleId = api.Feed.RegisterTemplateBundle(oneLineTemplates, shortStoryTemplates, fullStoryTemplate);
            List&lt;long&gt; friendTargets = new List&lt;long&gt; { Constants.Friend_UserId1, Constants.Friend_UserId2 };
            Dictionary&lt;string, string&gt; body_data = new Dictionary&lt;string, string&gt; { { "host", "Run" } };
            var result = api.Feed.PublishUserAction(templateBundleId, body_data, friendTargets, null, Feed.PublishedStorySize.Short);
            </code> 
            </example>
            <param name="template_bundle_id">The template bundle ID used to identify a previously registered template bundle. The ID is the one returned by a previous call to feed.registerTemplateBundle or when you registered the bundle using the Feed Template Console.</param>
            <param name="template_data">A collection of the values that should be substituted into the templates held by the specified template bundle. For information on forming the template_data object, see Facebook API Documentation.</param>
            <param name="target_ids">A list of IDs of friends of the actor, used for stories about a direct action between the actor and the targets of his or her action. This parameter is required if one or more templates in the template bundle makes use of the {*target*} token. It should only include the IDs of friends of the actor, and it should not contain the actor's ID.</param>
            <param name="body_general">Additional markup that extends the body of a short story.</param>
            <param name="story_size">The size of the Feed story.  The one line story is the default, and users have to opt into using short stories at time of publication or through their privacy settings. Otherwise, if the user has not allowed that particular size to be published through the API, then the story size will be demoted to match the user's preference.</param>
            <returns>The function returns true on success or an error response.</returns>
            <remarks>
            http://wiki.developers.facebook.com/index.php/Feed.publishUserAction
            Publishes a story on behalf of the user owning the session, using the specified template bundle. 
            An application can publish a maximum of 10 stories per user per day
            You can test your Feed templates using the Feed preview console (cf above wiki post).
            
            Use JSONHelper.ConvertToJSONArray and/or JSONHelper.ConvertToJSONAssociativeArray to add 'subarrays' in template_data
            
            Reserved tokens in template_data: 
                actor
                target
                
            Special tokens in template_data:
                images: array of image. image: src, (optional)href
                flash: swfsrc, imgsrc, (optional)expanded_width, (optional)expanded_height
                mp3: src, (optional)title, (optional)artist, (optional)album
                video: video_src, preview_img, (optional)video_title, (optional)video_link, (optional)video_type (default:application/x-shockwave-flash)
            </remarks>
        </member>
        <member name="M:Facebook.Rest.Feed.PublishTemplatizedActionAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.ObjectModel.Collection{Facebook.Schema.feed_image},Facebook.Rest.Feed.PublishTemplatizedActionCallback,System.Object)">
            <summary>
            Publishes a Mini-Feed story to the Facebook Page corresponding to the page_actor_id parameter.
            </summary>
            <param name="title_template">The templatized markup displayed in the feed story's title section. This template must contain the token {actor} somewhere in it.</param>
            <param name="title_data">Optional - A collection of the values that should be substituted into the templates in the title_template markup string. The keys of this array are the tokens, and their associated values are the desired substitutions. 'actor' and 'target' are special tokens and should not be included in this array. If your title_template contains tokens besides 'actor' and 'target', then this is a required parameter.</param>
            <param name="body_template">Optional - The markup displayed in the feed story's body section.</param>
            <param name="body_data">Optional - A collection of the values that should be substituted into the templates in the body_template markup string. The keys of this array are the tokens, and their associated values are the desired substitutions. 'actor' and 'target' are special token and should not be included in this array.</param>
            <param name="images">Optional - A collection of images to be displayed in the Feed story. Similar to body_general, the image displayed is not aggregated -- the image from any one of the aggregated stories may be displayed.</param>
            <param name="callback">The AsyncCallback delegate</param>
            <param name="state">An object containing state information for this asynchronous request</param>        
            <returns>The function returns true on success, false on permissions error, or an error response.</returns>
            <remarks>This method is deprecated for actions taken by users only; it still works for actions taken by Facebook Pages.</remarks>
        </member>
        <member name="M:Facebook.Rest.Feed.PublishTemplatizedActionAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.Int32,System.Collections.ObjectModel.Collection{Facebook.Schema.feed_image},System.Collections.ObjectModel.Collection{System.String},Facebook.Rest.Feed.PublishTemplatizedActionCallback,System.Object)">
            <summary>
            Publishes a Mini-Feed story to the Facebook Page corresponding to the page_actor_id parameter.
            </summary>
            <param name="title_template">The templatized markup displayed in the feed story's title section. This template must contain the token {actor} somewhere in it.</param>
            <param name="title_data">Optional - A collection of the values that should be substituted into the templates in the title_template markup string. The keys of this array are the tokens, and their associated values are the desired substitutions. 'actor' and 'target' are special tokens and should not be included in this array. If your title_template contains tokens besides 'actor' and 'target', then this is a required parameter.</param>
            <param name="body_template">Optional - The markup displayed in the feed story's body section.</param>
            <param name="body_data">Optional - A collection of the values that should be substituted into the templates in the body_template markup string. The keys of this array are the tokens, and their associated values are the desired substitutions. 'actor' and 'target' are special token and should not be included in this array.</param>
            <param name="body_general">Optional - Additional markup displayed in the feed story's body section. This markup is not required to be identical for two stories to be aggregated. One of the two will be chosen at random.</param>
            <param name="page_actor_id">Optional - if publishing a story to a Facebook Page, use this parameter as the page who performed the action. If you use this parameter, the application must be added to that Page's Feed. A session key is not required to do this.</param>
            <param name="images">Optional - A collection of images to be displayed in the Feed story. Similar to body_general, the image displayed is not aggregated -- the image from any one of the aggregated stories may be displayed.</param>
            <param name="target_ids">Optional - A collection of IDs of friends of the actor, used for stories about a direct action between the actor and these targets of his/her action. This is required if either the title_template or body_template includes the token {target}.</param>
            <param name="callback">The AsyncCallback delegate</param>
            <param name="state">An object containing state information for this asynchronous request</param>        
            <returns>The function returns true on success, false on permissions error, or an error response.</returns>
            <remarks>This method is deprecated for actions taken by users only; it still works for actions taken by Facebook Pages.</remarks>
        </member>
        <member name="M:Facebook.Rest.Feed.DeactivateTemplateBundleByIDAsync(System.String,Facebook.Rest.Feed.DeactivateTemplateBundleByIDCallback,System.Object)">
             <summary>
             Deactivates a previously registered template bundle.
             </summary>
             <example>
             <code>
             private static void RunDemoAsync()
             {
                 FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
                 api.Feed.DeactivateTemplateBundleByIDAsync(Constants.TemplateBundleId, AsyncDemoCompleted, null);
             }
            
             private static void AsyncDemoCompleted(bool result, Object state, FacebookException e)
             {
                 var actual = result;
             }
             </code>
             </example>
             <param name="template_bundle_id">The template bundle ID used to identify a previously registered template bundle. The ID is the one returned by a previous call to Feed.RegisterTemplateBundle.</param>
             <param name="callback">The AsyncCallback delegate</param>
             <param name="state">An object containing state information for this asynchronous request</param>        
             <returns>This method returns true if the specified template was deactivated.</returns>
        </member>
        <member name="M:Facebook.Rest.Feed.GetRegisteredTemplateBundleByIDAsync(System.Int64,Facebook.Rest.Feed.GetRegisteredTemplateBundleByIDCallback,System.Object)">
             <summary>
             Retrieves information about a specified template bundle previously registered by the requesting application.
             </summary>
             <example>
             <code>
             private static void RunDemoAsync()
             {
                 FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
                 api.Feed.GetRegisteredTemplateBundleByIDAsync(long.Parse(Constants.TemplateBundleId), AsyncDemoCompleted, null);
             }
            
             private static void AsyncDemoCompleted(template_bundle result, Object state, FacebookException e)
             {
                 var actual = result;
             }
             </code>
             </example>
             <param name="template_bundle_id">The template bundle ID used to identify a previously registered template bundle. The ID is the one returned by a previous call to Feed.RegisterTemplateBundle.</param>
             <param name="callback">The AsyncCallback delegate</param>
             <param name="state">An object containing state information for this asynchronous request</param>        
             <returns>This method returns a template_bundle containing information on the specified template bundle ID.</returns>
        </member>
        <member name="M:Facebook.Rest.Feed.GetRegisteredTemplateBundlesAsync(Facebook.Rest.Feed.GetRegisteredTemplateBundlesCallback,System.Object)">
             <summary>
             Retrieves the full list of all the template bundles registered by the requesting application.
             </summary>
             <example>
             <code>
             private static void RunDemoAsync()
             {
                 FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
                 api.Feed.GetRegisteredTemplateBundlesAsync(AsyncDemoCompleted, null);
             }
            
             private static void AsyncDemoCompleted(IList&lt;template_bundle&gt; result, Object state, FacebookException e)
             {
                 var actual = result;
             }
             </code>
             </example>
             <param name="callback">The AsyncCallback delegate</param>
             <param name="state">An object containing state information for this asynchronous request</param>        
             <returns>This method returns a List of template_bundles.</returns>
        </member>
        <member name="M:Facebook.Rest.Feed.PublishUserActionAsync(System.Int64,System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.List{System.Int64},System.String,Facebook.Rest.Feed.PublishedStorySize,Facebook.Rest.Feed.PublishUserActionCallback,System.Object)">
             <summary>
             Publishes a story on behalf of the user owning the session, using the specified template bundle.
             </summary>
             <example>
             <code>
             private static void RunDemoAsync()
             {
                 FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
                 string oneLineStoryTemplate = "{*actor*} is at {*host*}'s house.";
                 string shortStoryTemplateTitle = "{*actor*} has been &lt;a href='http://www.facebook.com/apps/application.php?id=xxx&gt;testing&lt;/a&gt;";
                 string shortStoryTemplateBody = "short story body from {*host*}'s house";
                 string fullStoryTemplateTitle = "{*actor*} has been &lt;a href='http://www.facebook.com/apps/application.php?id=xxx&gt;testing&lt;/a&gt;";
                 string fullStoryTemplateBody = "full story body from {*host*}'s house.";
                 List&lt;string&gt; oneLineTemplates = new List&lt;string&gt; { oneLineStoryTemplate };
                 feedTemplate shortStoryTemplate = new feedTemplate { PreferredLayout = "1", TemplateBody = shortStoryTemplateBody, TemplateTitle = shortStoryTemplateTitle };
                 List&lt;feedTemplate&gt; shortStoryTemplates = new List&lt;feedTemplate&gt; { shortStoryTemplate };
                 feedTemplate fullStoryTemplate = new feedTemplate { PreferredLayout = "1", TemplateBody = fullStoryTemplateBody, TemplateTitle = fullStoryTemplateTitle };
                 var templateBundleId = api.Feed.RegisterTemplateBundle(oneLineTemplates, shortStoryTemplates, fullStoryTemplate);
                 List&lt;long&gt; friendTargets = new List&lt;long&gt; { Constants.Friend_UserId1, Constants.Friend_UserId2 };
                 Dictionary&lt;string, string&gt; body_data = new Dictionary&lt;string, string&gt; { { "host", "Run" } };
                 api.Feed.PublishUserActionAsync(templateBundleId, body_data, friendTargets, null, Feed.PublishedStorySize.Short, AsyncDemoCompleted, null);
             }
            
             private static void AsyncDemoCompleted(bool result, Object state, FacebookException e)
             {
                 var actual = result;
             }
             </code>
             </example>
             <param name="template_bundle_id">The template bundle ID used to identify a previously registered template bundle. The ID is the one returned by a previous call to feed.registerTemplateBundle or when you registered the bundle using the Feed Template Console.</param>
             <param name="template_data">A collection of the values that should be substituted into the templates held by the specified template bundle. For information on forming the template_data object, see Facebook API Documentation.</param>
             <param name="target_ids">A list of IDs of friends of the actor, used for stories about a direct action between the actor and the targets of his or her action. This parameter is required if one or more templates in the template bundle makes use of the {*target*} token. It should only include the IDs of friends of the actor, and it should not contain the actor's ID.</param>
             <param name="body_general">Additional markup that extends the body of a short story.</param>
             <param name="story_size">The size of the Feed story.  The one line story is the default, and users have to opt into using short stories at time of publication or through their privacy settings. Otherwise, if the user has not allowed that particular size to be published through the API, then the story size will be demoted to match the user's preference.</param>
             <param name="callback">The AsyncCallback delegate</param>
             <param name="state">An object containing state information for this asynchronous request</param>
             <returns>The function returns true on success or an error response.</returns>
             <remarks>
             http://wiki.developers.facebook.com/index.php/Feed.publishUserAction
             Publishes a story on behalf of the user owning the session, using the specified template bundle. 
             An application can publish a maximum of 10 stories per user per day
             You can test your Feed templates using the Feed preview console (cf above wiki post).
             
             Use JSONHelper.ConvertToJSONArray and/or JSONHelper.ConvertToJSONAssociativeArray to add 'subarrays' in template_data
             
             Reserved tokens in template_data: 
                 actor
                 target
                 
             Special tokens in template_data:
                 images: array of image. image: src, (optional)href
                 flash: swfsrc, imgsrc, (optional)expanded_width, (optional)expanded_height
                 mp3: src, (optional)title, (optional)artist, (optional)album
                 video: video_src, preview_img, (optional)video_title, (optional)video_link, (optional)video_type (default:application/x-shockwave-flash)
             </remarks>
        </member>
        <member name="M:Facebook.Rest.Feed.RegisterTemplateBundleAsync(System.Collections.Generic.List{System.String},System.Collections.Generic.List{Facebook.Rest.feedTemplate},Facebook.Rest.feedTemplate,Facebook.Rest.Feed.RegisterTemplateBundleCallback,System.Object)">
             <summary>
             Builds a template bundle around the specified templates, registers them on Facebook, and responds with a template bundle ID that can be used to identify your template bundle to other Feed-related API calls.
             </summary>
             <example>
             <code>
             private static void RunDemoAsync()
             {
                 FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
            
                 string oneLineStoryTemplate = "{*actor*} has been playing.";
                 string shortStoryTemplateTitle = "{*actor*} has been &lt;a href='http://www.facebook.com/apps/application.php?id=xxx&gt;testing!&lt;/a&gt;";
                 string shortStoryTemplateBody = "short story body";
                 string fullStoryTemplateTitle = "{*actor*} has been &lt;a href='http://www.facebook.com/apps/application.php?id=xxx&gt;testing!&lt;/a&gt;";
                 string fullStoryTemplateBody = "full story body";
                 List&lt;string&gt; oneLineTemplates = new List&lt;string&gt; { oneLineStoryTemplate };
                 feedTemplate shortStoryTemplate = new feedTemplate { PreferredLayout = "1", TemplateBody = shortStoryTemplateBody, TemplateTitle = shortStoryTemplateTitle };
                 List&lt;feedTemplate&gt; shortStoryTemplates = new List&lt;feedTemplate&gt; { shortStoryTemplate };
                 feedTemplate fullStoryTemplate = new feedTemplate { PreferredLayout = "1", TemplateBody = fullStoryTemplateBody, TemplateTitle = fullStoryTemplateTitle };
            
                 api.Feed.RegisterTemplateBundleAsync(oneLineTemplates, shortStoryTemplates, fullStoryTemplate, AsyncDemoCompleted, null);
             }
            
             private static void AsyncDemoCompleted(long result, Object state, FacebookException e)
             {
                 var actual = result;
             }
             </code>
             </example>
             <param name="oneLineStoryTemplates">array containing one FBML template that can be used to render one line Feed stories</param>
             <param name="shortStoryTemplates">Array of short story templates</param>
             <param name="fullStoryTemplate">template for a single full story</param>
             <param name="callback">The AsyncCallback delegate</param>
             <param name="state">An object containing state information for this asynchronous request</param>        
             <returns>This method returns an identifier that the developer can use to publish actual stories using that template bundle.</returns>
        </member>
        <member name="M:Facebook.Rest.Feed.RegisterTemplateBundleAsync(System.Collections.Generic.List{System.String},System.Collections.Generic.List{Facebook.Rest.feedTemplate},Facebook.Rest.feedTemplate,System.Collections.Generic.IList{Facebook.Schema.action_link},Facebook.Rest.Feed.RegisterTemplateBundleCallback,System.Object)">
             <summary>
             Builds a template bundle around the specified templates, registers them on Facebook, and responds with a template bundle ID that can be used to identify your template bundle to other Feed-related API calls.
             </summary>
             <example>
             <code>
             private static void RunDemoAsync()
             {
                 FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
            
                 string oneLineStoryTemplate = "{*actor*} has been playing.";
                 string shortStoryTemplateTitle = "{*actor*} has been &lt;a href='http://www.facebook.com/apps/application.php?id=xxx&gt;testing!&lt;/a&gt;";
                 string shortStoryTemplateBody = "short story body";
                 string fullStoryTemplateTitle = "{*actor*} has been &lt;a href='http://www.facebook.com/apps/application.php?id=xxx&gt;testing!&lt;/a&gt;";
                 string fullStoryTemplateBody = "full story body";
                 List&lt;string&gt; oneLineTemplates = new List&lt;string&gt; { oneLineStoryTemplate };
                 feedTemplate shortStoryTemplate = new feedTemplate { PreferredLayout = "1", TemplateBody = shortStoryTemplateBody, TemplateTitle = shortStoryTemplateTitle };
                 List&lt;feedTemplate&gt; shortStoryTemplates = new List&lt;feedTemplate&gt; { shortStoryTemplate };
                 feedTemplate fullStoryTemplate = new feedTemplate { PreferredLayout = "1", TemplateBody = fullStoryTemplateBody, TemplateTitle = fullStoryTemplateTitle };
                 List&lt;action_link&gt; actionLinks = new List&lt;action_link&gt;();
                 actionLinks.Add(new action_link() { href = "http://www.facebook.com", text = "facebook link"});
            
                 api.Feed.RegisterTemplateBundleAsync(oneLineTemplates, shortStoryTemplates, fullStoryTemplate, actionLinks, AsyncDemoCompleted, null);
             }
            
             private static void AsyncDemoCompleted(long result, Object state, FacebookException e)
             {
                 var actual = result;
             }
             </code>
             </example>
             <param name="oneLineStoryTemplates">array containing one FBML template that can be used to render one line Feed stories</param>
             <param name="shortStoryTemplates">Array of short story templates</param>
             <param name="fullStoryTemplate">template for a single full story</param>
             <param name="actionLinks">Array of action link records</param>
             <param name="callback">The AsyncCallback delegate</param>
             <param name="state">An object containing state information for this asynchronous request</param>        
             <returns>This method returns an identifier that the developer can use to publish actual stories using that template bundle.</returns>
        </member>
        <member name="M:Facebook.Rest.Feed.AddFeedImages(System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IEnumerable{Facebook.Schema.feed_image})">
            <summary>
            Adds image, image link key value pairs to the request parameter collection.
            </summary>
            <param name="dict">Request paramenter collection.</param>
            <param name="images">A collection of images.</param>
        </member>
        <member name="T:Facebook.Rest.Feed.PublishTemplatizedActionCallback">
            <summary>
            Callback for async call to PublishTemplatizedAction
            </summary>
        </member>
        <member name="T:Facebook.Rest.Feed.DeactivateTemplateBundleByIDCallback">
            <summary>
            Callback for async call to DeactivateTemplateBundleByID
            </summary>
        </member>
        <member name="T:Facebook.Rest.Feed.GetRegisteredTemplateBundleByIDCallback">
            <summary>
            Callback for async call to GetRegisteredTemplateBundleByID
            </summary>
        </member>
        <member name="T:Facebook.Rest.Feed.GetRegisteredTemplateBundlesCallback">
            <summary>
            Callback for async call to GetRegisteredTemplateBundles
            </summary>
        </member>
        <member name="T:Facebook.Rest.Feed.RegisterTemplateBundleCallback">
            <summary>
            Callback for async call to RegisterTemplateBundle
            </summary>
        </member>
        <member name="T:Facebook.Rest.Feed.PublishUserActionCallback">
            <summary>
            Callback for async call to PublishUserAction
            </summary>
        </member>
        <member name="T:Facebook.Rest.Feed.PublishedStorySize">
            <summary>
            Different story sizes to use when publishing user actions to their feed.
            </summary>
        </member>
        <member name="F:Facebook.Rest.Feed.PublishedStorySize.OneLine">
            <summary>
            OneLine = 1
            </summary>
        </member>
        <member name="F:Facebook.Rest.Feed.PublishedStorySize.Short">
            <summary>
            Short = 2
            </summary>
        </member>
        <member name="F:Facebook.Rest.Feed.PublishedStorySize.Full">
            <summary>
            Full = 4
            </summary>
        </member>
        <member name="T:Facebook.Rest.feedTemplate">
            <summary>
            Contains the different parts of a Facebook feed template.
            </summary>
        </member>
        <member name="P:Facebook.Rest.feedTemplate.TemplateTitle">
            <summary>
            The title of the template
            </summary>
        </member>
        <member name="P:Facebook.Rest.feedTemplate.TemplateBody">
            <summary>
            The body of the template.
            </summary>
        </member>
        <member name="P:Facebook.Rest.feedTemplate.PreferredLayout">
            <summary>
            The preferred layout for the template.
            </summary>
        </member>
        <member name="T:Facebook.Rest.Application">
            <summary>
            Facebook Application API methods.
            </summary>
        </member>
        <member name="M:Facebook.Rest.Application.#ctor(Facebook.Session.IFacebookSession)">
            <summary>
            Public constructor for facebook.Application
            </summary>
            <param name="session">Needs a connected Facebook Session object for making requests</param>
        </member>
        <member name="M:Facebook.Rest.Application.GetPublicInfo">
            <summary>
            Returns public information about a given application (not necessarily your own).
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new FBMLCanvasSession(Constants.WebApplicationKey, Constants.WebSecret));
            api.Session.UserId = Constants.UserId;
            app_info result = api.Application.GetPublicInfo();
            </code>
            </example>
            <returns>This method returns public information for an application.</returns>
        </member>
        <member name="M:Facebook.Rest.Application.GetPublicInfo(System.Nullable{System.Int64},System.String,System.String)">
            <summary>
            Returns public information about a given application (not necessarily your own).
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new FBMLCanvasSession(Constants.WebApplicationKey, Constants.WebSecret));
            api.Session.UserId = Constants.UserId;
            app_info result = api.Application.GetPublicInfo(null, Constants.WebApplicationKey, null);
            </code>
            </example>
            <param name="application_api_key">API key of the desired application. You must specify exactly one of application_id, application_api_key or application_canvas_name.</param>
            <param name="application_canvas_name">Canvas page name of the desired application. You must specify exactly one of application_id, application_api_key or application_canvas_name.</param>
            <param name="application_id">Application ID of the desired application. You must specify exactly one of application_id, application_api_key or application_canvas_name.</param>
            <returns>This method returns public information for an application.</returns>
        </member>
        <member name="M:Facebook.Rest.Application.GetPublicInfoAsync(Facebook.Rest.Application.GetPublicInfoCallback,System.Object)">
            <summary>
            Returns public information about a given application (not necessarily your own).
            </summary>
            <example>
            <code>
            private static void RunDemoAsync()
            {
                FacebookApi api = new FacebookApi(new FBMLCanvasSession(Constants.WebApplicationKey, Constants.WebSecret));
                api.Session.UserId = Constants.UserId;
                api.Application.GetPublicInfoAsync(AsyncDemoCompleted, null);
            }
            
            private static void AsyncDemoCompleted(app_info result, Object state, FacebookException e)
            {
                var actual = result;
            }
            </code>
            </example>
            <param name="callback">The AsyncCallback delegate</param>
            <param name="state">An object containing state information for this asynchronous request</param>        
            <returns>This method returns public information for an application.</returns>
        </member>
        <member name="M:Facebook.Rest.Application.GetPublicInfoAsync(System.Nullable{System.Int64},System.String,System.String,Facebook.Rest.Application.GetPublicInfoCallback,System.Object)">
            <summary>
            Returns public information about a given application (not necessarily your own).
            </summary>
            <example>
            <code>
            private static void RunDemoAsync()
            {
                FacebookApi api = new FacebookApi(new FBMLCanvasSession(Constants.WebApplicationKey, Constants.WebSecret));
                api.Session.UserId = Constants.UserId;
                api.Application.GetPublicInfoAsync(null, Constants.WebApplicationKey, null, AsyncDemoCompleted, null);
            }
            
            private static void AsyncDemoCompleted(app_info result, Object state, FacebookException e)
            {
                var actual = result;
            }
            </code>
            </example>
            <param name="application_api_key">API key of the desired application. You must specify exactly one of application_id, application_api_key or application_canvas_name.</param>
            <param name="application_canvas_name">Canvas page name of the desired application. You must specify exactly one of application_id, application_api_key or application_canvas_name.</param>
            <param name="application_id">Application ID of the desired application. You must specify exactly one of application_id, application_api_key or application_canvas_name.</param>
            <param name="callback">The AsyncCallback delegate</param>
            <param name="state">An object containing state information for this asynchronous request</param>        
            <returns>This method returns public information for an application.</returns>
        </member>
        <member name="M:Facebook.Rest.Application.GetPublicInfo(System.Nullable{System.Int64},System.String,System.String,System.Boolean,Facebook.Rest.Application.GetPublicInfoCallback,System.Object)">
            <summary>
            Returns public information for an application (as shown in the application directory) by either application ID, API key, or canvas page name. 
            </summary>
            <param name="application_id">Application ID of the desired application. You must specify exactly one of application_id, application_api_key or application_canvas_name. </param>
            <param name="application_api_key">API key of the desired application. You must specify exactly one of application_id, application_api_key or application_canvas_name. </param>
            <param name="application_canvas_name">Canvas page name of the desired application. You must specify exactly one of application_id, application_api_key or application_canvas_name. </param>
            <param name="isAsync">Indicator if current call is async or sync</param>
            <param name="callback">The async callback to use if the call is async</param>
            <param name="state">Object state to populate for use by async callback</param>
            <returns>app_info object</returns>
        </member>
        <member name="T:Facebook.Rest.Application.GetPublicInfoCallback">
            <summary>
            Call back used with Async call to GetProfileInfo completes
            </summary>
        </member>
        <member name="T:Facebook.Utility.JSONHelper">
            <summary>
            JSON (JavaScript Object Notation) Utility Methods.
            </summary>
        </member>
        <member name="M:Facebook.Utility.JSONHelper.ConvertToJSONAssociativeArray(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
             Converts a Dictionary to a JSON-formatted Associative Array.
            </summary>
            <param name="dict">Source Dictionary collection [string|string].</param>
            <returns>JSON Associative Array string.</returns>
        </member>
        <member name="M:Facebook.Utility.JSONHelper.IsJSONArray(System.String)">
            <summary>
            Determines if input string is a formatted JSON Array.
            </summary>
            <param name="test">string</param>
            <returns>bool</returns>
        </member>
        <member name="M:Facebook.Utility.JSONHelper.IsBoolean(System.String)">
            <summary>
            Determines if input string is a boolean value.
            </summary>
            <param name="test">string</param>
            <returns>bool</returns>
        </member>
        <member name="M:Facebook.Utility.JSONHelper.ConvertToJSONArray(System.Collections.Generic.List{System.String})">
            <summary>
            Converts a List collection of type string to a JSON Array.
            </summary>
            <param name="list">List of strings</param>
            <returns>string</returns>
        </member>
        <member name="M:Facebook.Utility.JSONHelper.ConvertToJSONArray(System.Collections.Generic.List{System.Int64})">
            <summary>
            Converts a List collection of type long to a JSON Array.
            </summary>
            <param name="list">List of longs</param>
            <returns>string</returns>
        </member>
        <member name="M:Facebook.Utility.JSONHelper.ConvertFromJSONArray(System.String)">
            <summary>
            Converts a JSON Array string to a List collection of type string.
            </summary>
            <param name="array">JSON Array string</param>
            <returns>List of strings</returns>
        </member>
        <member name="M:Facebook.Utility.JSONHelper.ConvertFromJSONAssoicativeArray(System.String)">
            <summary>
            Converts a JSON Array string to a Dictionary collection of type string, string.
            </summary>
            <param name="array">JSON Array string</param>
            <returns>Dictionary of string, string</returns>
        </member>
        <member name="M:Facebook.Utility.JSONHelper.EscapeJSONString(System.String)">
            <summary>
            Escape backslashes and double quotes of valid JSON content string.
            </summary>
            <param name="originalString">string</param>
            <returns>string</returns>
        </member>
        <member name="T:Facebook.Schema.Enums">
            <summary>
            Facebook Enums TODO: Move all these to an xml as key/value pairs and use Linq to XML or something cleaner
            </summary>
        </member>
        <member name="T:Facebook.Schema.Enums.ExtendedPermissions">
            <summary>
            Extended Permissions
            </summary>
        </member>
        <member name="F:Facebook.Schema.Enums.ExtendedPermissions.none">
            <summary>
            Empty value
            </summary>
        </member>
        <member name="F:Facebook.Schema.Enums.ExtendedPermissions.status_update">
            <summary>
            Status Update
            </summary>
        </member>
        <member name="F:Facebook.Schema.Enums.ExtendedPermissions.photo_upload">
            <summary>
            Photo Upload
            </summary>
        </member>
        <member name="F:Facebook.Schema.Enums.ExtendedPermissions.email">
            <summary>
            Send email
            </summary>
        </member>
        <member name="F:Facebook.Schema.Enums.ExtendedPermissions.offline_access">
            <summary>
            Offline access
            </summary>
        </member>
        <member name="F:Facebook.Schema.Enums.ExtendedPermissions.create_event">
            <summary>
            Create event
            </summary>
        </member>
        <member name="F:Facebook.Schema.Enums.ExtendedPermissions.rsvp_event">
            <summary>
            rsvp an event
            </summary>
        </member>
        <member name="F:Facebook.Schema.Enums.ExtendedPermissions.sms">
            <summary>
            send sms
            </summary>
        </member>
        <member name="F:Facebook.Schema.Enums.ExtendedPermissions.publish_stream">
            <summary>
            publish a stream
            </summary>
        </member>
        <member name="F:Facebook.Schema.Enums.ExtendedPermissions.read_stream">
            <summary>
            read stream
            </summary>
        </member>
        <member name="F:Facebook.Schema.Enums.ExtendedPermissions.video_upload">
            <summary>
            upload video
            </summary>
        </member>
        <member name="F:Facebook.Schema.Enums.ExtendedPermissions.create_note">
            <summary>
            create note
            </summary>
        </member>
        <member name="F:Facebook.Schema.Enums.ExtendedPermissions.share_item">
            <summary>
            share item
            </summary>
        </member>
        <member name="F:Facebook.Schema.Enums.ExtendedPermissions.manage_mailbox">
            <summary>
            manage mailbox
            </summary>
        </member>
        <member name="F:Facebook.Schema.Enums.ExtendedPermissions.read_mailbox">
            <summary>
            read mail
            </summary>
        </member>
        <member name="T:Facebook.Schema.Enums.ObjectPropertyType">
            <summary>
            Represents the type of an object property.
            </summary>
        </member>
        <member name="F:Facebook.Schema.Enums.ObjectPropertyType.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:Facebook.Schema.Enums.ObjectPropertyType.Integer">
            <summary>
            Integer.
            </summary>
        </member>
        <member name="F:Facebook.Schema.Enums.ObjectPropertyType.String">
            <summary>
            String with less than 255 characters.
            </summary>
        </member>
        <member name="F:Facebook.Schema.Enums.ObjectPropertyType.TextBlob">
            <summary>
            Text blob which less than 64kb.
            </summary>
        </member>
        <member name="T:Facebook.Schema.Enums.DataAssociationType">
            <summary>
            Type of data association.
            </summary>
        </member>
        <member name="F:Facebook.Schema.Enums.DataAssociationType.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:Facebook.Schema.Enums.DataAssociationType.OneWay">
            <summary>
            One-way association, where reverse lookup is not needed.
            </summary>
        </member>
        <member name="F:Facebook.Schema.Enums.DataAssociationType.TwoWaySymmetric">
            <summary>
            Two-way symmetric association, where a backward association
            (B to A) is always created when a forward association (A to B) is created.
            </summary>
        </member>
        <member name="F:Facebook.Schema.Enums.DataAssociationType.TwoWayAsymmetric">
            <summary>
            Two-way asymmetric association, where a backward association (B to A) has
            different meaning than a forward association (A to B).
            </summary>
        </member>
        <member name="T:Facebook.Schema.Enums.IntegrationPointName">
            <summary>
            Integration point names
            </summary>
        </member>
        <member name="F:Facebook.Schema.Enums.IntegrationPointName.notifications_per_day">
            <summary>
            Notifications per day
            </summary>
        </member>
        <member name="F:Facebook.Schema.Enums.IntegrationPointName.requests_per_day">
            <summary>
            requests per day
            </summary>
        </member>
        <member name="F:Facebook.Schema.Enums.IntegrationPointName.emails_per_day">
            <summary>
            emails per day
            </summary>
        </member>
        <member name="F:Facebook.Schema.Enums.IntegrationPointName.email_disable_message_location">
            <summary>
            emails disable message location
            </summary>
        </member>
        <member name="T:Facebook.Schema.Enums.FileType">
            <summary>
            Available file types for video and image upload
            </summary>
        </member>
        <member name="F:Facebook.Schema.Enums.FileType.asf">
            <summary>
            .asf
            </summary>
        </member>
        <member name="F:Facebook.Schema.Enums.FileType.avi">
            <summary>
            .avi
            </summary>
        </member>
        <member name="F:Facebook.Schema.Enums.FileType.flv">
            <summary>
            .flv
            </summary>
        </member>
        <member name="F:Facebook.Schema.Enums.FileType.m4v">
            <summary>
            .mp4
            </summary>
        </member>
        <member name="F:Facebook.Schema.Enums.FileType.mkv">
            <summary>
            .mkv
            </summary>
        </member>
        <member name="F:Facebook.Schema.Enums.FileType.mov">
            <summary>
            .mov
            </summary>
        </member>
        <member name="F:Facebook.Schema.Enums.FileType.mp4">
            <summary>
            .mp4
            </summary>
        </member>
        <member name="F:Facebook.Schema.Enums.FileType.mpe">
            <summary>
            .mpe
            </summary>
        </member>
        <member name="F:Facebook.Schema.Enums.FileType.mpeg">
            <summary>
            .mpeg
            </summary>
        </member>
        <member name="F:Facebook.Schema.Enums.FileType.mpeg4">
            <summary>
            .mpeg4
            </summary>
        </member>
        <member name="F:Facebook.Schema.Enums.FileType.mpg">
            <summary>
            .mpg
            </summary>
        </member>
        <member name="F:Facebook.Schema.Enums.FileType.nsv">
            <summary>
            .nsv
            </summary>
        </member>
        <member name="F:Facebook.Schema.Enums.FileType.ogm">
            <summary>
            .ogm
            </summary>
        </member>
        <member name="F:Facebook.Schema.Enums.FileType.qt">
            <summary>
            .qt
            </summary>
        </member>
        <member name="F:Facebook.Schema.Enums.FileType.vob">
            <summary>
            .vob
            </summary>
        </member>
        <member name="F:Facebook.Schema.Enums.FileType.wmv">
            <summary>
            .wmv
            </summary>
        </member>
        <member name="F:Facebook.Schema.Enums.FileType.bmp">
            <summary>
            .bmp
            </summary>
        </member>
        <member name="F:Facebook.Schema.Enums.FileType.gif">
            <summary>
            .gif
            </summary>
        </member>
        <member name="F:Facebook.Schema.Enums.FileType.jpg">
            <summary>
            .jpg
            </summary>
        </member>
        <member name="F:Facebook.Schema.Enums.FileType.png">
            <summary>
            .png
            </summary>
        </member>
        <member name="F:Facebook.Schema.Enums.FileType.psd">
            <summary>
            .psd
            </summary>
        </member>
        <member name="F:Facebook.Schema.Enums.FileType.tiff">
            <summary>
            .tiff
            </summary>
        </member>
        <member name="F:Facebook.Schema.Enums.FileType.jp2">
            <summary>
            .jp2
            </summary>
        </member>
        <member name="F:Facebook.Schema.Enums.FileType.iff">
            <summary>
            .iff
            </summary>
        </member>
        <member name="F:Facebook.Schema.Enums.FileType.wbmp">
            <summary>
            .wbmp
            </summary>
        </member>
        <member name="F:Facebook.Schema.Enums.FileType.xbm">
            <summary>
            .xbm
            </summary>
        </member>
        <member name="T:Facebook.Rest.Friends">
            <summary>
            Facebook Friends API methods.
            </summary>
        </member>
        <member name="M:Facebook.Rest.Friends.#ctor(Facebook.Rest.IUsers,Facebook.Session.IFacebookSession)">
            <summary>
            Public constructor for facebook.Friends
            </summary>
            <param name="users"></param>
            <param name="session">Needs a connected Facebook Session object for making requests</param>
        </member>
        <member name="M:Facebook.Rest.Friends.AreFriends(System.Collections.Generic.List{Facebook.Schema.user},System.Collections.Generic.List{Facebook.Schema.user})">
            <summary>
            Returns whether or not each pair of specified users is friends with each other.
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
            List&lt;user&gt; u1 = new List&lt;user&gt;();
            List&lt;user&gt; u2 = new List&lt;user&gt;();
            u1.Add(api.Users.GetInfo(Constants.Friend_UserId1));
            u2.Add(api.Users.GetInfo(Constants.Friend_UserId2));
            var result = api.Friends.AreFriends(u1, u2);
            </code>
            </example>
            <param name="uids1">A list of user ids matched with uids2.</param>
            <param name="uids2">A list of user ids matched with uids1.</param>
            <returns>Returns a list of friend_info elements corresponding to the lists passed. The are_friends subelement of each friend_info element is 0 or false if the users are not friends, and 1 or true if they are friends. Note that, for each pair, this function is symmetric. That is, it does not matter which user is in uids1 and which is in uids2.</returns>
            <remarks>The first array specifies one half of each pair, the second array the other half; therefore, they must be of equal size.</remarks>
        </member>
        <member name="M:Facebook.Rest.Friends.AreFriends(Facebook.Schema.user,Facebook.Schema.user)">
            <summary>
            Returns whether or not each pair of specified users is friends with each other.
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
            user u1 = api.Users.GetInfo(Constants.Friend_UserId1);
            user u2 = api.Users.GetInfo(Constants.Friend_UserId2);
            var result = api.Friends.AreFriends(u1, u2);/// </code>
            </example>
            <param name="user1">A user to match against user2.</param>
            <param name="user2">A user to match against user1.</param>
            <returns>Returns a list of friend_info elements corresponding to the lists passed. The are_friends subelement of each friend_info element is 0 or false if the users are not friends, and 1 or true if they are friends. Note that, for each pair, this function is symmetric. That is, it does not matter which user is in uids1 and which is in uids2.</returns>
            <remarks>The first array specifies one half of each pair, the second array the other half; therefore, they must be of equal size.</remarks>
        </member>
        <member name="M:Facebook.Rest.Friends.AreFriends(System.Int64,System.Int64)">
            <summary>
            Returns whether or not each pair of specified users is friends with each other.
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
            var result = api.Friends.AreFriends(Constants.Friend_UserId1, Constants.Friend_UserId2);
            </code>
            </example>
            <param name="uid1">A user id to match against uid2.</param>
            <param name="uid2">A user id to match against uid1.</param>
            <returns>Returns a list of friend_info elements corresponding to the lists passed. The are_friends subelement of each friend_info element is 0 or false if the users are not friends, and 1 or true if they are friends. Note that, for each pair, this function is symmetric. That is, it does not matter which user is in uids1 and which is in uids2.</returns>
            <remarks>The first array specifies one half of each pair, the second array the other half; therefore, they must be of equal size.</remarks>
        </member>
        <member name="M:Facebook.Rest.Friends.AreFriends(System.Collections.Generic.List{System.Int64},System.Collections.Generic.List{System.Int64})">
            <summary>
            Returns whether or not each pair of specified users is friends with each other.
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
            List&lt;long&gt; u1 = new List&lt;long&gt; { Constants.Friend_UserId1 };
            List&lt;long&gt; u2 = new List&lt;long&gt; { Constants.Friend_UserId2 };
            var result = api.Friends.AreFriends(u1, u2);
            </code>
            </example>
            <param name="uids1">A list of user ids matched with uids2.</param>
            <param name="uids2">A list of user ids matched with uids1.</param>
            <returns>Returns a list of friend_info elements corresponding to the lists passed. The are_friends subelement of each friend_info element is 0 or false if the users are not friends, and 1 or true if they are friends. Note that, for each pair, this function is symmetric. That is, it does not matter which user is in uids1 and which is in uids2.</returns>
            <remarks>The first array specifies one half of each pair, the second array the other half; therefore, they must be of equal size.</remarks>
        </member>
        <member name="M:Facebook.Rest.Friends.Get">
            <summary>
            Returns the identifiers for the current user's Facebook friends.
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
            var result = api.Friends.Get();
            </code>
            </example>
            <returns>The List of friend IDs returned are the friends that are visible to the Facebook Platform. If no friends are found, the method returns an empty friends_get_response element.</returns>
            <remarks>The first array specifies one half of each pair, the second array the other half; therefore, they must be of equal size.</remarks>
        </member>
        <member name="M:Facebook.Rest.Friends.Get(System.Int64)">
            <summary>
            Returns the identifiers for the current user's Facebook friends.
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
            var result = api.Friends.Get(Constants.UserId);
            </code>
            </example>
            <param name="uid">The user ID for the user whose friends you want to return.</param>
            <returns>The List of friend IDs returned are the friends that are visible to the Facebook Platform. If no friends are found, the method returns an empty friends_get_response element.</returns>
            <remarks>The first array specifies one half of each pair, the second array the other half; therefore, they must be of equal size.</remarks>
        </member>
        <member name="M:Facebook.Rest.Friends.Get(System.Int64,System.Int64)">
            <summary>
            Returns the identifiers for the current user's Facebook friends.
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
            var result = api.Friends.Get(Constants.UserId, Constants.FriendListId);
            </code>
            </example>
            <param name="uid">The user ID for the user whose friends you want to return.</param>
            <param name="flid">Returns the friends in a friend list.</param>
            <returns>The List of friend IDs returned are the friends that are visible to the Facebook Platform. If no friends are found, the method returns an empty friends_get_response element.</returns>
            <remarks>The first array specifies one half of each pair, the second array the other half; therefore, they must be of equal size.</remarks>
        </member>
        <member name="M:Facebook.Rest.Friends.GetAppUsers">
            <summary>
            Returns the identifiers for the current user's Facebook friends who have authorized the specific calling application.
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
            var result = api.Friends.GetAppUsers();
            </code>
            </example>
            <returns>The friend IDs returned are those friends who have authorized the calling application, which is a subset of the friends returned from the friends.get method. If no friends are found, the method returns an empty friends_getAppUsers_response element.</returns>
            <remarks>The first array specifies one half of each pair, the second array the other half; therefore, they must be of equal size.</remarks>
        </member>
        <member name="M:Facebook.Rest.Friends.GetUserObjects">
            <summary>
            Returns the user objects for the current user's Facebook friends.
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
            var result = api.Friends.GetUserObjects();
            </code>
            </example>
            <returns>This method returns the user objects for the current user's friends.</returns>
            <remarks>The first array specifies one half of each pair, the second array the other half; therefore, they must be of equal size.</remarks>
        </member>
        <member name="M:Facebook.Rest.Friends.GetUserObjects(System.Int64)">
            <summary>
            Returns the user objects for the specified user's Facebook friends.
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
            var result = api.Friends.GetUserObjects(Constants.UserId);
            </code>
            </example>
            <param name="uid">The user ID for the user whose friends you want to return.</param>
            <returns>This method returns the user objects for the specified user's friends.</returns>
            <remarks>The first array specifies one half of each pair, the second array the other half; therefore, they must be of equal size.</remarks>
        </member>
        <member name="M:Facebook.Rest.Friends.GetUserObjects(System.Int64,System.Int64)">
            <summary>
            Returns the user objects for the specified user's Facebook friends.
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
            var result = api.Friends.GetUserObjects(Constants.UserId, Constants.FriendListId);
            </code>
            </example>
            <param name="uid">The user ID for the user whose friends you want to return.</param>
            <param name="flid">Returns the friends in a friend list.</param>
            <returns>This method returns the user objects for the specified user's friends.</returns>
            <remarks>The first array specifies one half of each pair, the second array the other half; therefore, they must be of equal size.</remarks>
        </member>
        <member name="M:Facebook.Rest.Friends.GetAppUsersObjects">
            <summary>
            Returns the user objects for the current user's Facebook friends who have authorized the specific calling application.
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
            var result = api.Friends.GetAppUsersObjects();
            </code>
            </example>
            <returns>The friend user objects returned are those friends who have authorized the calling application, which is a subset of the friends returned from the friends.get method.</returns>
            <remarks>The first array specifies one half of each pair, the second array the other half; therefore, they must be of equal size.</remarks>
        </member>
        <member name="M:Facebook.Rest.Friends.GetLists">
            <summary>
            Returns the identifiers for the current user's Facebook friend lists.
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
            var result = api.Friends.GetLists();
            </code>
            </example>
            <returns>The friend list IDs returned are the lists associated with the subject user.</returns>
            <remarks>The first array specifies one half of each pair, the second array the other half; therefore, they must be of equal size.</remarks>
        </member>
        <member name="M:Facebook.Rest.Friends.GetMutualFriends(System.Int64)">
            <summary>
            Returns the identifiers for the requested users' Mutual Facebook friends.
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
            var result = api.Friends.GetMutualFriends(Constants.UserId);
            </code>
            </example>
            <param name="target_uid">The user ID of one of the target user whose mutual friends you want to retrieve.</param>
            <returns>This method returns an List of user IDs of the mutual friends, or an error code.</returns>
            <remarks>The first array specifies one half of each pair, the second array the other half; therefore, they must be of equal size.</remarks>
        </member>
        <member name="M:Facebook.Rest.Friends.GetMutualFriends(System.Int64,System.Nullable{System.Int64})">
            <summary>
            Returns the identifiers for the requested users' Mutual Facebook friends.
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
            var result = api.Friends.GetMutualFriends(Constants.Friend_UserId1, Constants.UserId);
            </code>
            </example>
            <param name="target_uid">The user ID of one of the target user whose mutual friends you want to retrieve.</param>
            <param name="source_uid">The user ID of the other user for which you are getting mutual friends of. Defaults to the current session user.</param>
            <returns>This method returns an List of user IDs of the mutual friends, or an error code.</returns>
            <remarks>The first array specifies one half of each pair, the second array the other half; therefore, they must be of equal size.</remarks>
        </member>
        <member name="M:Facebook.Rest.Friends.AreFriendsAsync(System.Collections.Generic.List{Facebook.Schema.user},System.Collections.Generic.List{Facebook.Schema.user},Facebook.Rest.Friends.AreFriendsCallback,System.Object)">
             <summary>
             Returns whether or not each pair of specified users is friends with each other.
             </summary>
             <example>
             <code>
             private static void RunDemoAsync()
             {
                 FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
                 List&lt;user&gt; u1 = new List&lt;user&gt;();
                 List&lt;user&gt; u2 = new List&lt;user&gt;();
                 u1.Add(api.Users.GetInfo(Constants.Friend_UserId1));
                 u2.Add(api.Users.GetInfo(Constants.Friend_UserId2));
                 api.Friends.AreFriendsAsync(u1, u2, AsyncDemoCompleted, null);
             }
            
             private static void AsyncDemoCompleted(IList&lt;friend_info&gt; result, Object state, FacebookException e)
             {
                 var actual = result;
             }
             </code>
             </example>
             <param name="uids1">A list of user ids matched with uids2.</param>
             <param name="uids2">A list of user ids matched with uids1.</param>
             <param name="callback">The AsyncCallback delegate</param>
             <param name="state">An object containing state information for this asynchronous request</param>        
             <returns>Returns a list of friend_info elements corresponding to the lists passed. The are_friends subelement of each friend_info element is 0 or false if the users are not friends, and 1 or true if they are friends. Note that, for each pair, this function is symmetric. That is, it does not matter which user is in uids1 and which is in uids2.</returns>
             <remarks>The first array specifies one half of each pair, the second array the other half; therefore, they must be of equal size.</remarks>
        </member>
        <member name="M:Facebook.Rest.Friends.AreFriendsAsync(Facebook.Schema.user,Facebook.Schema.user,Facebook.Rest.Friends.AreFriendsCallback,System.Object)">
             <summary>
             Returns whether or not each pair of specified users is friends with each other.
             </summary>
             <example>
             <code>
             private static void RunDemoAsync()
             {
                 FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
                 user u1 = api.Users.GetInfo(Constants.Friend_UserId1);
                 user u2 = api.Users.GetInfo(Constants.Friend_UserId2);
                 api.Friends.AreFriendsAsync(u1, u2, AsyncDemoCompleted, null);
             }
            
             private static void AsyncDemoCompleted(IList&lt;friend_info&gt; result, Object state, FacebookException e)
             {
                 var actual = result;
             }/// </code>
             </example>
             <param name="user1">A user to match against user2.</param>
             <param name="user2">A user to match against user1.</param>
             <param name="callback">The AsyncCallback delegate</param>
             <param name="state">An object containing state information for this asynchronous request</param>        
             <returns>Returns a list of friend_info elements corresponding to the lists passed. The are_friends subelement of each friend_info element is 0 or false if the users are not friends, and 1 or true if they are friends. Note that, for each pair, this function is symmetric. That is, it does not matter which user is in uids1 and which is in uids2.</returns>
             <remarks>The first array specifies one half of each pair, the second array the other half; therefore, they must be of equal size.</remarks>
        </member>
        <member name="M:Facebook.Rest.Friends.AreFriendsAsync(System.Int64,System.Int64,Facebook.Rest.Friends.AreFriendsCallback,System.Object)">
             <summary>
             Returns whether or not each pair of specified users is friends with each other.
             </summary>
             <example>
             <code>
             private static void RunDemoAsync()
             {
                 FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
                 api.Friends.AreFriendsAsync(Constants.Friend_UserId1, Constants.Friend_UserId2, AsyncDemoCompleted, null);
             }
            
             private static void AsyncDemoCompleted(IList&lt;friend_info&gt; result, Object state, FacebookException e)
             {
                 var actual = result;
             }
             </code>
             </example>
             <param name="uid1">A user id to match against uid2.</param>
             <param name="uid2">A user id to match against uid1.</param>
             <param name="callback">The AsyncCallback delegate</param>
             <param name="state">An object containing state information for this asynchronous request</param>        
             <returns>Returns a list of friend_info elements corresponding to the lists passed. The are_friends subelement of each friend_info element is 0 or false if the users are not friends, and 1 or true if they are friends. Note that, for each pair, this function is symmetric. That is, it does not matter which user is in uids1 and which is in uids2.</returns>
             <remarks>The first array specifies one half of each pair, the second array the other half; therefore, they must be of equal size.</remarks>
        </member>
        <member name="M:Facebook.Rest.Friends.AreFriendsAsync(System.Collections.Generic.List{System.Int64},System.Collections.Generic.List{System.Int64},Facebook.Rest.Friends.AreFriendsCallback,System.Object)">
             <summary>
             Returns whether or not each pair of specified users is friends with each other.
             </summary>
             <example>
             <code>
             private static void RunDemoAsync()
             {
                 FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
                 List&lt;long&gt; u1 = new List&lt;long&gt; { Constants.Friend_UserId1 };
                 List&lt;long&gt; u2 = new List&lt;long&gt; { Constants.Friend_UserId2 };
                 api.Friends.AreFriendsAsync(u1, u2, AsyncDemoCompleted, null);
             }
            
             private static void AsyncDemoCompleted(IList&lt;friend_info&gt; result, Object state, FacebookException e)
             {
                 var actual = result;
             }
             </code>
             </example>
             <param name="uids1">A list of user ids matched with uids2.</param>
             <param name="uids2">A list of user ids matched with uids1.</param>
             <param name="callback">The AsyncCallback delegate</param>
             <param name="state">An object containing state information for this asynchronous request</param>        
             <returns>Returns a list of friend_info elements corresponding to the lists passed. The are_friends subelement of each friend_info element is 0 or false if the users are not friends, and 1 or true if they are friends. Note that, for each pair, this function is symmetric. That is, it does not matter which user is in uids1 and which is in uids2.</returns>
             <remarks>The first array specifies one half of each pair, the second array the other half; therefore, they must be of equal size.</remarks>
        </member>
        <member name="M:Facebook.Rest.Friends.GetAsync(Facebook.Rest.Friends.GetFriendsCallback,System.Object)">
             <summary>
             Returns the identifiers for the current user's Facebook friends.
             </summary>
             <example>
             <code>
             private static void RunDemoAsync()
             {
                 FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
                 api.Friends.GetAsync(AsyncDemoCompleted, null);
             }
            
             private static void AsyncDemoCompleted(IList&lt;long&gt; result, Object state, FacebookException e)
             {
                 var actual = result;
             }
             </code>
             </example>
             <param name="callback">The AsyncCallback delegate</param>
             <param name="state">An object containing state information for this asynchronous request</param>        
             <returns>The List of friend IDs returned are the friends that are visible to the Facebook Platform. If no friends are found, the method returns an empty friends_get_response element.</returns>
             <remarks>The first array specifies one half of each pair, the second array the other half; therefore, they must be of equal size.</remarks>
        </member>
        <member name="M:Facebook.Rest.Friends.GetAsync(System.Int64,Facebook.Rest.Friends.GetFriendsCallback,System.Object)">
             <summary>
             Returns the identifiers for the current user's Facebook friends.
             </summary>
             <example>
             <code>
             private static void RunDemoAsync()
             {
                 FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
                 api.Friends.GetAsync(Constants.UserId, AsyncDemoCompleted, null);
             }
            
             private static void AsyncDemoCompleted(IList&lt;long&gt; result, Object state, FacebookException e)
             {
                 var actual = result;
             }
             </code>
             </example>
             <param name="uid">The user ID for the user whose friends you want to return.</param>
             <param name="callback">The AsyncCallback delegate</param>
             <param name="state">An object containing state information for this asynchronous request</param>        
             <returns>The List of friend IDs returned are the friends that are visible to the Facebook Platform. If no friends are found, the method returns an empty friends_get_response element.</returns>
             <remarks>The first array specifies one half of each pair, the second array the other half; therefore, they must be of equal size.</remarks>
        </member>
        <member name="M:Facebook.Rest.Friends.GetAsync(System.Int64,System.Int64,Facebook.Rest.Friends.GetFriendsCallback,System.Object)">
             <summary>
             Returns the identifiers for the current user's Facebook friends.
             </summary>
             <example>
             <code>
             private static void RunDemoAsync()
             {
                 FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
                 api.Friends.GetAsync(Constants.UserId, Constants.FriendListId, AsyncDemoCompleted, null);
             }
            
             private static void AsyncDemoCompleted(IList&lt;long&gt; result, Object state, FacebookException e)
             {
                 var actual = result;
             }
             </code>
             </example>
             <param name="uid">The user ID for the user whose friends you want to return.</param>
             <param name="flid">Returns the friends in a friend list.</param>
             <param name="callback">The AsyncCallback delegate</param>
             <param name="state">An object containing state information for this asynchronous request</param>        
             <returns>The List of friend IDs returned are the friends that are visible to the Facebook Platform. If no friends are found, the method returns an empty friends_get_response element.</returns>
             <remarks>The first array specifies one half of each pair, the second array the other half; therefore, they must be of equal size.</remarks>
        </member>
        <member name="M:Facebook.Rest.Friends.GetAppUsersAsync(Facebook.Rest.Friends.GetAppUsersCallback,System.Object)">
             <summary>
             Returns the identifiers for the current user's Facebook friends who have authorized the specific calling application.
             </summary>
             <example>
             <code>
             private static void RunDemoAsync()
             {
                 FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
                 api.Friends.GetAppUsersAsync(AsyncDemoCompleted, null);
             }
            
             private static void AsyncDemoCompleted(IList&lt;long&gt; result, Object state, FacebookException e)
             {
                 var actual = result;
             }
             </code>
             </example>
             <param name="callback">The AsyncCallback delegate</param>
             <param name="state">An object containing state information for this asynchronous request</param>        
             <returns>The friend IDs returned are those friends who have authorized the calling application, which is a subset of the friends returned from the friends.get method. If no friends are found, the method returns an empty friends_getAppUsers_response element.</returns>
             <remarks>The first array specifies one half of each pair, the second array the other half; therefore, they must be of equal size.</remarks>
        </member>
        <member name="M:Facebook.Rest.Friends.GetAppUsersObjectsAsync(Facebook.Rest.Users.GetInfoCallback,System.Object)">
             <summary>
             Returns the user objects for the current user's Facebook friends who have authorized the specific calling application.
             </summary>
             <example>
             <code>
             private static void RunDemoAsync()
             {
                 FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
                 api.Friends.GetAppUsersObjectsAsync(AsyncDemoCompleted, null);
             }
            
             private static void AsyncDemoCompleted(IList&lt;user&gt; result, Object state, FacebookException e)
             {
                 var actual = result;
             }
             </code>
             </example>
             <param name="callback">The AsyncCallback delegate</param>
             <param name="state">An object containing state information for this asynchronous request</param>        
             <returns>The friend user objects returned are those friends who have authorized the calling application, which is a subset of the friends returned from the friends.get method.</returns>
             <remarks>The first array specifies one half of each pair, the second array the other half; therefore, they must be of equal size.</remarks>
        </member>
        <member name="M:Facebook.Rest.Friends.GetUserObjectsAsync(Facebook.Rest.Users.GetInfoCallback,System.Object)">
             <summary>
             Returns the user objects for the current user's Facebook friends.
             </summary>
             <example>
             <code>
             private static void RunDemoAsync()
             {
                 FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
                 api.Friends.GetUserObjectsAsync(AsyncDemoCompleted, null);
             }
            
             private static void AsyncDemoCompleted(IList&lt;user&gt; result, Object state, FacebookException e)
             {
                var actual = result;
             }
             </code>
             </example>
             <param name="callback">The AsyncCallback delegate</param>
             <param name="state">An object containing state information for this asynchronous request</param>        
             <returns>This method returns the user objects for the current user's friends.</returns>
             <remarks>The first array specifies one half of each pair, the second array the other half; therefore, they must be of equal size.</remarks>
        </member>
        <member name="M:Facebook.Rest.Friends.GetUserObjectsAsync(System.Int64,Facebook.Rest.Users.GetInfoCallback,System.Object)">
             <summary>
             Returns the user objects for the specified user's Facebook friends.
             </summary>
             <example>
             <code>
             private static void RunDemoAsync()
             {
                 FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
                 api.Friends.GetUserObjectsAsync(Constants.UserId, AsyncDemoCompleted, null);
             }
            
             private static void AsyncDemoCompleted(IList&lt;user&gt; result, Object state, FacebookException e)
             {
                var actual = result;
             }
             </code>
             </example>
             <param name="uid">The user ID for the user whose friends you want to return.</param>
             <param name="callback">The AsyncCallback delegate</param>
             <param name="state">An object containing state information for this asynchronous request</param>        
             <returns>This method returns the user objects for the specified user's friends.</returns>
             <remarks>The first array specifies one half of each pair, the second array the other half; therefore, they must be of equal size.</remarks>
        </member>
        <member name="M:Facebook.Rest.Friends.GetUserObjectsAsync(System.Int64,System.Int64,Facebook.Rest.Users.GetInfoCallback,System.Object)">
             <summary>
             Returns the user objects for the specified user's Facebook friends.
             </summary>
             <example>
             <code>
             private static void RunDemoAsync()
             {
                 FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
                 api.Friends.GetUserObjectsAsync(Constants.UserId, Constants.FriendListId, AsyncDemoCompleted, null);
             }
            
             private static void AsyncDemoCompleted(IList&lt;user&gt; result, Object state, FacebookException e)
             {
                var actual = result;
             }
             </code>
             </example>
             <param name="uid">The user ID for the user whose friends you want to return.</param>
             <param name="flid">Returns the friends in a friend list.</param>
             <param name="callback">The AsyncCallback delegate</param>
             <param name="state">An object containing state information for this asynchronous request</param>        
             <returns>This method returns the user objects for the specified user's friends.</returns>
             <remarks>The first array specifies one half of each pair, the second array the other half; therefore, they must be of equal size.</remarks>
        </member>
        <member name="M:Facebook.Rest.Friends.GetListsAsync(Facebook.Rest.Friends.GetListsCallback,System.Object)">
             <summary>
             Returns the identifiers for the current user's Facebook friend lists.
             </summary>
             <example>
             <code>
             private static void RunDemoAsync()
             {
                 FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
                 api.Friends.GetListsAsync(AsyncDemoCompleted, null);
             }
            
             private static void AsyncDemoCompleted(IList&lt;friendlist&gt; result, Object state, FacebookException e)
             {
                 var actual = result;
             }
             </code>
             </example>
             <param name="callback">The AsyncCallback delegate</param>
             <param name="state">An object containing state information for this asynchronous request</param>        
             <returns>The friend list IDs returned are the lists associated with the subject user.</returns>
             <remarks>The first array specifies one half of each pair, the second array the other half; therefore, they must be of equal size.</remarks>
        </member>
        <member name="M:Facebook.Rest.Friends.GetMutualFriendsAsync(System.Int64,Facebook.Rest.Friends.GetMutualFriendsCallback,System.Object)">
             <summary>
             Returns the identifiers for the requested users' Mutual Facebook friends.
             </summary>
             <example>
             <code>
             private static void RunDemoAsync()
             {
                 FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
                 api.Friends.GetMutualFriendsAsync(Constants.UserId, AsyncDemoCompleted, null);
             }
            
             private static void AsyncDemoCompleted(IList&lt;long&gt; result, Object state, FacebookException e)
             {
                 var actual = result;
             }
             </code>
             </example>
             <param name="target_uid">The user ID of one of the target user whose mutual friends you want to retrieve.</param>
             <param name="callback">The AsyncCallback delegate</param>
             <param name="state">An object containing state information for this asynchronous request</param>        
             <returns>This method returns an List of user IDs of the mutual friends, or an error code.</returns>
             <remarks>The first array specifies one half of each pair, the second array the other half; therefore, they must be of equal size.</remarks>
        </member>
        <member name="M:Facebook.Rest.Friends.GetMutualFriendsAsync(System.Int64,System.Nullable{System.Int64},Facebook.Rest.Friends.GetMutualFriendsCallback,System.Object)">
             <summary>
             Returns the identifiers for the requested users' Mutual Facebook friends.
             </summary>
             <example>
             <code>
             private static void RunDemoAsync()
             {
                 FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
                 api.Friends.GetMutualFriendsAsync(Constants.Friend_UserId1, Constants.UserId, AsyncDemoCompleted, null);
             }
            
             private static void AsyncDemoCompleted(IList&lt;long&gt; result, Object state, FacebookException e)
             {
                 var actual = result;
             }
             </code>
             </example>
             <param name="target_uid">The user ID of one of the target user whose mutual friends you want to retrieve.</param>
             <param name="source_uid">The user ID of the other user for which you are getting mutual friends of. Defaults to the current session user.</param>
             <param name="callback">The AsyncCallback delegate</param>
             <param name="state">An object containing state information for this asynchronous request</param>        
             <returns>This method returns an List of user IDs of the mutual friends, or an error code.</returns>
             <remarks>The first array specifies one half of each pair, the second array the other half; therefore, they must be of equal size.</remarks>
        </member>
        <member name="T:Facebook.Rest.Friends.AreFriendsCallback">
            <summary>
            Delegate called when AreFriends call completed
            </summary>
            <param name="friendInfo">List of friend_info objects</param>
            <param name="state">An object containing state information for this asynchronous request</param>
            <param name="e">Exception object, if the call resulted in exception.</param>
        </member>
        <member name="T:Facebook.Rest.Friends.GetFriendsCallback">
            <summary>
            Delegate called when GetFriends call completed
            </summary>
            <param name="friends">List of friends</param>
            <param name="state">An object containing state information for this asynchronous request</param>
            <param name="e">Exception object, if the call resulted in exception.</param>
        </member>
        <member name="T:Facebook.Rest.Friends.GetAppUsersCallback">
            <summary>
            Delegate called when GetAppUsers call completed
            </summary>
            <param name="users">List of users</param>
            <param name="state">An object containing state information for this asynchronous request</param>
            <param name="e">Exception object, if the call resulted in exception.</param>
        </member>
        <member name="T:Facebook.Rest.Friends.GetListsCallback">
            <summary>
            Delegate called when GetFriendLists call completed
            </summary>
            <param name="list">List of friends lists</param>
            <param name="state">An object containing state information for this asynchronous request</param>
            <param name="e">Exception object, if the call resulted in exception.</param>
        </member>
        <member name="T:Facebook.Rest.Friends.GetMutualFriendsCallback">
            <summary>
            Delegate called when GetMutualFriends call completed
            </summary>
            <param name="friends">List of friends</param>
            <param name="state">An object containing state information for this asynchronous request</param>
            <param name="e">Exception object, if the call resulted in exception.</param>
        </member>
        <member name="T:Facebook.Rest.Friends.GetUserObjectsCallback">
            <summary>
            Delegate called when GetUserObjects call completed
            </summary>
            <param name="users">List of user objects</param>
            <param name="state">An object containing state information for this asynchronous request</param>
            <param name="e">Exception object, if the call resulted in exception.</param>
        </member>
        <member name="T:Facebook.Rest.Intl">
            <summary>
            Facebook Application API methods.
            </summary>
        </member>
        <member name="M:Facebook.Rest.Intl.#ctor(Facebook.Session.IFacebookSession)">
            <summary>
            Public constructor for facebook.Application
            </summary>
            <param name="session">Needs a connected Facebook Session object for making requests</param>
        </member>
        <member name="M:Facebook.Rest.Intl.GetTranslations(System.String,System.Boolean)">
            <summary>
            Returns an array of strings from your application that you submitted for translation. This call returns the original native strings, the best (or all) translations of native strings into a given locale, whether the string has been approved, and by whom. 
            By default, the translation for a given string that gets returned is the current best translation, as it appears in the Facebook Translations application database. The translation was approved either automatically by the Translations application or was manually approved by you, another developer of your application, or a translator with whom you have a contract. 
            If there is no such translation, then the native string doesn't get returned. 
            You do not have to pass a session key with this method. However, you must include your application secret. 
            </summary>
            <param name="locale">The locale from where you are retrieving the translated strings. To return translated strings from every locale where someone has translated your application, specify all for locale (however, this is not recommended for performance reasons). Locales are of the format ll_CC, where ll is a two-letter language code (in lowercase), and CC is a two-letter country code (in uppercase). For a list of locales Facebook supports, see Facebook Locales. If the default is used, then only the native strings get returned. (Default value is en_US.) </param>
            <param name="all">When true, this call returns every translation for every native string. When false, this call returns the best translation for every native string. (Default value is false.) </param>
        </member>
        <member name="M:Facebook.Rest.Intl.UploadNativeStrings(System.Collections.Generic.List{Facebook.Rest.native_string})">
            <summary>
            Lets you insert text strings in their native language into the Facebook Translations database so they can be translated. See Translating Platform Applications for more information about translating your applications. 
            </summary>
            <param name="native_strings">A JSON-encoded array of strings to translate. Each element of the string array is an object, with text storing the actual string, description storing the description of the text.</param>
            <returns>If successful, this method returns the number of strings uploaded. </returns>
        </member>
        <member name="M:Facebook.Rest.Intl.GetTranslationsAsync(System.String,System.Boolean,Facebook.Rest.Intl.GetTranslationsCallback,System.Object)">
            <summary>
            Returns an array of strings from your application that you submitted for translation. This call returns the original native strings, the best (or all) translations of native strings into a given locale, whether the string has been approved, and by whom. 
            By default, the translation for a given string that gets returned is the current best translation, as it appears in the Facebook Translations application database. The translation was approved either automatically by the Translations application or was manually approved by you, another developer of your application, or a translator with whom you have a contract. 
            If there is no such translation, then the native string doesn't get returned. 
            You do not have to pass a session key with this method. However, you must include your application secret. 
            </summary>
            <param name="locale">The locale from where you are retrieving the translated strings. To return translated strings from every locale where someone has translated your application, specify all for locale (however, this is not recommended for performance reasons). Locales are of the format ll_CC, where ll is a two-letter language code (in lowercase), and CC is a two-letter country code (in uppercase). For a list of locales Facebook supports, see Facebook Locales. If the default is used, then only the native strings get returned. (Default value is en_US.) </param>
            <param name="all">When true, this call returns every translation for every native string. When false, this call returns the best translation for every native string. (Default value is false.) </param>
            <param name="callback">The AsyncCallback delegate</param>
            <param name="state">An object containing state information for this asynchronous request</param>        
        </member>
        <member name="M:Facebook.Rest.Intl.UploadNativeStringsAsync(System.Collections.Generic.List{Facebook.Rest.native_string},Facebook.Rest.Intl.UploadNativeStringsCallback,System.Object)">
            <summary>
            Lets you insert text strings in their native language into the Facebook Translations database so they can be translated. See Translating Platform Applications for more information about translating your applications. 
            </summary>
            <param name="native_strings">A JSON-encoded array of strings to translate. Each element of the string array is an object, with text storing the actual string, description storing the description of the text.</param>
            <param name="callback">The AsyncCallback delegate</param>
            <param name="state">An object containing state information for this asynchronous request</param>        
            <returns>If successful, this method returns the number of strings uploaded. </returns>
        </member>
        <member name="T:Facebook.Rest.Intl.GetTranslationsCallback">
            <summary>
            Call back used with Async call to GetTranslations completes
            </summary>
        </member>
        <member name="T:Facebook.Rest.Intl.UploadNativeStringsCallback">
            <summary>
            Call back used with Async call to UploadNativeStrings completes
            </summary>
        </member>
        <member name="T:Facebook.Rest.native_string">
            <summary>
            Item for native_strings collection
            </summary>
        </member>
        <member name="F:Facebook.Rest.native_string.text">
            <summary>
            the actual string
            </summary>
        </member>
        <member name="F:Facebook.Rest.native_string.description">
            <summary>
            the description of the text
            </summary>
        </member>
        <member name="T:Facebook.BindingHelper.FacebookProfileCollection">
            <summary>
            Represents collection of profile object
            </summary>
        </member>
        <member name="M:Facebook.BindingHelper.FacebookProfileCollection.#ctor">
            <summary>
            Initializes FacebookContactCollection object
            </summary>
        </member>
        <member name="M:Facebook.BindingHelper.FacebookProfileCollection.#ctor(System.Collections.Generic.IEnumerable{Facebook.BindingHelper.FacebookProfile})">
            <summary>
            Initializes FacebookContactCollection from contacts list
            </summary>
            <param name="profiles">list of profiles</param>
        </member>
        <member name="T:Facebook.Utility.Utilities">
            <summary>
            </summary>
        </member>
        <member name="F:Facebook.Utility.Utilities.SessionNotAvailableError">
            <summary>
            </summary>
        </member>
        <member name="M:Facebook.Utility.Utilities.AddRequiredParameter(System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String)">
            <summary>
            </summary>
            <param name="dict"></param>
            <param name="key"></param>
            <param name="value"></param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Facebook.Utility.Utilities.AddRequiredParameter(System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.Int64)">
            <summary>
            </summary>
            <param name="dict"></param>
            <param name="key"></param>
            <param name="value"></param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Facebook.Utility.Utilities.AddRequiredParameter(System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.Double)">
            <summary>
            </summary>
            <param name="dict"></param>
            <param name="key"></param>
            <param name="value"></param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Facebook.Utility.Utilities.AddRequiredParameter(System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.Int32)">
            <summary>
            </summary>
            <param name="dict"></param>
            <param name="key"></param>
            <param name="value"></param>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Facebook.Utility.Utilities.AddRequiredParameter(System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.Single)">
            <summary>
            </summary>
            <param name="dict"></param>
            <param name="key"></param>
            <param name="value"></param>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Facebook.Utility.Utilities.AddRequiredParameter(System.Collections.Generic.IDictionary{System.String,System.String},System.String,Facebook.Schema.assoc_object_type)">
            <summary>
            </summary>
            <param name="dict"></param>
            <param name="key"></param>
            <param name="assoc_info"></param>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Facebook.Utility.Utilities.AddRequiredParameter(System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.Collections.Generic.IList{Facebook.Rest.DataAssociation})">
            <summary>
            </summary>
            <param name="dict"></param>
            <param name="key"></param>
            <param name="assocs"></param>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Facebook.Utility.Utilities.AddOptionalParameter(System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String)">
            <summary>
            </summary>
            <param name="dict"></param>
            <param name="key"></param>
            <param name="data"></param>
        </member>
        <member name="M:Facebook.Utility.Utilities.AddOptionalParameter(System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.Nullable{System.Double})">
            <summary>
            </summary>
            <param name="dict"></param>
            <param name="key"></param>
            <param name="data"></param>
        </member>
        <member name="M:Facebook.Utility.Utilities.AddOptionalParameter(System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.Int64)">
            <summary>
            </summary>
            <param name="dict"></param>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Facebook.Utility.Utilities.AddOptionalParameter(System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.Nullable{System.Int64})">
            <summary>
            </summary>
            <param name="dict"></param>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Facebook.Utility.Utilities.AddOptionalParameter(System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.Int32)">
            <summary>
            </summary>
            <param name="dict"></param>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Facebook.Utility.Utilities.AddOptionalParameter(System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.Nullable{System.Int32})">
            <summary>
            </summary>
            <param name="dict"></param>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Facebook.Utility.Utilities.AddOptionalParameter(System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.Double)">
            <summary>
            </summary>
            <param name="dict"></param>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Facebook.Utility.Utilities.AddFBMLParameter(System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String)">
            <summary>
            </summary>
            <param name="dict"></param>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Facebook.Utility.Utilities.AddCultureParameter(System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String)">
            <summary>
            </summary>
            <param name="dict"></param>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Facebook.Utility.Utilities.AddParameter(System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.Boolean)">
            <summary>
            </summary>
            <param name="dict"></param>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Facebook.Utility.Utilities.AddJSONAssociativeArray(System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            </summary>
            <param name="dict"></param>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Facebook.Utility.Utilities.AddJSONArray(System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.Collections.Generic.List{System.String})">
            <summary>
            </summary>
            <param name="dict"></param>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Facebook.Utility.Utilities.AddJSONArray(System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.Collections.Generic.List{System.Int64})">
            <summary>
            </summary>
            <param name="dict"></param>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Facebook.Utility.Utilities.AddCollection(System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.Collections.ObjectModel.Collection{System.String})">
            <summary>
            </summary>
            <param name="dict"></param>
            <param name="key"></param>
            <param name="values"></param>
        </member>
        <member name="M:Facebook.Utility.Utilities.AddList(System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.Collections.Generic.List{System.String})">
            <summary>
            </summary>
            <param name="dict"></param>
            <param name="key"></param>
            <param name="values"></param>
        </member>
        <member name="M:Facebook.Utility.Utilities.AddList(System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.Collections.Generic.List{System.Int64})">
            <summary>
            </summary>
            <param name="dict"></param>
            <param name="key"></param>
            <param name="values"></param>
        </member>
        <member name="M:Facebook.Utility.Utilities.AddList(System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.Collections.Generic.List{System.Int32})">
            <summary>
            </summary>
            <param name="dict"></param>
            <param name="key"></param>
            <param name="values"></param>
        </member>
        <member name="M:Facebook.Utility.Utilities.SerializeToJSONObject``1(``0)">
            <summary>
            </summary>
            <param name="obj"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Facebook.Utility.Utilities.SerializeToXml``1(``0)">
            <summary>
            </summary>
            <param name="obj"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Facebook.Utility.Utilities.DeserializeJSONObject``1(System.String)">
            <summary>
            </summary>
            <param name="response"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
            <exception cref="T:Facebook.Utility.FacebookException"></exception>
        </member>
        <member name="M:Facebook.Utility.Utilities.DeserializeXML``1(System.String)">
            <summary>
            </summary>
            <param name="xmlInput"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
            <exception cref="T:Facebook.Utility.FacebookException"></exception>
        </member>
        <member name="M:Facebook.Utility.Utilities.DeserializeXML(System.String,System.Type)">
            <summary>
             Used to deserialize xml to a dynamic type.  Similar to generic version but this is used when type is only known at run type (for fql queries)
            </summary>
            <param name="xmlInput">xml string to deserialize</param>
            <param name="t">the type to deserialize into</param>
        </member>
        <member name="M:Facebook.Utility.Utilities.UTF8ByteArrayToString(System.Byte[])">
            <summary>
            </summary>
            <param name="characters"></param>
            <returns></returns>
        </member>
        <member name="M:Facebook.Utility.Utilities.StringToUTF8ByteArray(System.String)">
            <summary>
            </summary>
            <param name="pXmlString"></param>
            <returns></returns>
        </member>
        <member name="M:Facebook.Utility.Utilities.ParseException(System.String,System.Boolean)">
            <summary>
            Checks if response has any error and throws an exception if it does
            </summary>
            <param name="response">xml data to parse</param>
            <param name="JSONFormat"></param>
        </member>
        <member name="M:Facebook.Utility.Utilities.GenerateEmailHash(System.String)">
            <summary>
            Converts email address to Facebook Connect-formatted email hash using Facebook-specified hashing rules.
            </summary>
            <param name="email">The email address to apply hash.</param>
            <returns>A Facebook email hash.</returns>
            <remarks>
            Compute the email_hash property as follows:
            Normalize the email address. Trim leading and trailing whitespace, and convert all characters to lowercase.
            Compute the CRC32 value for the normalized email address and use the unsigned integer representation of this value. (Note that some implementations return signed integers, in which case you will need to convert that result to an unsigned integer.)
            Compute the MD5 value for the normalized email address and use the hex representation of this value (using lowercase for A through F).
            Combine these two value with an underscore.
            For example, the address mary@example.com converts to 4228600737_c96da02bba97aedfd26136e980ae3761.
            </remarks>
        </member>
        <member name="M:Facebook.Utility.Utilities.NotifyPropertyChanged``2(``0,System.ComponentModel.PropertyChangedEventHandler,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Used to generically support property changed notification by BindingHelper classes
            </summary>
        </member>
        <member name="M:Facebook.Utility.Utilities.GetPropertySymbol``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
             Gets the property name of a property
            </summary>
        </member>
        <member name="M:Facebook.Utility.Utilities.NotifyPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventHandler,System.String)">
            <summary>
            </summary>
            <param name="sender"></param>
            <param name="handler"></param>
            <param name="propertyName"></param>
        </member>
        <member name="T:Facebook.Utility.TypeHelper">
            <summary>
            </summary>
        </member>
        <member name="M:Facebook.Utility.TypeHelper.getResponseObjectType(System.String)">
            <summary>
            </summary>
            <param name="response"></param>
            <returns></returns>
        </member>
        <member name="T:Facebook.Rest.Marketplace">
            <summary>
            Facebook Marketplace API methods.
            </summary>
        </member>
        <member name="M:Facebook.Rest.Marketplace.#ctor(Facebook.Session.IFacebookSession)">
            <summary>
            Public constructor for facebook.Marketplace
            </summary>
            <param name="session">Needs a connected Facebook Session object for making requests</param>
        </member>
        <member name="M:Facebook.Rest.Marketplace.GetCategories">
            <summary>
            This method is deprecated. Returns all the Marketplace categories.
            </summary>
            <returns>This method returns a list of categories for use in Marketplace.</returns>
        </member>
        <member name="M:Facebook.Rest.Marketplace.GetSubCategories(System.String)">
            <summary>
            This method is deprecated. Returns the Marketplace subcategories for a particular category.
            </summary>
            <param name="category">Filter by category. If this is not a valid category, no subcategories get returned.</param>
            <returns>A list of subcategories for use in Marketplace. </returns>
        </member>
        <member name="M:Facebook.Rest.Marketplace.GetListings(System.Collections.Generic.List{System.Int64},System.Collections.ObjectModel.Collection{System.String})">
            <summary>
            This method is deprecated. Return all Marketplace listings either by listing ID or by user.
            </summary>
            /// <param name="uids">Filter by a list of users. If you leave this blank, then the list is filtered only for listing IDs.</param>
            <param name="listing_ids">Filter by listing IDs. If you leave this blank, then the list is filtered only for user IDs.</param>
            <returns>This method returns all visible listings matching the criteria given. If no matching listings are found, the method returns an empty element.</returns>
        </member>
        <member name="M:Facebook.Rest.Marketplace.Search(System.String,System.String,System.String)">
            <summary>
            This method is deprecated. Search Marketplace for listings filtering by category, subcategory and a query string.
            </summary>
            <param name="category">Optional - the category to restirct search to, as returned by getCategories.</param>
            <param name="subcategory">Optional - the subcategory to restrict search to, as returned by getSubcategories. If a subcategory is provided, a category is also necessary.</param>
            <param name="query">Optional - the textual query to search the listings data.</param>
            <returns>Marketplace listings.</returns>
        </member>
        <member name="M:Facebook.Rest.Marketplace.CreateListing(System.Int64,System.Boolean,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            This method is deprecated. Create or modify a listing in Marketplace.
            </summary>
            <param name="listing_id">The listing ID to modify, or 0 if the user is creating a new listing.</param>
            <param name="show_on_profile">A privacy control indicating whether to display the listing on the poster's profile.</param>
            <param name="listing_attrs">Collection of Marketplace Listing Attributes.</param>
            <returns>This method returns the listing ID of the modified/created listing. If you are modifying a listing, it is the same as the listing ID provided to the method.</returns>
        </member>
        <member name="M:Facebook.Rest.Marketplace.RemoveListing(System.Int64,System.String)">
            <summary>
            This method is deprecated. Remove a listing from Marketplace.
            </summary>
            <param name="listing_id">The listing ID to remove.</param>
            <param name="status">Removal status for tracking whether a Marketplace listing resulted in a successful transaction: "SUCCESS", "NOT_SUCCESS", or "DEFAULT".</param>
            <returns>True on success, error on failure. </returns>
            <remarks>The listing must be owned by loggedinuser.</remarks>
        </member>
        <member name="T:Facebook.Constants">
            <summary>
            </summary>
        </member>
        <member name="F:Facebook.Constants.VERSION">
            <summary>
            </summary>
        </member>
        <member name="T:Facebook.BindingHelper.UpdatableCollection`1">
            <summary>
            Provides the base class for a generic read-only data object collection.
            </summary>
            <typeparam name="T">Base item type for this collection.</typeparam>
        </member>
        <member name="F:Facebook.BindingHelper.UpdatableCollection`1._collectionLock">
            <summary>
            object used to handle concurrent access to the list
            </summary>
        </member>
        <member name="M:Facebook.BindingHelper.UpdatableCollection`1.#ctor">
            <summary>
            Initializes a new instance of the DataObjectCollection class.
            </summary>
        </member>
        <member name="M:Facebook.BindingHelper.UpdatableCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the DataObjectCollection class.
            </summary>
            <param name="dataObjects">Collection of data objects used to initialize this collection.</param>
        </member>
        <member name="M:Facebook.BindingHelper.UpdatableCollection`1.Merge(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Merges data from another collection.
            </summary>
            <param name="newCollection">The data object collection that contains new data.</param>
        </member>
        <member name="M:Facebook.BindingHelper.UpdatableCollection`1.OnCollectionChangedWorker(System.Object)">
            <summary>
            CollectionChanged needs to be raised on the dispatcher thread.
            </summary>
        </member>
        <member name="M:Facebook.BindingHelper.UpdatableCollection`1.OnCollectionChanged">
            <summary>
            Raises CollectionChanged event.
            </summary>
        </member>
        <member name="M:Facebook.BindingHelper.UpdatableCollection`1.OnPropertyChanged(System.String)">
            <summary>
            Raises the PropertyChanged event.
            </summary>
            <param name="propertyName">The name of the property that changed.</param>
        </member>
        <member name="M:Facebook.BindingHelper.UpdatableCollection`1.AddCore(`0)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Facebook.BindingHelper.UpdatableCollection`1.IndexOf(`0)">
            <summary>
            Overridden operator to return the position of a specific object
            </summary>
        </member>
        <member name="M:Facebook.BindingHelper.UpdatableCollection`1.Insert(System.Int32,`0)">
            <summary>
            insert a new object at a specified position
            </summary>
        </member>
        <member name="M:Facebook.BindingHelper.UpdatableCollection`1.RemoveAt(System.Int32)">
            <summary>
            remove an exisiting object from the collection as the specified position.
            </summary>
        </member>
        <member name="M:Facebook.BindingHelper.UpdatableCollection`1.Contains(`0)">
            <summary>
            check if collection contains a specified object
            </summary>
        </member>
        <member name="M:Facebook.BindingHelper.UpdatableCollection`1.CopyTo(`0[],System.Int32)">
            <summary>
            copy an array into this collection from a specific starting point in the collection
            </summary>
        </member>
        <member name="M:Facebook.BindingHelper.UpdatableCollection`1.Add(`0)">
            <summary>
            not used public.  provided for Serialization scenarios
            </summary>
        </member>
        <member name="M:Facebook.BindingHelper.UpdatableCollection`1.Clear">
            <summary>
            Not Supported
            </summary>
        </member>
        <member name="M:Facebook.BindingHelper.UpdatableCollection`1.Remove(`0)">
            <summary>
            Not supported
            </summary>
        </member>
        <member name="M:Facebook.BindingHelper.UpdatableCollection`1.GetEnumerator">
            <summary>
            Accessor for the enumerator for this collection
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.UpdatableCollection`1.Items">
            <summary>
            The list of objects
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.UpdatableCollection`1.Item(System.Int32)">
            <summary>
            accessor to find an object based on its position
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.UpdatableCollection`1.Count">
            <summary>
            the number of items in the collection
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.UpdatableCollection`1.IsReadOnly">
            <summary>
            always true, since we don't allow adding or changing items
            </summary>
        </member>
        <member name="E:Facebook.BindingHelper.UpdatableCollection`1.CollectionChanged">
            <summary>
            Collection changed notifier
            </summary>
        </member>
        <member name="E:Facebook.BindingHelper.UpdatableCollection`1.PropertyChanged">
            <summary>
            Property changed notifier
            </summary>
        </member>
        <member name="T:Facebook.BindingHelper.ActivityPost">
            <summary>
            Defines a stream post object
            </summary>
        </member>
        <member name="M:Facebook.BindingHelper.ActivityPost.#ctor(Facebook.Utility.FacebookStreamPost)">
            <summary>
            Initializes a ActivityPost object
            </summary>
            <param name="post"></param>
        </member>
        <member name="M:Facebook.BindingHelper.ActivityPost.#ctor(Facebook.Schema.stream_post)">
            <summary>
            Initializes a ActivityPost object
            </summary>
            <param name="post"></param>
        </member>
        <member name="M:Facebook.BindingHelper.ActivityPost.GetComments(System.Int32)">
            <summary>
            Gets most recent comments for this post, in ascending order
            </summary>
            <param name="limit">maximum number of comments to retrieve</param>
        </member>
        <member name="M:Facebook.BindingHelper.ActivityPost.AddComment(System.String)">
            <summary>
            Adds a comment to steram post
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:Facebook.BindingHelper.ActivityPost.RemoveComment(Facebook.BindingHelper.ActivityComment)">
            <summary>
            Removes a comment from stream post
            </summary>
            <param name="comment"></param>
        </member>
        <member name="M:Facebook.BindingHelper.ActivityPost.AddLike">
            <summary>
            Adds like to this post
            </summary>
        </member>
        <member name="M:Facebook.BindingHelper.ActivityPost.RemoveLike">
            <summary>
            Removes a like 
            </summary>
        </member>
        <member name="M:Facebook.BindingHelper.ActivityPost.SyncWithPost(Facebook.BindingHelper.ActivityPost)">
            <summary>
            Syncs 2 post, raising property change event if necessary
            </summary>
            <param name="newPost"></param>
        </member>
        <member name="M:Facebook.BindingHelper.ActivityPost.Equals(Facebook.BindingHelper.ActivityPost)">
            <summary>
            Checks if 2 posts are same
            </summary>
            <param name="other">Post to compare with</param>
            <returns>true if the posts are same</returns>
        </member>
        <member name="P:Facebook.BindingHelper.ActivityPost.CreatedTime">
            <summary>
            Time this post was created
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.ActivityPost.UpdatedTime">
            <summary>
            Time post was last upated
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.ActivityPost.Message">
            <summary>
            Post message
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.ActivityPost.ActorUserId">
            <summary>
            Id of user who posted this message
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.ActivityPost.TargetUserId">
            <summary>
            Id of target user or page
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.ActivityPost.CanLike">
            <summary>
            Identifies if currently logged in user can like this post
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.ActivityPost.HasLiked">
            <summary>
            Identifies if currently logged in user has liked this post
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.ActivityPost.Likes">
            <summary>
            People who have liked this post
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.ActivityPost.LikedCount">
            <summary>
            Number of people who have liked this post
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.ActivityPost.CanComment">
            <summary>
            Identifies if currently logged in user can comment on this post
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.ActivityPost.CanRemoveComments">
            <summary>
            Identifies if currently logged in user can remove this post
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.ActivityPost.CommentCount">
            <summary>
            Number of comments for this post
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.ActivityPost.FilterKey">
            <summary>
            Filter key of this post
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.ActivityPost.PostId">
            <summary>
            Id of this post
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.ActivityPost.Type">
            <summary>
            Type of this post
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.ActivityPost.Attribution">
            <summary>
            Attribution of this post
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.ActivityPost.Permalink">
            <summary>
            Permalink for the post
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.ActivityPost.AppId">
            <summary>
            AppId of this post
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.ActivityPost.Attachment">
            <summary>
            Attachment information
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.ActivityPost.Actor">
            <summary>
            Profile object of user who posted this post
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.ActivityPost.Comments">
            <summary>
            List of comments for this post
            </summary>
        </member>
        <member name="E:Facebook.BindingHelper.ActivityPost.PropertyChanged">
            <summary>
            Property change event
            </summary>
        </member>
        <member name="T:Facebook.BindingHelper.ActivityPostLikes">
            <summary>
            Represent stream like object
            </summary>
        </member>
        <member name="M:Facebook.BindingHelper.ActivityPostLikes.#ctor(Facebook.Schema.stream_likes)">
            <summary>
            Initialized new ActivityPostLikes object
            </summary>
            <param name="like"></param>
        </member>
        <member name="M:Facebook.BindingHelper.ActivityPostLikes.Equals(Facebook.BindingHelper.ActivityPostLikes)">
            <summary>
            Operator overload to compare this against another instance
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.ActivityPostLikes.Href">
            <summary>
            Href of likes information
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.ActivityPostLikes.Count">
            <summary>
            Count of likes
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.ActivityPostLikes.Sample">
            <summary>
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.ActivityPostLikes.Friends">
            <summary>
            List of friends who liked the pst
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.ActivityPostLikes.UserLikes">
            <summary>
            User Likes
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.ActivityPostLikes.CanLikes">
            <summary>
            specified if user can like the comment
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.ActivityPostLikes.FriendsProfile">
            <summary>
            Collection of profile related to this Activity Post
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.ActivityPostLikes.SampleProfile">
            <summary>
            Collection of profile related to this Activity Post
            </summary>
        </member>
        <member name="T:Facebook.Rest.Users">
            <summary>
            Facebook Users API methods.
            </summary>
        </member>
        <member name="M:Facebook.Rest.Users.#ctor(Facebook.Session.IFacebookSession)">
            <summary>
            Public constructor for facebook.Users
            </summary>
            <param name="session">Needs a connected Facebook Session object for making requests</param>
        </member>
        <member name="M:Facebook.Rest.Users.GetInfo">
            <summary>
            Returns a wide array of user-specific information for each user identifier passed, limited by the view of the current user.
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
            api.Users.GetInfo();
            </code>
            </example>
            <returns>The user info elements returned are those friends visible to the Facebook Platform. If no visible users are found from the passed uids argument, the method will return an empty result element.</returns>
        </member>
        <member name="M:Facebook.Rest.Users.GetInfo(System.Int64)">
            <summary>
            Returns a wide array of user-specific information for each user identifier passed, limited by the view of the current user.
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
            var actual = api.Users.GetInfo(Constants.UserId);
            </code>
            </example>
            <param name="uid">A user ID.</param>
            <returns>The user info elements returned are those friends visible to the Facebook Platform. If no visible users are found from the passed uids argument, the method will return an empty result element.</returns>
        </member>
        <member name="M:Facebook.Rest.Users.GetInfo(System.Collections.Generic.List{System.Int64})">
            <summary>
            Returns a wide array of user-specific information for each user identifier passed, limited by the view of the current user.
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
            var uid = new List&lt;long&gt;() { 658517591, 824555570 };
            var actual = api.Users.GetInfo(uid);
            </code>
            </example>
            <param name="uids">This is a List of user IDs.</param>
            <returns>The user info elements returned are those friends visible to the Facebook Platform. If no visible users are found from the passed uids argument, the method will return an empty result element.</returns>
        </member>
        <member name="M:Facebook.Rest.Users.GetStandardInfo(System.String)">
            <summary>
            Returns an array of user-specific information for use by the application itself.
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new FBMLCanvasSession(Constants.WebApplicationKey, Constants.WebSecret));
            api.Session.UserId = Constants.UserId;
            string uids = Constants.UserId.ToString();
            var result = api.Users.GetStandardInfo(uids);
            </code>
            </example>
            <param name="uids">A comma-separated list of user IDs.</param>
            <returns>The user info elements returned are those friends visible to the Facebook Platform.</returns>
        </member>
        <member name="M:Facebook.Rest.Users.GetStandardInfo(System.Collections.Generic.List{System.Int64})">
            <summary>
            Returns an array of user-specific information for use by the application itself.
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new FBMLCanvasSession(Constants.WebApplicationKey, Constants.WebSecret));
            api.Session.UserId = Constants.UserId;
            List&lt;long&gt; uids = new List&lt;long&gt; { Constants.UserId };
            var result = api.Users.GetStandardInfo(uids);
            </code>
            </example>
            <param name="uids">A List of user IDs.</param>
            <returns>The user info elements returned are those friends visible to the Facebook Platform.</returns>
        </member>
        <member name="M:Facebook.Rest.Users.GetStandardInfo(System.Collections.Generic.List{System.Int64},System.Collections.Generic.IList{System.String})">
            <summary>
            Returns an array of user-specific information for use by the application itself.
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new FBMLCanvasSession(Constants.WebApplicationKey, Constants.WebSecret));
            api.Session.UserId = Constants.UserId;
            List&lt;long&gt; uids = new List&lt;long&gt; { Constants.UserId };
            List&lt;string&gt; fields = new List&lt;string&gt; { "uid", "first_name", "last_name", "name", "profile_url", "proxied_email" };
            var result = api.Users.GetStandardInfo(uids, fields);
            </code>
            </example>
            <param name="uids">A List of user IDs.</param>
            <param name="fields">List of desired fields in return. This is a List of field strings and is limited to these entries only: uid, first_name, last_name, name, timezone, birthday, sex, affiliations (regional type only), locale, profile_url, proxied_email.</param>
            <returns>The user info elements returned are those friends visible to the Facebook Platform.</returns>
        </member>
        <member name="M:Facebook.Rest.Users.GetStandardInfo(System.String,System.Collections.Generic.IList{System.String})">
            <summary>
            Returns an array of user-specific information for use by the application itself.
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new FBMLCanvasSession(Constants.WebApplicationKey, Constants.WebSecret));
            api.Session.UserId = Constants.UserId;
            string uids = Constants.UserId.ToString();
            List&lt;string&gt; fields = new List&lt;string&gt; { "uid", "first_name", "last_name", "name", "profile_url", "proxied_email" };
            var result = api.Users.GetStandardInfo(uids, fields);
            </code>
            </example>
            <param name="uids">A comma-separated list of user IDs.</param>
            <param name="fields">List of desired fields in return. This is a List of field strings and is limited to these entries only: uid, first_name, last_name, name, timezone, birthday, sex, affiliations (regional type only), locale, profile_url, proxied_email.</param>
            <returns>The user info elements returned are those friends visible to the Facebook Platform.</returns>
        </member>
        <member name="M:Facebook.Rest.Users.GetLoggedInUser">
            <summary>
            Gets the user ID (uid) associated with the current session.
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
            var result = api.Users.GetLoggedInUser();
            </code>
            </example>
            <returns>This method returns the user ID (uid) associated with the current session.</returns>
        </member>
        <member name="M:Facebook.Rest.Users.HasAppPermission(Facebook.Schema.Enums.ExtendedPermissions)">
            <summary>
            Checks whether the user has opted in to an extended application permission.
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
            var result = api.Users.HasAppPermission(Enums.ExtendedPermissions.email);
            </code>
            </example>
            <param name="ext_perm">String identifier for the extended permission that is being checked for. Must be one of email, read_stream, publish_stream, offline_access, status_update, photo_upload, {create_event, rsvp_event, sms, video_upload, create_note, share_item.</param>
            <returns>Returns true or false.</returns>
        </member>
        <member name="M:Facebook.Rest.Users.HasAppPermission(Facebook.Schema.Enums.ExtendedPermissions,System.Int64)">
            <summary>
            Checks whether the user has opted in to an extended application permission.
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
            var result = api.Users.HasAppPermission(Enums.ExtendedPermissions.email, Constants.UserId);
            </code>
            </example>
            <param name="ext_perm">String identifier for the extended permission that is being checked for. Must be one of email, read_stream, publish_stream, offline_access, status_update, photo_upload, {create_event, rsvp_event, sms, video_upload, create_note, share_item.</param>
            <param name="uid">The user ID of the user whose permissions you are checking. If this parameter is not specified, then it defaults to the session user.  Note: This parameter applies only to Web applications. Facebook ignores this parameter if it is passed by a desktop application.</param>
            <returns>Returns true or false.</returns>
        </member>
        <member name="M:Facebook.Rest.Users.IsAppUser(System.Int64)">
            <summary>
            Returns whether the user (either the session user or user specified by UID) has authorized the calling application.
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
            var result = api.Users.IsAppUser(Constants.UserId);
            </code>
            </example>
            <param name="uid">The user ID of the user who may have authorized the application. If this parameter is not specified, then it defaults to the session user.  Note: This parameter applies only to Web applications. Facebook ignores this parameter if it is passed by a desktop application.</param>
            <returns>Returns true or false.</returns>
        </member>
        <member name="M:Facebook.Rest.Users.IsVerified(System.Int64)">
            <summary>
            Returns whether the user is a verified Facebook user.
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
            var result = api.Users.IsVerified(Constants.UserId);
            </code>
            </example>
            <param name="uid">The user ID to verify.</param>
            <returns>This call returns true for a verified user; false for an non-verified user.</returns>
            <remarks>This method is currently broken on Facebook's side (it only returns an empty XML element). A bug report has been filed here: http://bugs.developers.facebook.com/show_bug.cgi?id=5129 .</remarks>
        </member>
        <member name="M:Facebook.Rest.Users.SetStatus(System.String)">
            <summary>
            Updates a user's Facebook status.
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
            var result = api.Users.SetStatus("I'm a code sample.");
            </code>
            </example>
            <param name="status">The status message to set.  Note: The maximum message length is 255 characters; messages longer than that limit will be truncated and appended with '...'.</param>
            <returns>This method returns true on success, false on failure, or an error code.</returns>
        </member>
        <member name="M:Facebook.Rest.Users.SetStatus(System.String,System.Int64)">
            <summary>
            Updates a user's Facebook status.
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
            var result = api.Users.SetStatus("I'm a code sample.", Constants.UserId);
            </code>
            </example>
            <param name="status">The status message to set.  Note: The maximum message length is 255 characters; messages longer than that limit will be truncated and appended with '...'.</param>
            <param name="uid">The user ID of the user whose status you are setting. If this parameter is not specified, then it defaults to the session user.  Note: This parameter applies only to Web applications.  Facebook ignores this parameter if it is passed by a desktop application.</param>
            <returns>This method returns true on success, false on failure, or an error code.</returns>
        </member>
        <member name="M:Facebook.Rest.Users.SetStatus(System.String,System.Boolean)">
            <summary>
            Updates a user's Facebook status.
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
            var result = api.Users.SetStatus("I'm a code sample.", true);
            </code>
            </example>
            <param name="status">The status message to set.  Note: The maximum message length is 255 characters; messages longer than that limit will be truncated and appended with '...'.</param>
            <param name="status_includes_verb">If set to true, the word "is" will not be prepended to the status message.</param>
            <returns>This method returns true on success, false on failure, or an error code.</returns>
        </member>
        <member name="M:Facebook.Rest.Users.SetStatus(System.String,System.Boolean,System.Int64)">
            <summary>
            Updates a user's Facebook status.
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
            var result = api.Users.SetStatus("I'm a code sample.", true, Constants.UserId);
            </code>
            </example>
            <param name="status">The status message to set.  Note: The maximum message length is 255 characters; messages longer than that limit will be truncated and appended with '...'.</param>
            <param name="status_includes_verb">If set to true, the word "is" will not be prepended to the status message.</param>
            <param name="uid">The user ID of the user whose status you are setting. If this parameter is not specified, then it defaults to the session user.  Note: This parameter applies only to Web applications.  Facebook ignores this parameter if it is passed by a desktop application.</param>
            <returns>This method returns true on success, false on failure, or an error code.</returns>
        </member>
        <member name="M:Facebook.Rest.Users.GetInfoAsync(Facebook.Rest.Users.GetInfoCallback,System.Object)">
             <summary>
             Returns a wide array of user-specific information for each user identifier passed, limited by the view of the current user.
             </summary>
             <example>
             <code>
             private static void RunDemoAsync()
             {
                 FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.ApplicationSecret, Constants.SessionKey));
                 api.Users.GetInfoAsync(AsyncDemoCompleted, null);
             }
            
             private static void AsyncDemoCompleted(IList&lt;user&gt; result, Object state, FacebookException e)
             {
                 var actual = result;
             }
             </code>
             </example>
             <param name="callback">The AsyncCallback delegate</param>
             <param name="state">An object containing state information for this asynchronous request</param>        
             <returns>The user info elements returned are those friends visible to the Facebook Platform. If no visible users are found from the passed uids argument, the method will return an empty result element.</returns>
        </member>
        <member name="M:Facebook.Rest.Users.GetInfoAsync(System.Int64,Facebook.Rest.Users.GetInfoCallback,System.Object)">
             <summary>
             Returns a wide array of user-specific information for each user identifier passed, limited by the view of the current user.
             </summary>
             <example>
             <code>
             private static void RunDemoAsync()
             {
                 FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.ApplicationSecret, Constants.SessionKey));
                 api.Users.GetInfoAsync(Constants.UserId, AsyncDemoCompleted, null);
             }
            
             private static void AsyncDemoCompleted(IList&lt;user&gt; result, Object state, FacebookException e)
             {
                 var actual = result;
             }
             </code>
             </example>
             <param name="uid">A user ID.</param>
             <param name="callback">The AsyncCallback delegate</param>
             <param name="state">An object containing state information for this asynchronous request</param>        
             <returns>The user info elements returned are those friends visible to the Facebook Platform. If no visible users are found from the passed uids argument, the method will return an empty result element.</returns>
        </member>
        <member name="M:Facebook.Rest.Users.GetInfoAsync(System.Collections.Generic.List{System.Int64},Facebook.Rest.Users.GetInfoCallback,System.Object)">
             <summary>
             Returns a wide array of user-specific information for each user identifier passed, limited by the view of the current user.
             </summary>
             <example>
             <code>
             private static void RunDemoAsync()
             {
                 FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.ApplicationSecret, Constants.SessionKey));
                 var uids = new List&lt;long&gt; { 658517591, 824555570 }; 
                 api.Users.GetInfoAsync(AsyncDemoCompleted, null);
             }
            
             private static void AsyncDemoCompleted(IList&lt;user&gt; result, Object state, FacebookException e)
             {
                 var actual = result;
             }
             </code>
             </example>
             <param name="uids">This is a List of user IDs.</param>
             <param name="callback">The AsyncCallback delegate</param>
             <param name="state">An object containing state information for this asynchronous request</param>        
             <returns>The user info elements returned are those friends visible to the Facebook Platform. If no visible users are found from the passed uids argument, the method will return an empty result element.</returns>
        </member>
        <member name="M:Facebook.Rest.Users.GetInfoAsync(System.String,Facebook.Rest.Users.GetInfoCallback,System.Object)">
             <summary>
             Returns a wide array of user-specific information for each user identifier passed, limited by the view of the current user.
             </summary>
             <example>
             <code>
             private static void RunDemoAsync()
             {
                 FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.ApplicationSecret, Constants.SessionKey));
                 string uids = "658517591,824555570"; 
                 api.Users.GetInfoAsync(uids, AsyncDemoCompleted, null);
             }
            
             private static void AsyncDemoCompleted(IList&lt;user&gt; result, Object state, FacebookException e)
             {
                 var actual = result;
             }
             </code>
             </example>
             <param name="uids">A comma-separated list of user IDs.</param>
             <param name="callback">The AsyncCallback delegate</param>
             <param name="state">An object containing state information for this asynchronous request</param>        
             <returns>The user info elements returned are those friends visible to the Facebook Platform. If no visible users are found from the passed uids argument, the method will return an empty result element.</returns>
        </member>
        <member name="M:Facebook.Rest.Users.GetLoggedInUserAsync(Facebook.Rest.Users.GetLoggedInUserCallback,System.Object)">
              <summary>
              Gets the user ID (uid) associated with the current session.
              </summary>
              <example>
              <code>
             private static void RunDemoAsync()
             {
                 FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.ApplicationSecret, Constants.SessionKey));
                 api.Users.GetLoggedInUserAsync(AsyncDemoCompleted, null);
             }
            
             private static void AsyncDemoCompleted(long result, Object state, FacebookException e)
             {
                 var actual = result;
             }
             </code>
             </example>
             <param name="callback">The AsyncCallback delegate</param>
             <param name="state">An object containing state information for this asynchronous request</param>        
             <returns>This method returns the user ID (uid) associated with the current session.</returns>
        </member>
        <member name="M:Facebook.Rest.Users.GetStandardInfoAsync(System.Collections.Generic.List{System.Int64},Facebook.Rest.Users.GetStandardInfoCallback,System.Object)">
             <summary>
             Returns an array of user-specific information for use by the application itself.
             </summary>
             <example>
             <code>
             private static void RunDemoAsync()
             {
                 FacebookApi api = new FacebookApi(new FBMLCanvasSession(Constants.WebApplicationKey, Constants.WebSecret));
                 api.Session.UserId = Constants.UserId;
                 List&lt;long&gt; uids = new List&lt;long&gt; { Constants.UserId };
                 api.Users.GetStandardInfoAsync(uids, AsyncDemoCompleted, null);
             }
            
             private static void AsyncDemoCompleted(IList&lt;user&gt; result, Object state, FacebookException e)
             {
                 var actual = result;
             }
             </code>
             </example>
             <param name="uids">A List of user IDs.</param>
             <param name="callback">The AsyncCallback delegate</param>
             <param name="state">An object containing state information for this asynchronous request</param>        
             <returns>The user info elements returned are those friends visible to the Facebook Platform.</returns>
        </member>
        <member name="M:Facebook.Rest.Users.GetStandardInfoAsync(System.Collections.Generic.List{System.Int64},System.Collections.Generic.IList{System.String},Facebook.Rest.Users.GetStandardInfoCallback,System.Object)">
             <summary>
             Returns an array of user-specific information for use by the application itself.
             </summary>
             <example>
             <code>
             private static void RunDemoAsync()
             {
                 FacebookApi api = new FacebookApi(new FBMLCanvasSession(Constants.WebApplicationKey, Constants.WebSecret));
                 api.Session.UserId = Constants.UserId;
                 List&lt;long&gt; uids = new List&lt;long&gt; { Constants.UserId };
                 List&lt;string&gt; fields = new List&lt;string&gt; { "uid", "first_name", "last_name", "name", "profile_url", "proxied_email" };
                 api.Users.GetStandardInfoAsync(uids, fields, AsyncDemoCompleted, null);
             }
            
             private static void AsyncDemoCompleted(IList&lt;user&gt; result, Object state, FacebookException e)
             {
                 var actual = result;
             }
             </code>
             </example>
             <param name="uids">A List of user IDs.</param>
             <param name="fields">List of desired fields in return. This is a List of field strings and is limited to these entries only: uid, first_name, last_name, name, timezone, birthday, sex, affiliations (regional type only), locale, profile_url, proxied_email.</param>
             <param name="callback">The AsyncCallback delegate</param>
             <param name="state">An object containing state information for this asynchronous request</param>        
             <returns>The user info elements returned are those friends visible to the Facebook Platform.</returns>
        </member>
        <member name="M:Facebook.Rest.Users.GetStandardInfoAsync(System.String,Facebook.Rest.Users.GetStandardInfoCallback,System.Object)">
             <summary>
             Returns an array of user-specific information for use by the application itself.
             </summary>
             <example>
             <code>
             private static void RunDemoAsync()
             {
                 FacebookApi api = new FacebookApi(new FBMLCanvasSession(Constants.WebApplicationKey, Constants.WebSecret));
                 api.Session.UserId = Constants.UserId;
                 string uids = Constants.UserId.ToString();
                 api.Users.GetStandardInfoAsync(uids, AsyncDemoCompleted, null);
             }
            
             private static void AsyncDemoCompleted(IList&lt;user&gt; result, Object state, FacebookException e)
             {
                 var actual = result;
             }
             </code>
             </example>
             <param name="uids">A comma-separated list of user IDs.</param>
             <param name="callback">The AsyncCallback delegate</param>
             <param name="state">An object containing state information for this asynchronous request</param>        
             <returns>The user info elements returned are those friends visible to the Facebook Platform.</returns>
        </member>
        <member name="M:Facebook.Rest.Users.GetStandardInfoAsync(System.String,System.Collections.Generic.IList{System.String},Facebook.Rest.Users.GetStandardInfoCallback,System.Object)">
             <summary>
             Returns an array of user-specific information for use by the application itself.
             </summary>
             <example>
             <code>
             private static void RunDemoAsync()
             {
                 FacebookApi api = new FacebookApi(new FBMLCanvasSession(Constants.WebApplicationKey, Constants.WebSecret));
                 api.Session.UserId = Constants.UserId;
                 string uids = Constants.UserId.ToString();
                 List&lt;string&gt; fields = new List&lt;string&gt; { "uid", "first_name", "last_name", "name", "profile_url", "proxied_email" };
                 api.Users.GetStandardInfoAsync(uids, fields, AsyncDemoCompleted, null);
             }
            
             private static void AsyncDemoCompleted(IList&lt;user&gt; result, Object state, FacebookException e)
             {
                 var actual = result;
             }
             </code>
             </example>
             <param name="uids">A comma-separated list of user IDs.</param>
             <param name="fields">List of desired fields in return. This is a List of field strings and is limited to these entries only: uid, first_name, last_name, name, timezone, birthday, sex, affiliations (regional type only), locale, profile_url, proxied_email.</param>
             <param name="callback">The AsyncCallback delegate</param>
             <param name="state">An object containing state information for this asynchronous request</param>        
             <returns>The user info elements returned are those friends visible to the Facebook Platform.</returns>
        </member>
        <member name="M:Facebook.Rest.Users.HasAppPermissionAsync(Facebook.Schema.Enums.ExtendedPermissions,Facebook.Rest.Users.HasAppPermissionCallback,System.Object)">
             <summary>
             Checks whether the user has opted in to an extended application permission.
             </summary>
             <example>
             <code>
             private static void RunDemoAsync()
             {
                 FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.ApplicationSecret, Constants.SessionKey));
                 api.Users.HasAppPermissionAsync(Enums.ExtendedPermissions.email, AsyncDemoCompleted, null);
             }
            
             private static void AsyncDemoCompleted(bool result, Object state, FacebookException e)
             {
                 var actual = result;
             }
             </code>
             </example>
             <param name="ext_perm">String identifier for the extended permission that is being checked for. Must be one of email, read_stream, publish_stream, offline_access, status_update, photo_upload, {create_event, rsvp_event, sms, video_upload, create_note, share_item.</param>
             <param name="callback">The AsyncCallback delegate</param>
             <param name="state">An object containing state information for this asynchronous request</param>        
             <returns>Returns true or false.</returns>
        </member>
        <member name="M:Facebook.Rest.Users.HasAppPermissionAsync(Facebook.Schema.Enums.ExtendedPermissions,System.Int64,Facebook.Rest.Users.HasAppPermissionCallback,System.Object)">
             <summary>
             Checks whether the user has opted in to an extended application permission.
             </summary>
             <example>
             <code>
             private static void RunDemoAsync()
             {
                 FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.ApplicationSecret, Constants.SessionKey));
                 api.Users.HasAppPermissionAsync(Enums.ExtendedPermissions.email, Constants.UserId, AsyncDemoCompleted, null);
             }
            
             private static void AsyncDemoCompleted(bool result, Object state, FacebookException e)
             {
                 var actual = result;
             }
             </code>
             </example>
             <param name="ext_perm">String identifier for the extended permission that is being checked for. Must be one of email, read_stream, publish_stream, offline_access, status_update, photo_upload, {create_event, rsvp_event, sms, video_upload, create_note, share_item.</param>
             <param name="uid">The user ID of the user whose permissions you are checking. If this parameter is not specified, then it defaults to the session user.  Note: This parameter applies only to Web applications. Facebook ignores this parameter if it is passed by a desktop application.</param>
             <param name="callback">The AsyncCallback delegate</param>
             <param name="state">An object containing state information for this asynchronous request</param>        
             <returns>Returns true or false.</returns>
        </member>
        <member name="M:Facebook.Rest.Users.IsAppUserAsync(System.Int64,Facebook.Rest.Users.IsAppUserCallback,System.Object)">
             <summary>
             Returns whether the user (either the session user or user specified by UID) has authorized the calling application.
             </summary>
             <example>
             <code>
             private static void RunDemoAsync()
             {
                 FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.ApplicationSecret, Constants.SessionKey));
                 api.Users.IsAppUserAsync(Constants.UserId, AsyncDemoCompleted, null);
             }
            
             private static void AsyncDemoCompleted(bool result, Object state, FacebookException e)
             {
                 var actual = result;
             }
             </code>
             </example>
             <param name="uid">The user ID of the user who may have authorized the application. If this parameter is not specified, then it defaults to the session user.  Note: This parameter applies only to Web applications. Facebook ignores this parameter if it is passed by a desktop application.</param>
             <param name="callback">The AsyncCallback delegate</param>
             <param name="state">An object containing state information for this asynchronous request</param>        
             <returns>Returns true or false.</returns>
        </member>
        <member name="M:Facebook.Rest.Users.IsVerifiedAsync(System.Int64,Facebook.Rest.Users.IsVerifiedCallback,System.Object)">
             <summary>
             Returns whether the user is a verified Facebook user.
             </summary>
             <example>
             <code>
             private static void RunDemoAsync()
             {
                 FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.ApplicationSecret, Constants.SessionKey));
                 api.Users.IsVerifiedAsync(Constants.UserId, AsyncDemoCompleted, null);
             }
            
             private static void AsyncDemoCompleted(bool result, Object state, FacebookException e)
             {
                 var actual = result;
             }
             </code>
             </example>
             <param name="uid">The user ID to verify.</param>
             <param name="callback">The AsyncCallback delegate</param>
             <param name="state">An object containing state information for this asynchronous request</param>        
             <returns>This call returns true for a verified user; false for an non-verified user.</returns>
             <remarks>This method is currently broken on Facebook's side (it only returns an empty XML element). A bug report has been filed here: http://bugs.developers.facebook.com/show_bug.cgi?id=5129 .</remarks>
        </member>
        <member name="M:Facebook.Rest.Users.SetStatusAsync(System.String,Facebook.Rest.Users.SetStatusCallback,System.Object)">
             <summary>
             Updates a user's Facebook status.
             </summary>
             <example>
             <code>
             private static void RunDemoAsync()
             {
                 FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.ApplicationSecret, Constants.SessionKey));
                 api.Users.SetStatusAsync("I'm an async code sample.", AsyncDemoCompleted, null);
             }
            
             private static void AsyncDemoCompleted(bool result, Object state, FacebookException e)
             {
                 var actual = result;
             }
             </code>
             </example>
             <param name="status">The status message to set.  Note: The maximum message length is 255 characters; messages longer than that limit will be truncated and appended with '...'.</param>
             <param name="callback">The AsyncCallback delegate</param>
             <param name="state">An object containing state information for this asynchronous request</param>        
             <returns>This method returns true on success, false on failure, or an error code.</returns>
        </member>
        <member name="M:Facebook.Rest.Users.SetStatusAsync(System.String,System.Int64,Facebook.Rest.Users.SetStatusCallback,System.Object)">
             <summary>
             Updates a user's Facebook status.
             </summary>
             <example>
             <code>
             private static void RunDemoAsync()
             {
                 FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.ApplicationSecret, Constants.SessionKey));
                 api.Users.SetStatusAsync("I'm an async code sample.", Constants.UserId, AsyncDemoCompleted, null);
             }
            
             private static void AsyncDemoCompleted(bool result, Object state, FacebookException e)
             {
                 var actual = result;
             }
             </code>
             </example>
             <param name="status">The status message to set.  Note: The maximum message length is 255 characters; messages longer than that limit will be truncated and appended with '...'.</param>
             <param name="uid">The user ID of the user whose status you are setting. If this parameter is not specified, then it defaults to the session user.  Note: This parameter applies only to Web applications.  Facebook ignores this parameter if it is passed by a desktop application.</param>
             <param name="callback">The AsyncCallback delegate</param>
             <param name="state">An object containing state information for this asynchronous request</param>        
             <returns>This method returns true on success, false on failure, or an error code.</returns>
        </member>
        <member name="M:Facebook.Rest.Users.SetStatusAsync(System.String,System.Boolean,Facebook.Rest.Users.SetStatusCallback,System.Object)">
             <summary>
             Updates a user's Facebook status.
             </summary>
             <example>
             <code>
             private static void RunDemoAsync()
             {
                 FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.ApplicationSecret, Constants.SessionKey));
                 api.Users.SetStatusAsync("I'm an async code sample.", true, AsyncDemoCompleted, null);
             }
            
             private static void AsyncDemoCompleted(bool result, Object state, FacebookException e)
             {
                 var actual = result;
             }
             </code>
             </example>
             <param name="status">The status message to set.  Note: The maximum message length is 255 characters; messages longer than that limit will be truncated and appended with '...'.</param>
             <param name="status_includes_verb">If set to true, the word "is" will not be prepended to the status message.</param>
             <param name="callback">The AsyncCallback delegate</param>
             <param name="state">An object containing state information for this asynchronous request</param>        
             <returns>This method returns true on success, false on failure, or an error code.</returns>
        </member>
        <member name="M:Facebook.Rest.Users.SetStatusAsync(System.String,System.Boolean,System.Int64,Facebook.Rest.Users.SetStatusCallback,System.Object)">
             <summary>
             Updates a user's Facebook status.
             </summary>
             <example>
             <code>
             private static void RunDemoAsync()
             {
                 FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.ApplicationSecret, Constants.SessionKey));
                 api.Users.SetStatusAsync("I'm an async code sample.", true, Constants.UserId, AsyncDemoCompleted, null);
             }
            
             private static void AsyncDemoCompleted(bool result, Object state, FacebookException e)
             {
                 var actual = result;
             }
             </code>
             </example>
             <param name="status">The status message to set.  Note: The maximum message length is 255 characters; messages longer than that limit will be truncated and appended with '...'.</param>
             <param name="status_includes_verb">If set to true, the word "is" will not be prepended to the status message.</param>
             <param name="uid">The user ID of the user whose status you are setting. If this parameter is not specified, then it defaults to the session user.  Note: This parameter applies only to Web applications.  Facebook ignores this parameter if it is passed by a desktop application.</param>
             <param name="callback">The AsyncCallback delegate</param>
             <param name="state">An object containing state information for this asynchronous request</param>        
             <returns>This method returns true on success, false on failure, or an error code.</returns>
        </member>
        <member name="M:Facebook.Rest.Users.GetInfo(System.String)">
            <summary>
            Returns a wide array of user-specific information for each user identifier passed, limited by the view of the current user.
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
            string uids = "658517591,824555570";
            var actual = api.Users.GetInfo(uid);
            </code>
            </example>
            <param name="uids">This is a string of user IDs.</param>
            <returns>The user info elements returned are those friends visible to the Facebook Platform. If no visible users are found from the passed uids argument, the method will return an empty result element.</returns>
        </member>
        <member name="T:Facebook.Rest.Users.GetInfoCallback">
            <summary>
            Delegate called when GetUserInfo call is completed.
            </summary>
            <param name="users">List of user objects</param>
            <param name="state">An object containing state information for this asynchronous request</param>
            <param name="e">Exception object, if the call resulted in exception.</param>
        </member>
        <member name="T:Facebook.Rest.Users.GetLoggedInUserCallback">
            <summary>
            Delegate called when GetUserInfo call is completed.
            </summary>
            <param name="userId">user ID of the logged in user</param>
            <param name="state">An object containing state information for this asynchronous request</param>
            <param name="e">Exception object, if the call resulted in exception.</param>
        </member>
        <member name="T:Facebook.Rest.Users.GetStandardInfoCallback">
            <summary>
            Delegate called when GetStandardInfo call is completed.
            </summary>
            <param name="users">List of user objects</param>
            <param name="state">An object containing state information for this asynchronous request</param>
            <param name="e">Exception object, if the call resulted in exception.</param>
        </member>
        <member name="T:Facebook.Rest.Users.HasAppPermissionCallback">
            <summary>
            Delegate called when HasAppPermission call is completed.
            </summary>
            <param name="hasPermission">set to true if user has permission</param>
            <param name="state">An object containing state information for this asynchronous request</param>
            <param name="e">Exception object, if the call resulted in exception.</param>
        </member>
        <member name="T:Facebook.Rest.Users.IsAppUserCallback">
            <summary>
            Delegate called when IsAppUser call is completed.
            </summary>
            <param name="isAppUser">set to true if user is app user</param>
            <param name="state">An object containing state information for this asynchronous request</param>
            <param name="e">Exception object, if the call resulted in exception.</param>
        </member>
        <member name="T:Facebook.Rest.Users.IsVerifiedCallback">
            <summary>
            Delegate called when IsVerified call is completed.
            </summary>
            <param name="isVerified">True if the user has been verified</param>
            <param name="state">An object containing state informatoin for this asynchronous request.</param>
            <param name="e">Exception object, if the call resulted in exception.</param>
        </member>
        <member name="T:Facebook.Rest.Users.SetStatusCallback">
            <summary>
            Delegate called when SetStatus call is completed.
            </summary>
            <param name="result">True if the operation completed, false otherwise.</param>
            <param name="state">An object containing state informatoin for this asynchronous request.</param>
            <param name="e">Exception object, if the call resulted in exception.</param>
        </member>
        <member name="F:Facebook.Session.DesktopPopup.FacebookWinformBrowser.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Facebook.Session.DesktopPopup.FacebookWinformBrowser.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Facebook.Session.DesktopPopup.FacebookWinformBrowser.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Facebook.Rest.Stream">
            <summary>
            Facebook Stream API methods.
            </summary>
        </member>
        <member name="M:Facebook.Rest.Stream.#ctor(Facebook.Session.IFacebookSession)">
            <summary>
            Public constructor for facebook.Stream
            </summary>
            <param name="session">Needs a connected Facebook Session object for making requests</param>
        </member>
        <member name="M:Facebook.Rest.Stream.AddComment(System.String,System.String)">
            <summary>
            This method adds a comment to a post that was already published to a user's Wall.
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new FBMLCanvasSession(Constants.WebApplicationKey, Constants.WebSecret));
            var result = api.Stream.AddComment(Constants.PostId1, "adding a comment");
            </code>
            </example>
            <param name="postId">The ID for the post to which you're adding the comment.</param>
            <param name="comment">The text of the comment. This is a plain text parameter only; you cannot format the comment with HTML or FBML.</param>
            <returns>This call returns a comment_id if the comment was added successfully, or an error code if the call was unsuccessful.</returns>
        </member>
        <member name="M:Facebook.Rest.Stream.AddComment(System.Int64,System.String,System.String)">
            <summary>
            This method adds a comment to a post that was already published to a user's Wall.
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new FBMLCanvasSession(Constants.WebApplicationKey, Constants.WebSecret));
            var result = api.Stream.AddComment(Constants.UserId, Constants.PostId1, "adding a comment");
            </code>
            </example>
            <param name="uid">The user ID of the user adding the comment. If this parameter is not specified, then it defaults to the session user. Note: This parameter applies only to Web applications.  Facebook ignores this parameter if it is passed by a desktop application.</param>
            <param name="postId">The ID for the post to which you're adding the comment.</param>
            <param name="comment">The text of the comment. This is a plain text parameter only; you cannot format the comment with HTML or FBML.</param>
            <returns>This call returns a comment_id if the comment was added successfully, or an error code if the call was unsuccessful.</returns>
        </member>
        <member name="M:Facebook.Rest.Stream.AddLike(System.String)">
            <summary>
            This method lets a user add a like to any post the user can see. A user can like each post only once.
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new FBMLCanvasSession(Constants.WebApplicationKey, Constants.WebSecret));
            var result = api.Stream.AddLike(Constants.PostId1);
            </code>
            </example>
            <param name="postId">The ID of the post.</param>
            <returns>This method returns true on success, or false and an error code if it fails.</returns>
        </member>
        <member name="M:Facebook.Rest.Stream.AddLike(System.Int64,System.String)">
            <summary>
            This method lets a user add a like to any post the user can see. A user can like each post only once.
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new FBMLCanvasSession(Constants.WebApplicationKey, Constants.WebSecret));
            var result = api.Stream.AddLike(Constants.UserId, Constants.PostId1);
            </code>
            </example>
            <param name="uid">The user ID of the user who likes the post. If this parameter is not specified, then it defaults to the session user. Note: This parameter applies only to Web applications.  Facebook ignores this parameter if it is passed by a desktop application.</param>
            <param name="postId">The ID of the post.</param>
            <returns>This method returns true on success, or false and an error code if it fails.</returns>
        </member>
        <member name="M:Facebook.Rest.Stream.Get(System.Collections.Generic.List{System.Int64},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32})">
            <summary>
            This method returns an object that contains the stream from the perspective of a specific viewer -- a user or a Facebook Page.
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
            var result = api.Stream.Get(null, DateTime.Now.AddYears(-2), DateTime.Now, 0);
            </code>
            </example>
            <param name="sourceIds">An array containing all the stream data for the user profiles and Pages connected to the viewer_id. You can filter the stream to include posts by the IDs you specify here. (Default value is all connections of the viewer.)</param>
            <param name="startTime">The earliest DateTime for which to retrieve posts from the stream. The start_time uses the updated_time field in the stream (FQL) table as the baseline for determining the earliest time for which to get the stream.</param>
            <param name="endTime">The latest DateTime for which to retrieve posts from the stream. The end_time uses the updated_time field in the stream (FQL) table as the baseline for determining the latest time for which to get the stream.</param>
            <param name="limit">The total number of posts to return. (Default value is 30 posts.)</param>
            <returns>This method returns a stream_data object containing the following arrays:  posts, which is an array of post data, containing the fields defined by the stream (FQL) table.  profiles, which is an array of profile information, containing the fields defined by the profile (FQL) table.  albums, which is an array of album information, containing the field as defined by the album (FQL) table.</returns>
        </member>
        <member name="M:Facebook.Rest.Stream.Get(System.Int64,System.Collections.Generic.List{System.Int64},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.String)">
            <summary>
            This method returns an object that contains the stream from the perspective of a specific viewer -- a user or a Facebook Page.
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
            var result = api.Stream.Get(0, null, DateTime.Now.AddYears(-2), DateTime.Now, 0, null);
            </code>
            </example>
            <param name="viewerId">The user ID for whom you are fetching stream data. You can pass 0 for this parameter to retrieve publicly viewable information.</param>
            <param name="sourceIds">An array containing all the stream data for the user profiles and Pages connected to the viewer_id. You can filter the stream to include posts by the IDs you specify here. (Default value is all connections of the viewer.)</param>
            <param name="startTime">The earliest DateTime for which to retrieve posts from the stream. The start_time uses the updated_time field in the stream (FQL) table as the baseline for determining the earliest time for which to get the stream.</param>
            <param name="endTime">The latest DateTime for which to retrieve posts from the stream. The end_time uses the updated_time field in the stream (FQL) table as the baseline for determining the latest time for which to get the stream.</param>
            <param name="limit">The total number of posts to return. (Default value is 30 posts.)</param>
            <param name="filter_key">A filter associated with the user. Filters get returned by stream.getFilters or the stream_filter FQL table. To filter for stream posts from your application, look for a filter with a filter_key set to app_YOUR_APPLICATION_ID.</param>
            <returns>This method returns a stream_data object containing the following arrays:  posts, which is an array of post data, containing the fields defined by the stream (FQL) table.  profiles, which is an array of profile information, containing the fields defined by the profile (FQL) table.  albums, which is an array of album information, containing the field as defined by the album (FQL) table.</returns>
        </member>
        <member name="M:Facebook.Rest.Stream.GetComments(System.String)">
            <summary>
            This method returns all comments associated with a post in a user's stream. This method returns comments only if the user who owns the post (that is, the user published the post to his or her profile) has authorized your application.
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new FBMLCanvasSession(Constants.WebApplicationKey, Constants.WebSecret));
            var result = api.Stream.GetComments(Constants.PostId1);
            </code>
            </example>
            <param name="post_id">The ID for the post for which you're retrieving the comments.</param>
            <returns>This method returns a List of comments, where each comment contains the fields from the comment (FQL) table.</returns>
        </member>
        <member name="M:Facebook.Rest.Stream.GetFilters">
            <summary>
            This method returns any filters a user has specified for his or her home page stream.
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
            var result = api.Stream.GetFilters();
            </code>
            </example>
            <returns>This method returns a List of data containing the fields from the stream_filter_(FQL) table.</returns>
        </member>
        <member name="M:Facebook.Rest.Stream.GetFilters(System.Int64)">
            <summary>
            This method returns any filters a user has specified for his or her home page stream.
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
            var result = api.Stream.GetFilters(Constants.UserId);
            </code>
            </example>
            <param name="uid">The user ID for the user whose stream filters you are returning.  Note: This parameter applies only to Web applications. Facebook ignores this parameter if it is passed by a desktop application.</param>
            <returns>This method returns a List of data containing the fields from the stream_filter_(FQL) table.</returns>
        </member>
        <member name="M:Facebook.Rest.Stream.Publish(System.String)">
            <summary>
            This method publishes a post into the stream on the user's Wall and News Feed. This post also appears in the user's friends' streams (their News Feeds).
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
            var result = api.Stream.Publish("Publishing to stream");
            </code>
            </example>
            <param name="message">The message the user enters for the post at the time of publication.</param>
            <returns>This call returns a post_id string containing the ID of the stream item upon success. If the call fails, it returns an error code instead.</returns>
        </member>
        <member name="M:Facebook.Rest.Stream.Publish(System.String,Facebook.Rest.attachment,System.Collections.Generic.IList{Facebook.Schema.action_link},System.String,System.Int64)">
             <summary>
             This method publishes a post into the stream on the user's Wall and News Feed. This post also appears in the user's friends' streams (their News Feeds).
             </summary>
             <example>
             <code>
             FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
             attachment attachment = new attachment();
             attachment.caption = "facebook.com";
             attachment.name = "Publish Test";
             attachment.href = "http://www.facebook.com";
             attachment.description = "a sample description";
             
             attachment.properties = new attachment_property()
             {
                 category = new attachment_category()
                 {
                     href = "http://www.facebook.com/mycategory/sample",
                     text = "sample category"
                 },
                 ratings = "5 stars"
             };
            
             attachment.media = new List&lt;attachment_media&gt;(){new attachment_media_image()
                                     {
                                         src = "http://facebook.com/myapp/logo.jpg",
                                         href = "http://www.facebook.com/myapp"
                                     }};
             
             var result = api.Stream.Publish("Publishing to stream with attachment", attachment, null, null, 0);
             </code>
             </example>
             <param name="message">The message the user enters for the post at the time of publication.</param>
             <param name="attachment">An object containing the text of the post, relevant links, a media type (image, video, mp3, flash), as well as any other key/value pairs you may want to add. See Facebook API for more details.  Note: If you want to use this call to update a user's status, don't pass an attachment; the content of the message parameter will become the user's new status and will appear at the top of the user's profile.</param>
             <param name="actionLinks">A List of action link objects, containing the link text and a hyperlink.</param>
             <param name="target_id">The ID of the user or the Page where you are publishing the content. If you specify a target_id, the post appears on the Wall of the target user, not on the Wall of the user who published the post. This mimics the action of posting on a friend's Wall on Facebook itself.</param>
             <param name="uid">The user ID or Page ID of the user or Page publishing the post. If this parameter is not specified, then it defaults to the session user.  Note: This parameter applies only to Web applications.  Facebook ignores this parameter if it is passed by a desktop application.</param>
             <returns>This call returns a post_id string containing the ID of the stream item upon success. If the call fails, it returns an error code instead.</returns>
        </member>
        <member name="M:Facebook.Rest.Stream.Remove(System.String)">
            <summary>
            This method removes a post from a user's Wall. The post also gets removed from the user's and the user's friends' News Feeds. Your application may only remove posts that were created through it.
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
            api.Session.UserId = Constants.UserId;
            var actual = api.Stream.Remove(Constants.PostId2);
            </code>
            </example>
            <returns>This call returns true if the post was removed, or false and an error code if the post was not removed.</returns>
        </member>
        <member name="M:Facebook.Rest.Stream.Remove(System.Int64,System.String)">
            <summary>
            This method removes a post from a user's Wall. The post also gets removed from the user's and the user's friends' News Feeds. Your application may only remove posts that were created through it.
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
            api.Session.UserId = Constants.UserId;
            var actual = api.Stream.Remove(Constants.UserId, Constants.PostId2);
            </code>
            </example>
            <param name="uid">The user ID of the user publishing the post. If this parameter is not specified, then it defaults to the session user.  Note: This parameter applies only to Web applications. Facebook ignores this parameter if it is passed by a desktop application.</param>
            <param name="postId">The ID for the post you want to remove.</param>
            <returns>This call returns true if the post was removed, or false and an error code if the post was not removed.</returns>
        </member>
        <member name="M:Facebook.Rest.Stream.RemoveComment(System.String)">
            <summary>
            This method removes a comment from a post.
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new FBMLCanvasSession(Constants.WebApplicationKey, Constants.WebSecret));
            api.Session.UserId = Constants.UserId;
            var actual = api.Stream.RemoveComment(Constants.CommentId);
            </code>
            </example>
            <returns>This call returns true if the comment was removed, or false and an error code if the comment was not removed.</returns>
        </member>
        <member name="M:Facebook.Rest.Stream.RemoveComment(System.Int64,System.String)">
            <summary>
            This method removes a comment from a post.
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new FBMLCanvasSession(Constants.WebApplicationKey, Constants.WebSecret));
            api.Session.UserId = Constants.UserId;
            var actual = api.Stream.RemoveComment(Constants.UserId, Constants.CommentId);
            </code>
            </example>
            <param name="uid">The user ID of the user who made the comment. If this parameter is not specified, then it defaults to the session user. Note: This parameter applies only to Web applications.  Facebook ignores this parameter if it is passed by a desktop application.</param>
            <param name="commentId">The ID for the comment you want to remove.</param>
            <returns>This call returns true if the comment was removed, or false and an error code if the comment was not removed.</returns>
        </member>
        <member name="M:Facebook.Rest.Stream.RemoveLike(System.String)">
            <summary>
            This method removes a like a user added to a post.
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new FBMLCanvasSession(Constants.WebApplicationKey, Constants.WebSecret));
            api.Session.UserId = Constants.UserId;
            var actual = api.Stream.RemoveLike(Constants.PostId1);
            </code>
            </example>
            <param name="postId">The ID of the post.</param>
            <returns>This method returns true on success, or false and an error code if it fails.</returns>
        </member>
        <member name="M:Facebook.Rest.Stream.RemoveLike(System.Int64,System.String)">
            <summary>
            This method removes a like a user added to a post.
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new FBMLCanvasSession(Constants.WebApplicationKey, Constants.WebSecret));
            api.Session.UserId = Constants.UserId;
            var actual = api.Stream.RemoveLike(Constants.UserId, Constants.PostId1);
            </code>
            </example>
            <param name="uid">The user ID of the user who liked the post. If this parameter is not specified, then it defaults to the session user. Note: This parameter applies only to Web applications.  Facebook ignores this parameter if it is passed by a desktop application.</param>
            <param name="postId">The ID of the post.</param>
            <returns>This method returns true on success, or false and an error code if it fails.</returns>
        </member>
        <member name="M:Facebook.Rest.Stream.GetAsync(System.Collections.Generic.List{System.Int64},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},Facebook.Rest.Stream.GetCallback,System.Object)">
             <summary>
             This method returns an object that contains the stream from the perspective of a specific viewer -- a user or a Facebook Page.
             </summary>
             <example>
             <code>
             private static void RunDemoAsync()
             {
                 FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
                 api.Stream.GetAsync(null, DateTime.Now.AddYears(-2), DateTime.Now, 0, AsyncDemoCompleted, null);
             }
            
             private static void AsyncDemoCompleted(stream_data result, Object state, FacebookException e)
             {
                 var actual = result;
             }
             </code>
             </example>
             <param name="sourceIds">An array containing all the stream data for the user profiles and Pages connected to the viewer_id. You can filter the stream to include posts by the IDs you specify here. (Default value is all connections of the viewer.)</param>
             <param name="startTime">The earliest DateTime for which to retrieve posts from the stream. The start_time uses the updated_time field in the stream (FQL) table as the baseline for determining the earliest time for which to get the stream.</param>
             <param name="endTime">The latest DateTime for which to retrieve posts from the stream. The end_time uses the updated_time field in the stream (FQL) table as the baseline for determining the latest time for which to get the stream.</param>
             <param name="limit">The total number of posts to return. (Default value is 30 posts.)</param>
             <param name="callback">The AsyncCallback delegate</param>
             <param name="state">An object containing state information for this asynchronous request</param>        
             <returns>This method returns a stream_data object containing the following arrays:  posts, which is an array of post data, containing the fields defined by the stream (FQL) table.  profiles, which is an array of profile information, containing the fields defined by the profile (FQL) table.  albums, which is an array of album information, containing the field as defined by the album (FQL) table.</returns>
        </member>
        <member name="M:Facebook.Rest.Stream.GetAsync(System.Int64,System.Collections.Generic.List{System.Int64},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.String,Facebook.Rest.Stream.GetCallback,System.Object)">
             <summary>
             This method returns an object that contains the stream from the perspective of a specific viewer -- a user or a Facebook Page.
             </summary>
             <example>
             <code>
             private static void RunDemoAsync()
             {
                 FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
                 api.Stream.GetAsync(0, null, DateTime.Now.AddYears(-2), DateTime.Now, 0, null, AsyncDemoCompleted, null);
             }
            
             private static void AsyncDemoCompleted(stream_data result, Object state, FacebookException e)
             {
                 var actual = result;
             }
             </code>
             </example>
             <param name="viewerId">The user ID for whom you are fetching stream data. You can pass 0 for this parameter to retrieve publicly viewable information.</param>
             <param name="sourceIds">An array containing all the stream data for the user profiles and Pages connected to the viewer_id. You can filter the stream to include posts by the IDs you specify here. (Default value is all connections of the viewer.)</param>
             <param name="startTime">The earliest DateTime for which to retrieve posts from the stream. The start_time uses the updated_time field in the stream (FQL) table as the baseline for determining the earliest time for which to get the stream.</param>
             <param name="endTime">The latest DateTime for which to retrieve posts from the stream. The end_time uses the updated_time field in the stream (FQL) table as the baseline for determining the latest time for which to get the stream.</param>
             <param name="limit">The total number of posts to return. (Default value is 30 posts.)</param>
             <param name="filter_key">A filter associated with the user. Filters get returned by stream.getFilters or the stream_filter FQL table. To filter for stream posts from your application, look for a filter with a filter_key set to app_YOUR_APPLICATION_ID.</param>
             <param name="callback">The AsyncCallback delegate</param>
             <param name="state">An object containing state information for this asynchronous request</param>        
             <returns>This method returns a stream_data object containing the following arrays:  posts, which is an array of post data, containing the fields defined by the stream (FQL) table.  profiles, which is an array of profile information, containing the fields defined by the profile (FQL) table.  albums, which is an array of album information, containing the field as defined by the album (FQL) table.</returns>
        </member>
        <member name="M:Facebook.Rest.Stream.GetFiltersAsync(Facebook.Rest.Stream.GetFiltersCallback,System.Object)">
             <summary>
             This method returns any filters a user has specified for his or her home page stream.
             </summary>
             <example>
             <code>
             private static void RunDemoAsync()
             {
                 FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
                 api.Stream.GetFiltersAsync(AsyncDemoCompleted, null);
             }
            
             private static void AsyncDemoCompleted(IList&lt;stream_filter&gt; result, Object state, FacebookException e)
             {
                 var actual = result;
             }
             </code>
             </example>
             <param name="callback">The AsyncCallback delegate</param>
             <param name="state">An object containing state information for this asynchronous request</param>        
             <returns>This method returns a List of data containing the fields from the stream_filter_(FQL) table.</returns>
        </member>
        <member name="M:Facebook.Rest.Stream.GetFiltersAsync(System.Int64,Facebook.Rest.Stream.GetFiltersCallback,System.Object)">
             <summary>
             This method returns any filters a user has specified for his or her home page stream.
             </summary>
             <example>
             <code>
             private static void RunDemoAsync()
             {
                 FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
                 api.Stream.GetFiltersAsync(Constants.UserId, AsyncDemoCompleted, null);
             }
            
             private static void AsyncDemoCompleted(IList&lt;stream_filter&gt; result, Object state, FacebookException e)
             {
                 var actual = result;
             }
             </code>
             </example>
             <param name="uid">The user ID for the user whose stream filters you are returning.  Note: This parameter applies only to Web applications. Facebook ignores this parameter if it is passed by a desktop application.</param>
             <param name="callback">The AsyncCallback delegate</param>
             <param name="state">An object containing state information for this asynchronous request</param>        
             <returns>This method returns a List of data containing the fields from the stream_filter_(FQL) table.</returns>
        </member>
        <member name="M:Facebook.Rest.Stream.GetCommentsAsync(System.String,Facebook.Rest.Stream.GetCommentsCallback,System.Object)">
             <summary>
             This method returns all comments associated with a post in a user's stream. This method returns comments only if the user who owns the post (that is, the user published the post to his or her profile) has authorized your application.
             </summary>
             <example>
             <code>
             private static void RunDemoAsync()
             {
                 FacebookApi api = new FacebookApi(new FBMLCanvasSession(Constants.WebApplicationKey, Constants.WebSecret));
                 api.Stream.GetCommentsAsync(Constants.PostId1, AsyncDemoCompleted, null);
             }
            
             private static void AsyncDemoCompleted(IList&lt;comment&gt; result, Object state, FacebookException e)
             {
                 var actual = result;
             }
             </code>
             </example>
             <param name="post_id">The ID for the post for which you're retrieving the comments.</param>
             <param name="callback">The AsyncCallback delegate</param>
             <param name="state">An object containing state information for this asynchronous request</param>        
             <returns>This method returns a List of comments, where each comment contains the fields from the comment (FQL) table.</returns>
        </member>
        <member name="M:Facebook.Rest.Stream.PublishAsync(System.String,Facebook.Rest.Stream.PublishCallback,System.Object)">
             <summary>
             This method publishes a post into the stream on the user's Wall and News Feed. This post also appears in the user's friends' streams (their News Feeds).
             </summary>
             <example>
             <code>
             private static void RunDemoAsync()
             {
                 FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
                 api.Stream.PublishAsync("Publishing to stream with attachment", AsyncDemoCompleted, null); 
             }
            
             private static void AsyncDemoCompleted(string result, Object state, FacebookException e)
             {
                 var actual = result;
             }
             </code>
             </example>
             <param name="message">The message the user enters for the post at the time of publication.</param>
             <param name="callback">The AsyncCallback delegate</param>
             <param name="state">An object containing state information for this asynchronous request</param>        
             <returns>This call returns a post_id string containing the ID of the stream item upon success. If the call fails, it returns an error code instead.</returns>
        </member>
        <member name="M:Facebook.Rest.Stream.PublishAsync(System.String,Facebook.Rest.attachment,System.Collections.Generic.IList{Facebook.Schema.action_link},System.String,System.Int64,Facebook.Rest.Stream.PublishCallback,System.Object)">
             <summary>
             This method publishes a post into the stream on the user's Wall and News Feed. This post also appears in the user's friends' streams (their News Feeds).
             </summary>
             <example>
             <code>
             private static void RunDemoAsync()
             {
                 FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
                 attachment attachment = new attachment();
                 attachment.caption = "facebook.com";
                 attachment.name = "Publish Test";
                 attachment.href = "http://www.facebook.com";
                 attachment.description = "a sample description";
            
                 attachment.properties = new attachment_property()
                 {
                     category = new attachment_category()
                     {
                         href = "http://www.facebook.com/mycategory/sample",
                         text = "sample category"
                     },
                     ratings = "5 stars"
                 };
            
                 attachment.media = new List&lt;attachment_media&gt;(){new attachment_media_image()
                                         {
                                             src = "http://facebook.com/myapp/logo.jpg",
                                             href = "http://www.facebook.com/myapp"
                                         }};
            
                 api.Stream.PublishAsync("Publishing to stream with attachment", attachment, null, null, 0, AsyncDemoCompleted, null); 
             }
            
             private static void AsyncDemoCompleted(string result, Object state, FacebookException e)
             {
                 var actual = result;
             }
             </code>
             </example>
             <param name="message">The message the user enters for the post at the time of publication.</param>
             <param name="attachment">An object containing the text of the post, relevant links, a media type (image, video, mp3, flash), as well as any other key/value pairs you may want to add. See Facebook API for more details.  Note: If you want to use this call to update a user's status, don't pass an attachment; the content of the message parameter will become the user's new status and will appear at the top of the user's profile.</param>
             <param name="actionLinks">A List of action link objects, containing the link text and a hyperlink.</param>
             <param name="target_id">The ID of the user or the Page where you are publishing the content. If you specify a target_id, the post appears on the Wall of the target user, not on the Wall of the user who published the post. This mimics the action of posting on a friend's Wall on Facebook itself.</param>
             <param name="uid">The user ID or Page ID of the user or Page publishing the post. If this parameter is not specified, then it defaults to the session user.  Note: This parameter applies only to Web applications.  Facebook ignores this parameter if it is passed by a desktop application.</param>
             <param name="callback">The AsyncCallback delegate</param>
             <param name="state">An object containing state information for this asynchronous request</param>        
             <returns>This call returns a post_id string containing the ID of the stream item upon success. If the call fails, it returns an error code instead.</returns>
        </member>
        <member name="M:Facebook.Rest.Stream.AddCommentAsync(System.String,System.String,Facebook.Rest.Stream.AddCommentCallback,System.Object)">
             <summary>
             This method adds a comment to a post that was already published to a user's Wall.
             </summary>
             <example>
             <code>
             private static void RunDemoAsync()
             {
                 FacebookApi api = new FacebookApi(new FBMLCanvasSession(Constants.WebApplicationKey, Constants.WebSecret));
                 api.Stream.AddCommentAsync(Constants.PostId1, "adding a comment (async)", AsyncDemoCompleted, null);
             }
            
             private static void AsyncDemoCompleted(string result, Object state, FacebookException e)
             {
                 var actual = result;
             }
             </code>
             </example>
             <param name="postId">The ID for the post to which you're adding the comment.</param>
             <param name="comment">The text of the comment. This is a plain text parameter only; you cannot format the comment with HTML or FBML.</param>
             <param name="callback">The AsyncCallback delegate</param>
             <param name="state">An object containing state information for this asynchronous request</param>        
             <returns>This call returns a comment_id if the comment was added successfully, or an error code if the call was unsuccessful.</returns>
        </member>
        <member name="M:Facebook.Rest.Stream.AddCommentAsync(System.Int64,System.String,System.String,Facebook.Rest.Stream.AddCommentCallback,System.Object)">
             <summary>
             This method adds a comment to a post that was already published to a user's Wall.
             </summary>
             <example>
             <code>
             private static void RunDemoAsync()
             {
                 FacebookApi api = new FacebookApi(new FBMLCanvasSession(Constants.WebApplicationKey, Constants.WebSecret));
                 api.Stream.AddCommentAsync(Constants.UserId, Constants.PostId1, "adding a comment (async)", AsyncDemoCompleted, null);
             }
            
             private static void AsyncDemoCompleted(string result, Object state, FacebookException e)
             {
                 var actual = result;
             }
             </code>
             </example>
             <param name="uid">The user ID of the user adding the comment. If this parameter is not specified, then it defaults to the session user. Note: This parameter applies only to Web applications.  Facebook ignores this parameter if it is passed by a desktop application.</param>
             <param name="postId">The ID for the post to which you're adding the comment.</param>
             <param name="comment">The text of the comment. This is a plain text parameter only; you cannot format the comment with HTML or FBML.</param>
             <param name="callback">The AsyncCallback delegate</param>
             <param name="state">An object containing state information for this asynchronous request</param>        
             <returns>This call returns a comment_id if the comment was added successfully, or an error code if the call was unsuccessful.</returns>
        </member>
        <member name="M:Facebook.Rest.Stream.RemoveCommentAsync(System.String,Facebook.Rest.Stream.RemoveCommentCallback,System.Object)">
             <summary>
             This method removes a comment from a post.
             </summary>
             <example>
             <code>
             private static void RunDemoAsync()
             {
                 FacebookApi api = new FacebookApi(new FBMLCanvasSession(Constants.WebApplicationKey, Constants.WebSecret));
                 api.Session.UserId = Constants.UserId;
                 api.Stream.RemoveCommentAsync(Constants.CommentId, AsyncDemoCompleted, null);
             }
            
             private static void AsyncDemoCompleted(bool result, Object state, FacebookException e)
             {
                 var actual = result;
             }
             </code>
             </example>
             <param name="commentId">The ID for the comment you want to remove.</param>
             <param name="callback">The AsyncCallback delegate</param>
             <param name="state">An object containing state information for this asynchronous request</param>        
             <returns>This call returns true if the comment was removed, or false and an error code if the comment was not removed.</returns>
        </member>
        <member name="M:Facebook.Rest.Stream.RemoveCommentAsync(System.Int64,System.String,Facebook.Rest.Stream.RemoveCommentCallback,System.Object)">
             <summary>
             This method removes a comment from a post.
             </summary>
             <example>
             <code>
             private static void RunDemoAsync()
             {
                 FacebookApi api = new FacebookApi(new FBMLCanvasSession(Constants.WebApplicationKey, Constants.WebSecret));
                 api.Session.UserId = Constants.UserId;
                 api.Stream.RemoveCommentAsync(Constants.UserId, Constants.CommentId, AsyncDemoCompleted, null);
             }
            
             private static void AsyncDemoCompleted(bool result, Object state, FacebookException e)
             {
                 var actual = result;
             }
             </code>
             </example>
             <param name="uid">The user ID of the user who made the comment. If this parameter is not specified, then it defaults to the session user. Note: This parameter applies only to Web applications.  Facebook ignores this parameter if it is passed by a desktop application.</param>
             <param name="commentId">The ID for the comment you want to remove.</param>
             <param name="callback">The AsyncCallback delegate</param>
             <param name="state">An object containing state information for this asynchronous request</param>        
             <returns>This call returns true if the comment was removed, or false and an error code if the comment was not removed.</returns>
        </member>
        <member name="M:Facebook.Rest.Stream.RemoveAsync(System.String,Facebook.Rest.Stream.RemoveCallback,System.Object)">
             <summary>
             This method removes a post from a user's Wall. The post also gets removed from the user's and the user's friends' News Feeds. Your application may only remove posts that were created through it.
             </summary>
             <example>
             <code>
             private static void RunDemoAsync()
             {
                 FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
                 api.Session.UserId = Constants.UserId;
                 api.Stream.RemoveAsync(Constants.PostId2, AsyncDemoCompleted, null);
             }
            
             private static void AsyncDemoCompleted(bool result, Object state, FacebookException e)
             {
                 var actual = result;
             }
             </code>
             </example>
             <param name="postId">The ID for the post you want to remove.</param>
             <param name="callback">The AsyncCallback delegate</param>
             <param name="state">An object containing state information for this asynchronous request</param>        
             <returns>This call returns true if the post was removed, or false and an error code if the post was not removed.</returns>
        </member>
        <member name="M:Facebook.Rest.Stream.RemoveAsync(System.Int64,System.String,Facebook.Rest.Stream.RemoveCallback,System.Object)">
             <summary>
             This method removes a post from a user's Wall. The post also gets removed from the user's and the user's friends' News Feeds. Your application may only remove posts that were created through it.
             </summary>
             <example>
             <code>
             private static void RunDemoAsync()
             {
                 FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
                 api.Session.UserId = Constants.UserId;
                 api.Stream.RemoveAsync(Constants.UserId, Constants.PostId2, AsyncDemoCompleted, null);
             }
            
             private static void AsyncDemoCompleted(bool result, Object state, FacebookException e)
             {
                 var actual = result;
             }
             </code>
             </example>
             <param name="uid">The user ID of the user publishing the post. If this parameter is not specified, then it defaults to the session user.  Note: This parameter applies only to Web applications. Facebook ignores this parameter if it is passed by a desktop application.</param>
             <param name="postId">The ID for the post you want to remove.</param>
             <param name="callback">The AsyncCallback delegate</param>
             <param name="state">An object containing state information for this asynchronous request</param>        
             <returns>This call returns true if the post was removed, or false and an error code if the post was not removed.</returns>
        </member>
        <member name="M:Facebook.Rest.Stream.AddLikeAsync(System.String,Facebook.Rest.Stream.AddLikeCallback,System.Object)">
             <summary>
             This method lets a user add a like to any post the user can see. A user can like each post only once.
             </summary>
             <example>
             <code>
             private static void RunDemoAsync()
             {
                 FacebookApi api = new FacebookApi(new FBMLCanvasSession(Constants.WebApplicationKey, Constants.WebSecret));
                 api.Stream.AddLikeAsync(Constants.PostId1, AsyncDemoCompleted, null);
             }
            
             private static void AsyncDemoCompleted(bool result, Object state, FacebookException e)
             {
                 var actual = result;
             }
             </code>
             </example>
             <param name="postId">The ID of the post.</param>
             <param name="callback">The AsyncCallback delegate</param>
             <param name="state">An object containing state information for this asynchronous request</param>        
             <returns>This method returns true on success, or false and an error code if it fails.</returns>
        </member>
        <member name="M:Facebook.Rest.Stream.AddLikeAsync(System.Int64,System.String,Facebook.Rest.Stream.AddLikeCallback,System.Object)">
             <summary>
             This method lets a user add a like to any post the user can see. A user can like each post only once.
             </summary>
             <example>
             <code>
             private static void RunDemoAsync()
             {
                 FacebookApi api = new FacebookApi(new FBMLCanvasSession(Constants.WebApplicationKey, Constants.WebSecret));
                 api.Stream.AddLikeAsync(Constants.UserId, Constants.PostId1, AsyncDemoCompleted, null);
             }
            
             private static void AsyncDemoCompleted(bool result, Object state, FacebookException e)
             {
                 var actual = result;
             }
             </code>
             </example>
             <param name="uid">The user ID of the user who likes the post. If this parameter is not specified, then it defaults to the session user. Note: This parameter applies only to Web applications.  Facebook ignores this parameter if it is passed by a desktop application.</param>
             <param name="postId">The ID of the post.</param>
             <param name="callback">The AsyncCallback delegate</param>
             <param name="state">An object containing state information for this asynchronous request</param>        
             <returns>This method returns true on success, or false and an error code if it fails.</returns>
        </member>
        <member name="M:Facebook.Rest.Stream.RemoveLikeAsync(System.String,Facebook.Rest.Stream.RemoveLikeCallback,System.Object)">
             <summary>
             This method removes a like a user added to a post.
             </summary>
             <example>
             <code>
             private static void RunDemoAsync()
             {
                 FacebookApi api = new FacebookApi(new FBMLCanvasSession(Constants.WebApplicationKey, Constants.WebSecret));
                 api.Session.UserId = Constants.UserId;
                 api.Stream.RemoveLikeAsync(Constants.PostId1, AsyncDemoCompleted, null);
             }
            
             private static void AsyncDemoCompleted(bool result, Object state, FacebookException e)
             {
                 var actual = result;
             }
             </code>
             </example>
             <param name="postId">The ID of the post.</param>
             <param name="callback">The AsyncCallback delegate</param>
             <param name="state">An object containing state information for this asynchronous request</param>        
             <returns>This method returns true on success, or false and an error code if it fails.</returns>
        </member>
        <member name="M:Facebook.Rest.Stream.RemoveLikeAsync(System.Int64,System.String,Facebook.Rest.Stream.RemoveLikeCallback,System.Object)">
             <summary>
             This method removes a like a user added to a post.
             </summary>
             <example>
             <code>
             private static void RunDemoAsync()
             {
                 FacebookApi api = new FacebookApi(new FBMLCanvasSession(Constants.WebApplicationKey, Constants.WebSecret));
                 api.Session.UserId = Constants.UserId;
                 api.Stream.RemoveLikeAsync(Constants.UserId, Constants.PostId1, AsyncDemoCompleted, null);
             }
            
             private static void AsyncDemoCompleted(bool result, Object state, FacebookException e)
             {
                 var actual = result;
             }
             </code>
             </example>
             <param name="uid">The user ID of the user who liked the post. If this parameter is not specified, then it defaults to the session user. Note: This parameter applies only to Web applications.  Facebook ignores this parameter if it is passed by a desktop application.</param>
             <param name="postId">The ID of the post.</param>
             <param name="callback">The AsyncCallback delegate</param>
             <param name="state">An object containing state information for this asynchronous request</param>        
             <returns>This method returns true on success, or false and an error code if it fails.</returns>
        </member>
        <member name="T:Facebook.Rest.Stream.GetCallback">
            <summary>
            Delegate called when Get call completed
            </summary>
            <param name="data">Stream data.</param>
            <param name="state">An object containing state information for this asynchronous request</param>
            <param name="e">Exception object, if the call resulted in exception.</param>
        </member>
        <member name="T:Facebook.Rest.Stream.GetCommentsCallback">
            <summary>
            Delegate called when GetComments call completed
            </summary>
            <param name="comments">List of comments data.</param>
            <param name="state">An object containing state information for this asynchronous request</param>
            <param name="e">Exception object, if the call resulted in exception.</param>
        </member>
        <member name="T:Facebook.Rest.Stream.AddCommentCallback">
            <summary>
            Delegate called when AddComments call completed
            </summary>
            <param name="comment_id">Comment identifier.</param>
            <param name="state">An object containing state information for this asynchronous request</param>
            <param name="e">Exception object, if the call resulted in exception.</param>
        </member>
        <member name="T:Facebook.Rest.Stream.AddLikeCallback">
            <summary>
            Delegate called when AddLike call completed
            </summary>
            <param name="result">Boolean result.</param>
            <param name="state">An object containing state information for this asynchronous request</param>
            <param name="e">Exception object, if the call resulted in exception.</param>
        </member>
        <member name="T:Facebook.Rest.Stream.GetFiltersCallback">
            <summary>
            Delegate called when GetFilters call completed
            </summary>
            <param name="filters">A List of stream_filter data.</param>
            <param name="state">An object containing state information for this asynchronous request</param>
            <param name="e">Exception object, if the call resulted in exception.</param>
        </member>
        <member name="T:Facebook.Rest.Stream.PublishCallback">
            <summary>
            Delegate called when Publish call completed
            </summary>
            <param name="post_id">Post identifer.</param>
            <param name="state">An object containing state information for this asynchronous request</param>
            <param name="e">Exception object, if the call resulted in exception.</param>
        </member>
        <member name="T:Facebook.Rest.Stream.RemoveCallback">
            <summary>
            Delegate called when Remove call completed
            </summary>
            <param name="result">Boolean result.</param>
            <param name="state">An object containing state information for this asynchronous request</param>
            <param name="e">Exception object, if the call resulted in exception.</param>
        </member>
        <member name="T:Facebook.Rest.Stream.RemoveCommentCallback">
            <summary>
            Delegate called when RemoveComment call completed
            </summary>
            <param name="result">Boolean result.</param>
            <param name="state">An object containing state information for this asynchronous request</param>
            <param name="e">Exception object, if the call resulted in exception.</param>
        </member>
        <member name="T:Facebook.Rest.Stream.RemoveLikeCallback">
            <summary>
            Delegate called when RemoveLike call completed
            </summary>
            <param name="result">Boolean result.</param>
            <param name="state">An object containing state information for this asynchronous request</param>
            <param name="e">Exception object, if the call resulted in exception.</param>
        </member>
        <member name="T:Facebook.Rest.Stream.GetActivityStreamCallback">
            <summary>
            Delegate called when GetActivityStream call completed
            </summary>
            <param name="result">Boolean result.</param>
            <param name="state">An object containing state information for this asynchronous request</param>
            <param name="e">Exception object, if the call resulted in exception.</param>
        </member>
        <member name="T:Facebook.Rest.attachment">
            <summary>
            helper class for calls to stream.publish with attachments
            </summary>
        </member>
        <member name="P:Facebook.Rest.attachment.name">
            <summary>
            name of attachment
            </summary>
        </member>
        <member name="P:Facebook.Rest.attachment.href">
            <summary>
            href of attachment
            </summary>
        </member>
        <member name="P:Facebook.Rest.attachment.caption">
            <summary>
            caption of attachment
            </summary>
        </member>
        <member name="P:Facebook.Rest.attachment.description">
            <summary>
            description of attachment
            </summary>
        </member>
        <member name="P:Facebook.Rest.attachment.properties">
            <summary>
            list of additional properites
            </summary>
        </member>
        <member name="P:Facebook.Rest.attachment.media">
            <summary>
            list of media
            </summary>
        </member>
        <member name="P:Facebook.Rest.attachment.latitude">
            <summary>
            latitude
            </summary>
        </member>
        <member name="P:Facebook.Rest.attachment.longitude">
            <summary>
            longitude
            </summary>
        </member>
        <member name="T:Facebook.Rest.attachment_property_value">
            <summary>
            helper class the value of attachment_property
            </summary>
        </member>
        <member name="M:Facebook.Rest.attachment_property_value.ToString">
            <summary>
            overridden function to generate json string
            </summary>
        </member>
        <member name="P:Facebook.Rest.attachment_property_value.text">
            <summary>
            text of the property attachment
            </summary>
        </member>
        <member name="P:Facebook.Rest.attachment_property_value.href">
            <summary>
            href of the property attachment
            </summary>
        </member>
        <member name="T:Facebook.Rest.attachment_property">
            <summary>
            key value pair of the attachment property
            </summary>
        </member>
        <member name="M:Facebook.Rest.attachment_property.ToString">
            <summary>
            overridden function to generate json string
            </summary>
        </member>
        <member name="P:Facebook.Rest.attachment_property.name">
            <summary>
            key
            </summary>
        </member>
        <member name="P:Facebook.Rest.attachment_property.value">
            <summary>
            value
            </summary>
        </member>
        <member name="T:Facebook.Rest.attachment_media">
            <summary>
            attachment_media
            </summary>
        </member>
        <member name="P:Facebook.Rest.attachment_media.type">
            <summary>
            media type
            </summary>
        </member>
        <member name="T:Facebook.Rest.attachment_media_image">
            <summary>
            sub class of attahment_media for images
            </summary>
        </member>
        <member name="M:Facebook.Rest.attachment_media_image.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Facebook.Rest.attachment_media_image.src">
            <summary>
            image src
            </summary>
        </member>
        <member name="P:Facebook.Rest.attachment_media_image.href">
            <summary>
            image link
            </summary>
        </member>
        <member name="T:Facebook.Rest.attachment_media_flash">
            <summary>
            sub class of attahment_media for flash content
            </summary>
        </member>
        <member name="M:Facebook.Rest.attachment_media_flash.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Facebook.Rest.attachment_media_flash.swfsrc">
            <summary>
            swfsrc
            </summary>
        </member>
        <member name="P:Facebook.Rest.attachment_media_flash.imgsrc">
            <summary>
            imgsrc
            </summary>
        </member>
        <member name="P:Facebook.Rest.attachment_media_flash.width">
            <summary>
            width 
            </summary>
        </member>
        <member name="P:Facebook.Rest.attachment_media_flash.height">
            <summary>
            height 
            </summary>
        </member>
        <member name="P:Facebook.Rest.attachment_media_flash.expanded_width">
            <summary>
            expanded_width 
            </summary>
        </member>
        <member name="P:Facebook.Rest.attachment_media_flash.expanded_height">
            <summary>
            expanded_height 
            </summary>
        </member>
        <member name="T:Facebook.Rest.attachment_media_mp3">
            <summary>
            sub class of attahment_media for mp3 content
            </summary>
        </member>
        <member name="M:Facebook.Rest.attachment_media_mp3.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Facebook.Rest.attachment_media_mp3.src">
            <summary>
            src
            </summary>
        </member>
        <member name="P:Facebook.Rest.attachment_media_mp3.title">
            <summary>
            title
            </summary>
        </member>
        <member name="P:Facebook.Rest.attachment_media_mp3.artist">
            <summary>
            artist
            </summary>
        </member>
        <member name="P:Facebook.Rest.attachment_media_mp3.album">
            <summary>
            album
            </summary>
        </member>
        <member name="T:Facebook.Rest.attachment_media_video">
            <summary>
            sub class of attahment_media for video content
            </summary>
        </member>
        <member name="M:Facebook.Rest.attachment_media_video.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Facebook.Rest.attachment_media_video.video_src">
            <summary>
            video_src
            </summary>
        </member>
        <member name="P:Facebook.Rest.attachment_media_video.preview_img">
            <summary>
            preview_img
            </summary>
        </member>
        <member name="P:Facebook.Rest.attachment_media_video.video_link">
            <summary>
            video_link
            </summary>
        </member>
        <member name="P:Facebook.Rest.attachment_media_video.video_title">
            <summary>
            video_title
            </summary>
        </member>
        <member name="T:Facebook.Rest.attachment_media_type">
            <summary>
            enum defining the types of attachments
            </summary>
        </member>
        <member name="F:Facebook.Rest.attachment_media_type.image">
            <summary>
            image
            </summary>
        </member>
        <member name="F:Facebook.Rest.attachment_media_type.flash">
            <summary>
            flash
            </summary>
        </member>
        <member name="F:Facebook.Rest.attachment_media_type.mp3">
            <summary>
            mp3
            </summary>
        </member>
        <member name="F:Facebook.Rest.attachment_media_type.video">
            <summary>
            video
            </summary>
        </member>
        <member name="T:Facebook.BindingHelper.FacebookImageDimensions">
            <summary>
            Enumeration for image sizes
            </summary>
        </member>
        <member name="F:Facebook.BindingHelper.FacebookImageDimensions.Normal">
            <summary>
            Normal size image
            </summary>
        </member>
        <member name="F:Facebook.BindingHelper.FacebookImageDimensions.Big">
            <summary>
            Big size image
            </summary>
        </member>
        <member name="F:Facebook.BindingHelper.FacebookImageDimensions.Small">
            <summary>
            Small size image
            </summary>
        </member>
        <member name="F:Facebook.BindingHelper.FacebookImageDimensions.Square">
            <summary>
            Square size image
            </summary>
        </member>
        <member name="T:Facebook.BindingHelper.FacebookImage">
            <summary>
            Represents a image object at its different size
            </summary>
        </member>
        <member name="M:Facebook.BindingHelper.FacebookImage.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes Facebook image object
            </summary>
            <param name="normalPic"></param>
            <param name="bigPic"></param>
            <param name="smallPic"></param>
            <param name="squarePic"></param>
        </member>
        <member name="M:Facebook.BindingHelper.FacebookImage.GetImageAsync(Facebook.BindingHelper.FacebookImageDimensions,Facebook.BindingHelper.GetImageSourceAsyncCallback)">
            <summary>
            Starts download of requested image
            </summary>
            <param name="requestedSize">Size of the image</param>
            <param name="callback">Callback that will be called when download completes</param>
        </member>
        <member name="P:Facebook.BindingHelper.FacebookImage.ContentType">
            <summary>
            Content type of image
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.FacebookImage.Uri">
            <summary>
            Uri used to download the image
            </summary>
        </member>
        <member name="T:Facebook.Utility.HashHelper">
            <summary>
            Utility used for creating Facebook hashes (for example, Facebook Connect email hashes).
            </summary>
        </member>
        <member name="F:Facebook.Utility.HashHelper.crc32Table">
            
             Based on solution proposed at:
             http://www.vbaccelerator.com/home/net/code/libraries/crc32/article.asp
             
        </member>
        <member name="M:Facebook.Utility.HashHelper.#ctor">
            <summary>
            Construct an instance of the CRC32 class, pre-initialising the table
            for speed of lookup.
            </summary>
        </member>
        <member name="M:Facebook.Utility.HashHelper.GetCrc32(System.String)">
            <summary>
            Returns a 32bit Cyclic Redundancy Checksum (CRC) for the specified string.
            </summary>
            <param name="input">The string to calculate the CRC32 for</param>
            <returns>An unsigned integer containing the CRC32 calculation</returns>
        </member>
        <member name="T:Facebook.Session.FBMLSessionProvider">
            <summary>
             A provider that will look for session info for FBML pages.  If the session does not exist, but an 
             auth token does, the token will be exchanged for a session.
            </summary>
        </member>
        <member name="T:Facebook.Rest.Permissions">
            <summary>
            Facebook Permissions API methods.
            </summary>
        </member>
        <member name="M:Facebook.Rest.Permissions.#ctor(Facebook.Session.IFacebookSession)">
            <summary>
            Public constructor for facebook.Permissions
            </summary>
            <param name="session">Needs a connected Facebook Session object for making requests</param>
        </member>
        <member name="M:Facebook.Rest.Permissions.GrantApiAccess(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            This method gives another application access to certain API calls on behalf of the application calling it. The application granted access is specified by permissions_apikey. Which methods or namespaces can be called are specified in method_arr.
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new FBMLCanvasSession(Constants.WebApplicationKey, Constants.WebSecret));
            api.Session.UserId = Constants.UserId;
            var method_arr = new List&lt;string&gt; { "admin" };
            var result = api.Permissions.GrantApiAccess(Constants.WebApplicationKey2, method_arr);
            </code>
            </example>
            <param name="apiKeyGrantedAccess">The API key for the application that is being granted access.</param>
            <param name="method_arr">JSON array of methods and/or namespaces for which the access is granted. If this is not specified, access to all allowed methods is granted.</param>
            <returns>The method returns a bool value indicating whether the call succeeded or failed. </returns>
            <remarks>The only namespace that can be granted access at this time is admin. </remarks>
        </member>
        <member name="M:Facebook.Rest.Permissions.CheckAvailableApiAccess(System.String)">
            <summary>
            This method returns the API methods to which access has been granted by the specified application. 
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new FBMLCanvasSession(Constants.WebApplicationKey, Constants.WebSecret));
            api.Session.UserId = Constants.UserId;
            var result = api.Permissions.CheckAvailableApiAccess(Constants.WebApplicationKey2);
            </code>
            </example>
            <param name="permissions_apikey">The API key of the application for which the check is being done.</param>
            <returns>The method returns an array of strings listing all methods/namespaces for which access is available.</returns>
        </member>
        <member name="M:Facebook.Rest.Permissions.RevokeApiAccess(System.String)">
            <summary>
            This method revokes the API access granted to the specified application.
            </summary>
            <example>
            <code>
            Api api = new Api(new FBMLCanvasSession(Constants.WebApplicationKey, Constants.WebSecret));
            api.Session.UserId = Constants.UserId;
            var result = api.Permissions.RevokeApiAccess(Constants.WebApplicationKey2);
            </code>
            </example>
            <param name="permissions_apikey">The API key for the target application.</param>
            <returns>The method returns a bool value indicating whether the call succeeded or failed.</returns>
        </member>
        <member name="M:Facebook.Rest.Permissions.CheckGrantedApiAccess(System.String)">
            <summary>
            This method returns the API methods to which the specified application has been given access.
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new FBMLCanvasSession(Constants.WebApplicationKey, Constants.WebSecret));
            api.Session.UserId = Constants.UserId;
            var result = api.Permissions.CheckGrantedApiAccess(Constants.WebApplicationKey2);
            </code>
            </example>
            <param name="permissions_apikey">The API key of the application for which the check is being done.</param>
            <returns>The method returns a List of strings listing all methods/namespaces for which access has been granted.</returns>
        </member>
        <member name="M:Facebook.Rest.Permissions.GrantApiAccessAsync(System.String,System.Collections.Generic.List{System.String},Facebook.Rest.Permissions.GrantApiAccessCallback,System.Object)">
             <summary>
             This method gives another application access to certain API calls on behalf of the application calling it. The application granted access is specified by permissions_apikey. Which methods or namespaces can be called are specified in method_arr.
             </summary>
             <example>
             <code>
             private static void RunDemoAsync()
             {
                 FacebookApi api = new FacebookApi(new FBMLCanvasSession(Constants.WebApplicationKey, Constants.WebSecret));
                 api.Session.UserId = Constants.UserId;
                 api.Session.UserId = Constants.UserId;
                 var method_arr = new List&lt;string&gt; { "admin" };
                 api.Permissions.GrantApiAccessAsync(Constants.WebApplicationKey2, method_arr, AsyncDemoCompleted, null);
             }
            
             private static void AsyncDemoCompleted(bool result, Object state, FacebookException e)
             {
                 var actual = result;
             }
             </code>
             </example>
             <param name="apiKeyGrantedAccess">The API key for the application that is being granted access.</param>
             <param name="method_arr">JSON array of methods and/or namespaces for which the access is granted. If this is not specified, access to all allowed methods is granted.</param>
             <param name="callback">The AsyncCallback delegate</param>
             <param name="state">An object containing state information for this asynchronous request</param>        
             <returns>The method returns a bool value indicating whether the call succeeded or failed. </returns>
             <remarks>The only namespace that can be granted access at this time is admin. </remarks>
        </member>
        <member name="M:Facebook.Rest.Permissions.CheckAvailableApiAccessAsync(System.String,Facebook.Rest.Permissions.CheckAvailableApiAccessCallback,System.Object)">
             <summary>
             This method returns the API methods to which access has been granted by the specified application. 
             </summary>
             <example>
             <code>
             private static void RunDemoAsync()
             {
                 FacebookApi api = new FacebookApi(new FBMLCanvasSession(Constants.WebApplicationKey, Constants.WebSecret));
                 api.Session.UserId = Constants.UserId;
                 api.Permissions.CheckAvailableApiAccessAsync(Constants.WebApplicationKey2, AsyncDemoCompleted, null);
             }
            
             private static void AsyncDemoCompleted(IList&lt;string&gt; result, Object state, FacebookException e)
             {
                 var actual = result;
             }
             </code>
             </example>
             <param name="permissions_apikey">The API key of the application for which the check is being done.</param>
             <param name="callback">The AsyncCallback delegate</param>
             <param name="state">An object containing state information for this asynchronous request</param>        
             <returns>The method returns an array of strings listing all methods/namespaces for which access is available.</returns>
        </member>
        <member name="M:Facebook.Rest.Permissions.RevokeApiAccessAsync(System.String,Facebook.Rest.Permissions.RevokeApiAccessCallback,System.Object)">
             <summary>
             This method revokes the API access granted to the specified application.
             </summary>
             <example>
             <code>
             private static void RunDemoAsync()
             {
                 FacebookApi api = new FacebookApi(new FBMLCanvasSession(Constants.WebApplicationKey, Constants.WebSecret));
                 api.Session.UserId = Constants.UserId;
                 api.Permissions.RevokeApiAccessAsync(Constants.WebApplicationKey2, AsyncDemoCompleted, null);
             }
            
             private static void AsyncDemoCompleted(bool result, Object state, FacebookException e)
             {
                 var actual = result;
             }
             </code>
             </example>
             <param name="permissions_apikey">The API key for the target application.</param>
             <param name="callback">The AsyncCallback delegate</param>
             <param name="state">An object containing state information for this asynchronous request</param>        
             <returns>The method returns a bool value indicating whether the call succeeded or failed.</returns>
        </member>
        <member name="M:Facebook.Rest.Permissions.CheckGrantedApiAccessAsync(System.String,Facebook.Rest.Permissions.CheckGrantedApiAccessCallback,System.Object)">
             <summary>
             This method returns the API methods to which the specified application has been given access.
             </summary>
             <example>
             <code>
             private static void RunDemoAsync()
             {
                 FacebookApi api = new FacebookApi(new FBMLCanvasSession(Constants.WebApplicationKey, Constants.WebSecret));
                 api.Session.UserId = Constants.UserId;
                 api.Permissions.CheckGrantedApiAccessAsync(Constants.WebApplicationKey2, AsyncDemoCompleted, null);
             }
            
             private static void AsyncDemoCompleted(IList&lt;string&gt; result, Object state, FacebookException e)
             {
                 var actual = result;
             }
             </code>
             </example>
             <param name="permissions_apikey">The API key of the application for which the check is being done.</param>
             <param name="callback">The AsyncCallback delegate</param>
             <param name="state">An object containing state information for this asynchronous request</param>        
             <returns>The method returns a List of strings listing all methods/namespaces for which access has been granted.</returns>
        </member>
        <member name="M:Facebook.Rest.Permissions.BeginPermissionsMode(System.String)">
            <summary>
            Toggles Permissions Mode to Active.
            </summary>
            <param name="callAsApiKey"></param>
        </member>
        <member name="M:Facebook.Rest.Permissions.EndPermissionsMode(System.String)">
            <summary>
            /// Toggles Permissions Mode to Inactive.
            </summary>
            <param name="callAsApiKey"></param>
        </member>
        <member name="T:Facebook.Rest.Permissions.GrantApiAccessCallback">
            <summary>
            Delegate called when GrantApiAccess call is completed.
            </summary>
            <param name="result">boolean result.</param>
            <param name="state">An object containing state information for this asynchronous request.</param>
            <param name="e">Exception object, if the call resulted in exception.</param>
        </member>
        <member name="T:Facebook.Rest.Permissions.CheckAvailableApiAccessCallback">
            <summary>
            Delegate called when CheckAvailableApiAccess call is completed.
            </summary>
            <param name="accessibleMethods">IList of accessible method strings.</param>
            <param name="state">An object containing state information for this asynchronous request.</param>
            <param name="e">Exception object, if the call resulted in exception.</param>
        </member>
        <member name="T:Facebook.Rest.Permissions.RevokeApiAccessCallback">
            <summary>
            Delegate called when RevokeApiAccess call is completed.
            </summary>
            <param name="result">boolean result.</param>
            <param name="state">An object containing state information for this asynchronous request.</param>
            <param name="e">Exception object, if the call resulted in exception.</param>
        </member>
        <member name="T:Facebook.Rest.Permissions.CheckGrantedApiAccessCallback">
            <summary>
            Delegate called when CheckGrantedApiAccess call is completed.
            </summary>
            <param name="accessibleMethods">IList of accessible method strings.</param>
            <param name="state">An object containing state information for this asynchronous request.</param>
            <param name="e">Exception object, if the call resulted in exception.</param>
        </member>
        <member name="T:Facebook.Rest.Fbml">
            <summary>
            Facebook Fbml API methods.
            </summary>
        </member>
        <member name="M:Facebook.Rest.Fbml.#ctor(Facebook.Session.IFacebookSession)">
            <summary>
            Public constructor for facebook.Fbml
            </summary>
            <param name="session">Needs a connected Facebook Session object for making requests</param>
        </member>
        <member name="M:Facebook.Rest.Fbml.RefreshImgSrc(System.String)">
            <summary>
            Fetches and re-caches the image stored at the given URL.
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
            var url = "http://facebook.claritycon.com/Tests/Clarity.jpg";
            var results = api.Fbml.RefreshImgSrc(url);
            </code>
            </example>
            <param name="url">The absolute URL from which to refresh the image.</param>
            <returns>This method returns 1 if Facebook found a cached version of your image and successfully refreshed the image. It returns a blank response if Facebook was unable to find any previously cached version to refresh, or the image was unable to be re-fetched from your site and cached successfully. In such instances, whatever images were cached before remain as they were cached.</returns>
        </member>
        <member name="M:Facebook.Rest.Fbml.RefreshRefUrl(System.String)">
            <summary>
            Fetches and re-caches the content stored at the given URL.
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
            var url = "http://facebook.claritycon.com/Tests/FBML.html";
            var results = api.Fbml.RefreshRefUrl(url);
            </code>
            </example>
            <param name="url">The absolute URL from which to fetch content. This URL should be used in a fb:ref FBML tag.</param>
            <returns>This method returns true if the content was fetched and re-cached from the specified URL.</returns>
        </member>
        <member name="M:Facebook.Rest.Fbml.SetRefHandle(System.String,System.String)">
            <summary>
            Associates a given "handle" with FBML markup so that the handle can be used within the fb:ref FBML tag.
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new FBMLCanvasSession(Constants.WebApplicationKey, Constants.WebSecret));
            api.Session.UserId = Constants.UserId;
            string handle = "my handle";
            string fbml = "dummy fbml";
            var results = api.Fbml.SetRefHandle(handle, fbml);
            </code>
            </example>
            <param name="handle">The handle to associate with the given FBML.</param>
            <param name="fbml">The FBML to associate with the given handle.</param>
            <returns>This method returns true if the given handle was associated with FBML markup.</returns>
        </member>
        <member name="M:Facebook.Rest.Fbml.UploadNativeStrings(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Lets you insert text strings into the Facebook Translations database so they can be translated.
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new FBMLCanvasSession(Constants.WebApplicationKey, Constants.WebSecret));
            api.Session.UserId = Constants.UserId;
            var native_strings = new Dictionary&lt;string, string&gt; { { "text", "(Testing uploadNativeStrings) Do you want to add a friend?" }, { "description", "text string in a popup dialog" } };
            var results = api.Fbml.UploadNativeStrings(native_strings);
            </code>
            </example>
            <param name="native_strings">A collection of strings to translate. Each element of the collection is an object, with 'text' storing the actual string, 'description' storing the description of the text.</param>
            <returns>If successful, this method returns the number of strings uploaded.</returns>
        </member>
        <member name="M:Facebook.Rest.Fbml.DeleteCustomTags(System.Collections.Generic.List{System.String})">
            <summary>
            Deletes one or more custom tags you previously registered for the calling application with fbml.registerCustomTags.
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new FBMLCanvasSession(Constants.WebApplicationKey, Constants.WebSecret));
            api.Session.UserId = Constants.UserId;
            List&lt;string&gt; tags = new List&lt;string&gt; { "video", "gallery" };
            var results = api.Fbml.DeleteCustomTags(tags);
            </code>
            </example>
            <param name="names">A List of strings containing the names of the tags you want to delete. If this attribute is missing, all the application's custom tags will be deleted.</param>
            <returns>This method returns true if custom tag deletes were successful.</returns>
        </member>
        <member name="M:Facebook.Rest.Fbml.GetCustomTags">
            <summary>
            Returns the custom tag definitions for tags that were previously defined using fbml.registerCustomTags.
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new FBMLCanvasSession(Constants.WebApplicationKey, Constants.WebSecret));
            api.Session.UserId = Constants.UserId;
            var results = api.Fbml.GetCustomTags();
            </code>
            </example>
            <returns>This method returns the custom tag definitions for previously defined tags.</returns>
        </member>
        <member name="M:Facebook.Rest.Fbml.GetCustomTags(System.String)">
            <summary>
            Returns the custom tag definitions for tags that were previously defined using fbml.registerCustomTags.
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new FBMLCanvasSession(Constants.WebApplicationKey, Constants.WebSecret));
            api.Session.UserId = Constants.UserId;
            var results = api.Fbml.GetCustomTags(Constants.OtherApplicationId);
            </code>
            </example>
            <param name="app_id">The ID of the application whose custom tags you want to get. If the ID is the calling application's ID, all the application's custom tags are returned. Otherwise, only the application's public custom tags are returned</param>
            <returns>This method returns the custom tag definitions for previously defined tags.</returns>
        </member>
        <member name="M:Facebook.Rest.Fbml.RegisterCustomTags(System.Collections.Generic.List{Facebook.Rest.CustomTag})">
             <summary>
             Registers custom tags you can include in your that applications' FBML markup. Custom tags consist of FBML snippets that are rendered during parse time on the containing page that references the custom tag.
             </summary>
             <example>
             <code>
             FacebookApi api = new FacebookApi(new FBMLCanvasSession(Constants.WebApplicationKey, Constants.WebSecret));
             List&lt;CustomTag&gt; tags = new List&lt;CustomTag&gt;();
             tags.Add(new CustomTag()
                 {
                     Name="video",
                     Type="leaf",
                     Description="Renders a fb:swf tag that shows a video from my-video-site.tv. The video  is 425 pixels wide and 344 pixels tall.",
                     Attributes=new List&lt;CustomTagAttribute&gt;(){new CustomTagAttribute(){Name="id",Description="the id of the video",DefaultValue="1234"}},
                     FBML="&lt;div class=\"my_videos_element\"&gt;&lt;fb:swf swfsrc=\"http://my-video-site.tv/videos/${id}\" width=\"425\" height=\"344\"/&gt;&lt;/div&gt;",
                     HeaderFBML="&lt;style&gt;div.my_videos_element { border: black solid 1px; padding: 5px;}&lt;/style&gt;"
                 });
            
             tags.Add(new CustomTag()
                 {
                     Name = "gallery",
                     Type = "container",
                     Description = "Renders a standard header and footer around one or more \"video\" tags. The header contains the gallery's title, which the user can specify",
                     Attributes = new List&lt;CustomTagAttribute&gt;() { new CustomTagAttribute() { Name = "title", Description = "the title of the gallery" } },
                     OpenTagFBML = "&lt;div class=\"my_videos_element\"&gt;&lt;div class=\"video_gallery_title\"&gt;${title}&lt;/div&gt;&lt;div class=\"my_videos_gallery\"&gt;",
                     CloseTagFBML = "&lt;/div&gt;&lt;/div&gt;",
                     HeaderFBML = "&lt;style&gt;div.my_videos_element { border: black solid 1px; padding: 5px;}&lt;/style&gt;"
                 });
             
             var results = api.Fbml.RegisterCustomTags(tags);
             </code>
             </example>
             <param name="tags">a List of CustomTag objects (See remarks for more detail.)</param>
             <returns>This method returns the identifier of the custom tag.</returns>
             <remarks>
             Each tag object is an object with the following properties:
               name (required) (string): the name of the tag. The name must be a string up to 30 characters. Only letters, numbers, underscores ('_') and hyphens ('-') are allowed.
               type (optional) (string): Specify either leaf or container. Leaf tags can't contain any other tags (similar to &lt;fb:name/&gt;). Container tags may contain children between their open and close tags (like &lt;fb:editor&gt; &lt;/fb:editor&gt;). (Default value is leaf.).
               description (optional) (string): A full description of the tag's functionality. This is used for documentation only, and is especially useful for public tags.
               is_public (optional) (string): Specify either true or false. Specifying true indicates that other applications can use this tag. You can have a mix of public and private tags within the same array. (Default value is false.).
               attributes (optional) (mixed): A list of attribute objects. Attributes are used to add dynamic elements to tags. The values of those attributes are substituted into the tag's FBML before it's parsed. Each attribute has the following fields:
               name (required) (string): The attribute's name. The name must be a string up to 30 characters in length. Only letters, numbers, underscores ('_') and hyphens ('-') are allowed.
               description (optional) (string): The attribute's description. This is used for documentation only, and is especially useful for public tags.
               default_value (optional) (string): The value to use when the attribute is missing. If an attribute doesn't have a default value, it is considered to be required and the developer will see an error message if the attribute is missing.
               fbml (required) (string): The FBML markup to substitute into the page where the tag is encountered. This property is required only for leaf tags.
               open_tag_fbml (required) (string): The FBML markup to substitute into the page where the open tag appears. This property is required for container tags only.
               close_tag_fbml (required) (string): The FBML markup to substitute into the page where the close tag appears. This property is required for container tags only. Note: Facebook recommends you do not include &lt;script&gt; tags in this FBML snippet.
               header_fbml: An FBML snippet that is rendered once on the page before the first tag that defined it. If multiple tags define the same value for header_fbml, and more than one of them appear on a page, then header_fbml is rendered only once. You should only use this for including CSS and initializing any JavaScript variables, not for rendering visible content. Facebook recommends you avoid including heavy JavaScript libraries and performing expensive JavaScript operations in header_fbml for performance reasons. Instead, use footer_fbml.
               footer_fbml: Similar to header_fbml, it's an FBML snippet that gets rendered after all custom tags are rendered. Facebook recommends you include heavy JavaScript libraries and perform any expensive JavaScript operations in footer_fbml, and avoid them in fbml, open_tag_fbml, close_tag_fbml, and header_fbml.
             </remarks>
        </member>
        <member name="M:Facebook.Rest.Fbml.DeleteCustomTagsAsync(System.Collections.Generic.List{System.String},Facebook.Rest.Fbml.DeleteCustomTagsCallback,System.Object)">
             <summary>
             Deletes one or more custom tags you previously registered for the calling application with fbml.registerCustomTags.
             </summary>
             <example>
             <code>
             private static void RunDemoAsync()
             {
                 FacebookApi api = new FacebookApi(new FBMLCanvasSession(Constants.WebApplicationKey, Constants.WebSecret));
                 api.Session.UserId = Constants.UserId;
                 List&lt;string&gt; tags = new List&lt;string&gt; { "video", "gallery" };
                 api.Fbml.DeleteCustomTagsAsync(tags, AsyncDemoCompleted, null);
             }
            
             private static void AsyncDemoCompleted(bool result, Object state, FacebookException e)
             {
                 var actual = result;
             }
             </code>
             </example>
             <param name="names">A List of strings containing the names of the tags you want to delete. If this attribute is missing, all the application's custom tags will be deleted.</param>
             <param name="callback">The AsyncCallback delegate</param>
             <param name="state">An object containing state information for this asynchronous request</param>        
             <returns>This method returns true if custom tag deletes were successful.</returns>
        </member>
        <member name="M:Facebook.Rest.Fbml.GetCustomTagsAsync(Facebook.Rest.Fbml.GetCustomTagsCallback,System.Object)">
             <summary>
             Returns the custom tag definitions for tags that were previously defined using fbml.registerCustomTags.
             </summary>
             <example>
             <code>
             private static void RunDemoAsync()
             {
                 FacebookApi api = new FacebookApi(new FBMLCanvasSession(Constants.WebApplicationKey, Constants.WebSecret));
                 api.Session.UserId = Constants.UserId;
                 api.Fbml.GetCustomTagsAsync(AsyncDemoCompleted, null);
             }
            
             private static void AsyncDemoCompleted(IList&lt;custom_tag&gt; result, Object state, FacebookException e)
             {
                 var actual = result;
             }
             </code>
             </example>
             <param name="callback">The AsyncCallback delegate</param>
             <param name="state">An object containing state information for this asynchronous request</param>        
             <returns>This method returns the custom tag definitions for previously defined tags.</returns>
        </member>
        <member name="M:Facebook.Rest.Fbml.GetCustomTagsAsync(System.String,Facebook.Rest.Fbml.GetCustomTagsCallback,System.Object)">
             <summary>
             Returns the custom tag definitions for tags that were previously defined using fbml.registerCustomTags.
             </summary>
             <example>
             <code>
             private static void RunDemoAsync()
             {
                 FacebookApi api = new FacebookApi(new FBMLCanvasSession(Constants.WebApplicationKey, Constants.WebSecret));
                 api.Session.UserId = Constants.UserId;
                 api.Fbml.GetCustomTagsAsync(Constants.OtherApplicationId, AsyncDemoCompleted, null);
             }
            
             private static void AsyncDemoCompleted(IList&lt;custom_tag&gt; result, Object state, FacebookException e)
             {
                 var actual = result;
             }
             </code>
             </example>
             <param name="app_id">The ID of the application whose custom tags you want to get. If the ID is the calling application's ID, all the application's custom tags are returned. Otherwise, only the application's public custom tags are returned</param>
             <param name="callback">The AsyncCallback delegate</param>
             <param name="state">An object containing state information for this asynchronous request</param>        
             <returns>This method returns the custom tag definitions for previously defined tags.</returns>
        </member>
        <member name="M:Facebook.Rest.Fbml.RegisterCustomTagsAsync(System.Collections.Generic.List{Facebook.Rest.CustomTag},Facebook.Rest.Fbml.RegisterCustomTagsCallback,System.Object)">
             <summary>
             Registers custom tags you can include in your that applications' FBML markup. Custom tags consist of FBML snippets that are rendered during parse time on the containing page that references the custom tag.
             </summary>
             <example>
             <code>
             private static void RunDemoAsync()
             {
                 FacebookApi api = new FacebookApi(new FBMLCanvasSession(Constants.WebApplicationKey, Constants.WebSecret));
                 api.Session.UserId = Constants.UserId;
            
                 List&lt;CustomTag&gt; tags = new List&lt;CustomTag&gt;();
                 tags.Add(new CustomTag()
                 {
                     Name = "video",
                     Type = "leaf",
                     Description = "Renders a fb:swf tag that shows a video from my-video-site.tv. The video  is 425 pixels wide and 344 pixels tall.",
                     Attributes = new List&lt;CustomTagAttribute&gt;() { new CustomTagAttribute() { Name = "id", Description = "the id of the video", DefaultValue = "1234" } },
                     FBML = "&lt;div class=\"my_videos_element\"&gt;&lt;fb:swf swfsrc=\"http://my-video-site.tv/videos/${id}\" width=\"425\" height=\"344\"/&gt;&lt;/div&gt;",
                     HeaderFBML = "&lt;style&gt;div.my_videos_element { border: black solid 1px; padding: 5px;}&lt;/style&gt;"
                 });
            
                 tags.Add(new CustomTag()
                 {
                     Name = "gallery",
                     Type = "container",
                     Description = "Renders a standard header and footer around one or more \"video\" tags. The header contains the gallery's title, which the user can specify",
                     Attributes = new List&lt;CustomTagAttribute&gt;() { new CustomTagAttribute() { Name = "title", Description = "the title of the gallery" } },
                     OpenTagFBML = "&lt;div class=\"my_videos_element\"&gt;&lt;div class=\"video_gallery_title\"&gt;${title}&lt;/div&gt;&lt;div class=\"my_videos_gallery\"&gt;",
                     CloseTagFBML = "&lt;/div&gt;&lt;/div&gt;",
                     HeaderFBML = "&lt;style&gt;div.my_videos_element { border: black solid 1px; padding: 5px;}&lt;/style&gt;"
                 });
            
                 api.Fbml.RegisterCustomTagsAsync(tags, AsyncDemoCompleted, null);
             }
            
             private static void AsyncDemoCompleted(int result, Object state, FacebookException e)
             {
                 var actual = result;
             }
             </code>
             </example>
             <param name="tags">a List of CustomTag objects (See remarks for more detail.)</param>
             <param name="callback">The AsyncCallback delegate</param>
             <param name="state">An object containing state information for this asynchronous request</param>        
             <returns>This method returns the identifier of the custom tag.</returns>
             <remarks>
             Each tag object is an object with the following properties:
               name (required) (string): the name of the tag. The name must be a string up to 30 characters. Only letters, numbers, underscores ('_') and hyphens ('-') are allowed.
               type (optional) (string): Specify either leaf or container. Leaf tags can't contain any other tags (similar to &lt;fb:name/&gt;). Container tags may contain children between their open and close tags (like &lt;fb:editor&gt; &lt;/fb:editor&gt;). (Default value is leaf.).
               description (optional) (string): A full description of the tag's functionality. This is used for documentation only, and is especially useful for public tags.
               is_public (optional) (string): Specify either true or false. Specifying true indicates that other applications can use this tag. You can have a mix of public and private tags within the same array. (Default value is false.).
               attributes (optional) (mixed): A list of attribute objects. Attributes are used to add dynamic elements to tags. The values of those attributes are substituted into the tag's FBML before it's parsed. Each attribute has the following fields:
               name (required) (string): The attribute's name. The name must be a string up to 30 characters in length. Only letters, numbers, underscores ('_') and hyphens ('-') are allowed.
               description (optional) (string): The attribute's description. This is used for documentation only, and is especially useful for public tags.
               default_value (optional) (string): The value to use when the attribute is missing. If an attribute doesn't have a default value, it is considered to be required and the developer will see an error message if the attribute is missing.
               fbml (required) (string): The FBML markup to substitute into the page where the tag is encountered. This property is required only for leaf tags.
               open_tag_fbml (required) (string): The FBML markup to substitute into the page where the open tag appears. This property is required for container tags only.
               close_tag_fbml (required) (string): The FBML markup to substitute into the page where the close tag appears. This property is required for container tags only. Note: Facebook recommends you do not include &lt;script&gt; tags in this FBML snippet.
               header_fbml: An FBML snippet that is rendered once on the page before the first tag that defined it. If multiple tags define the same value for header_fbml, and more than one of them appear on a page, then header_fbml is rendered only once. You should only use this for including CSS and initializing any JavaScript variables, not for rendering visible content. Facebook recommends you avoid including heavy JavaScript libraries and performing expensive JavaScript operations in header_fbml for performance reasons. Instead, use footer_fbml.
               footer_fbml: Similar to header_fbml, it's an FBML snippet that gets rendered after all custom tags are rendered. Facebook recommends you include heavy JavaScript libraries and perform any expensive JavaScript operations in footer_fbml, and avoid them in fbml, open_tag_fbml, close_tag_fbml, and header_fbml.
             </remarks>
        </member>
        <member name="M:Facebook.Rest.Fbml.RefreshImgSrcAsync(System.String,Facebook.Rest.Fbml.RefreshImgSrcCallback,System.Object)">
             <summary>
             Fetches and re-caches the image stored at the given URL.
             </summary>
             <example>
             <code>
             private static void RunDemoAsync()
             {
                 FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
                 var url = "http://facebook.claritycon.com/Tests/Clarity.jpg";
                 api.Fbml.RefreshImgSrcAsync(url, AsyncDemoCompleted, null);
             }
            
             private static void AsyncDemoCompleted(IList&lt;fql_result&gt; result, Object state, FacebookException e)
             {
                 var actual = result;
             }
             </code>
             </example>
             <param name="url">The absolute URL from which to refresh the image.</param>
             <param name="callback">The AsyncCallback delegate</param>
             <param name="state">An object containing state information for this asynchronous request</param>        
             <returns>This method returns 1 if Facebook found a cached version of your image and successfully refreshed the image. It returns a blank response if Facebook was unable to find any previously cached version to refresh, or the image was unable to be re-fetched from your site and cached successfully. In such instances, whatever images were cached before remain as they were cached.</returns>
        </member>
        <member name="M:Facebook.Rest.Fbml.RefreshRefUrlAsync(System.String,Facebook.Rest.Fbml.RefreshRefUrlCallback,System.Object)">
             <summary>
             Fetches and re-caches the content stored at the given URL.
             </summary>
             <example>
             <code>
             private static void RunDemoAsync()
             {
                 FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
                 var url = "http://facebook.claritycon.com/Tests/FBML.html";
                 api.Fbml.RefreshRefUrlAsync(url, AsyncDemoCompleted, null);
             }
            
             private static void AsyncDemoCompleted(bool result, Object state, FacebookException e)
             {
                 var actual = result;
             }
             </code>
             </example>
             <param name="url">The absolute URL from which to fetch content. This URL should be used in a fb:ref FBML tag.</param>
             <param name="callback">The AsyncCallback delegate</param>
             <param name="state">An object containing state information for this asynchronous request</param>        
             <returns>This method returns true if the content was fetched and re-cached from the specified URL.</returns>
        </member>
        <member name="M:Facebook.Rest.Fbml.SetRefHandleAsync(System.String,System.String,Facebook.Rest.Fbml.SetRefHandleCallback,System.Object)">
             <summary>
             Associates a given "handle" with FBML markup so that the handle can be used within the fb:ref FBML tag.
             </summary>
             <example>
             <code>
             private static void RunDemoAsync()
             {
                 FacebookApi api = new FacebookApi(new FBMLCanvasSession(Constants.WebApplicationKey, Constants.WebSecret));
                 api.Session.UserId = Constants.UserId;
                 string handle = "my handle";
                 string fbml = string.Format("&lt;fb:switch&gt;&lt;fb:profile-pic uid=\"{0}\" /&gt;&lt;fb:default&gt;Unable to show profile pic&lt;/fb:default&gt;&lt;/fb:switch&gt;", Constants.UserId);
                 api.Fbml.SetRefHandleAsync(handle, fbml, AsyncDemoCompleted, null);
             }
            
             private static void AsyncDemoCompleted(bool result, Object state, FacebookException e)
             {
                 var actual = result;
             }
             </code>
             </example>
             <param name="handle">The handle to associate with the given FBML.</param>
             <param name="fbml">The FBML to associate with the given handle.</param>
             <param name="callback">The AsyncCallback delegate</param>
             <param name="state">An object containing state information for this asynchronous request</param>        
             <returns>This method returns true if the given handle was associated with FBML markup.</returns>
        </member>
        <member name="M:Facebook.Rest.Fbml.UploadNativeStringsAsync(System.Collections.Generic.Dictionary{System.String,System.String},Facebook.Rest.Fbml.UploadNativeStringsCallback,System.Object)">
             <summary>
             Lets you insert text strings into the Facebook Translations database so they can be translated.
             </summary>
             <example>
             <code>
             private static void RunDemoAsync()
             {
                 FacebookApi api = new FacebookApi(new FBMLCanvasSession(Constants.WebApplicationKey, Constants.WebSecret));
                 api.Session.UserId = Constants.UserId;
                 var native_strings = new Dictionary&lt;string, string&gt; { { "text", "(Testing uploadNativeStrings) Do you want to add a friend?" }, { "description", "text string in a popup dialog" } };
                 api.Fbml.UploadNativeStringsAsync(native_strings, AsyncDemoCompleted, null);
             }
            
             private static void AsyncDemoCompleted(bool result, Object state, FacebookException e)
             {
                 var actual = result;
             }
             </code>
             </example>
             <param name="native_strings">A collection of strings to translate. Each element of the collection is an object, with 'text' storing the actual string, 'description' storing the description of the text.</param>
             <param name="callback">The AsyncCallback delegate</param>
             <param name="state">An object containing state information for this asynchronous request</param>        
             <returns>If successful, this method returns the number of strings uploaded.</returns>
        </member>
        <member name="T:Facebook.Rest.Fbml.DeleteCustomTagsCallback">
            <summary>
            Delegate called when DeleteFbmlCustomTags call completed
            </summary>
            <param name="result">result of operation</param>
            <param name="state">An object containing state information for this asynchronous request</param>
            <param name="e">Exception object, if the call resulted in exception.</param>
        </member>
        <member name="T:Facebook.Rest.Fbml.GetCustomTagsCallback">
            <summary>
            Delegate called when GetFbmlCustomTags call completed
            </summary>
            <param name="tags">List of custom_tag objects</param>
            <param name="state">An object containing state information for this asynchronous request</param>
            <param name="e">Exception object, if the call resulted in exception.</param>
        </member>
        <member name="T:Facebook.Rest.Fbml.RegisterCustomTagsCallback">
            <summary>
            Delegate called when RegisterFbmlCustomTags call completed
            </summary>
            <param name="result">result of operation</param>
            <param name="state">An object containing state information for this asynchronous request</param>
            <param name="e">Exception object, if the call resulted in exception.</param>
        </member>
        <member name="T:Facebook.Rest.Fbml.RefreshImgSrcCallback">
            <summary>
            Delegate called when RefreshFbmlImgSrc call completed
            </summary>
            <param name="result">result of operation</param>
            <param name="state">An object containing state information for this asynchronous request</param>
            <param name="e">Exception object, if the call resulted in exception.</param>
        </member>
        <member name="T:Facebook.Rest.Fbml.RefreshRefUrlCallback">
            <summary>
            Delegate called when RefreshFbmlRefUrl call completed
            </summary>
            <param name="result">result of operation</param>
            <param name="state">An object containing state information for this asynchronous request</param>
            <param name="e">Exception object, if the call resulted in exception.</param>
        </member>
        <member name="T:Facebook.Rest.Fbml.SetRefHandleCallback">
            <summary>
            Delegate called when SetFbmlRefHandle call completed
            </summary>
            <param name="result">result of operation</param>
            <param name="state">An object containing state information for this asynchronous request</param>
            <param name="e">Exception object, if the call resulted in exception.</param>
        </member>
        <member name="T:Facebook.Rest.Fbml.UploadNativeStringsCallback">
            <summary>
            Delegate called when UploadFbmlNativeStrings call completed
            </summary>
            <param name="result">result of operation</param>
            <param name="state">An object containing state information for this asynchronous request</param>
            <param name="e">Exception object, if the call resulted in exception.</param>
        </member>
        <member name="T:Facebook.Rest.CustomTag">
            <summary>
            Contains the different parts of a Facebook feed template.
            </summary>
        </member>
        <member name="P:Facebook.Rest.CustomTag.Name">
            <summary>
            </summary>
        </member>
        <member name="P:Facebook.Rest.CustomTag.Type">
            <summary>
            </summary>
        </member>
        <member name="P:Facebook.Rest.CustomTag.Description">
            <summary>
            </summary>
        </member>
        <member name="P:Facebook.Rest.CustomTag.IsPublic">
            <summary>
            </summary>
        </member>
        <member name="P:Facebook.Rest.CustomTag.Attributes">
            <summary>
            </summary>
        </member>
        <member name="P:Facebook.Rest.CustomTag.FBML">
            <summary>
            </summary>
        </member>
        <member name="P:Facebook.Rest.CustomTag.OpenTagFBML">
            <summary>
            </summary>
        </member>
        <member name="P:Facebook.Rest.CustomTag.CloseTagFBML">
            <summary>
            </summary>
        </member>
        <member name="P:Facebook.Rest.CustomTag.HeaderFBML">
            <summary>
            </summary>
        </member>
        <member name="P:Facebook.Rest.CustomTag.FooterFBML">
            <summary>
            </summary>
        </member>
        <member name="T:Facebook.Rest.CustomTagAttribute">
            <summary>
            CustomTagAttribute object.
            </summary>
        </member>
        <member name="P:Facebook.Rest.CustomTagAttribute.Name">
            <summary>
            </summary>
        </member>
        <member name="P:Facebook.Rest.CustomTagAttribute.DefaultValue">
            <summary>
            </summary>
        </member>
        <member name="P:Facebook.Rest.CustomTagAttribute.Description">
            <summary>
            </summary>
        </member>
        <member name="T:Facebook.Rest.Data">
            <summary>
            Facebook Data API methods.
            </summary>
        </member>
        <member name="M:Facebook.Rest.Data.#ctor(Facebook.Session.IFacebookSession)">
            <summary>
            Public constructor for facebook.Data
            </summary>
            <param name="session">Needs a connected Facebook Session object for making requests</param>
        </member>
        <member name="M:Facebook.Rest.Data.SetUserPreference(System.Int32,System.String)">
            <summary>
            Sets currently authenticated user's preference.
            </summary>
            <example>
            <code>
            
            </code>
            </example>
            <param name="pref_id">(0-201) Numeric identifier of this preference.</param>
            <param name="value">(max. 128 characters) Value of the preference to set. Set it to "0" or "" to remove this preference.</param>
            <remarks>
            Each preference is a string of maximum 128 characters and each of them has a numeric identifier ranged from 0 to 200. Therefore, every application can store up to 201 string values for each of its user.  
            To "remove" a preference, set it to 0 or empty string. Both "0" and "" are considered as "not present", and getPreference() call will not return them. To tell them from each other, one can use some serialization format. For example, "n:0" for zeros and "s:" for empty strings. 
            </remarks>
        </member>
        <member name="M:Facebook.Rest.Data.SetUserPreferences(System.Collections.Generic.List{System.String},System.Boolean)">
            <summary>
            Sets currently authenticated user's preferences in batch. Each preference is a string of maximum 128 characters and each of them has a numeric identifier ranged from 0 to 200. Therefore, every application can store up to 201 string values for each of its user. 
            </summary>
            <example>
            <code>
            
            </code>
            </example>
            <param name="values">Id-value pairs of preferences to set. Each id is an integer between 0 and 200 inclusively. Each value is a string with maximum length of 128 characters. Use "0" or "" to remove a preference.</param>
            <param name="replace">True to replace all existing preferences of this user; false to merge into existing preferences.</param>
            <remarks>To "remove" a preference, set it to 0 or empty string. Both "0" and "" are considered as "not present", and getPreference() call will not return them. To tell them from each other, one can use some serialization format. For example, "n:0" for zeros and "s:" for empty strings. </remarks>
        </member>
        <member name="M:Facebook.Rest.Data.GetUserPreference(System.Int32)">
            <summary>
            Gets currently authenticated user's preference. 
            </summary>
            <example>
            <code>
            
            </code>
            </example>
            <param name="pref_id">(0-200) Numeric identifier of the preference to get. </param>
            <returns>This method returns the value of the specified preference. Empty string if the preference was not set, or it was set to "0" or empty string before.</returns>
        </member>
        <member name="M:Facebook.Rest.Data.GetUserPreferences">
            <summary>
            Gets currently authenticated user's preferences. 
            </summary>
            <example>
            <code>
            
            </code>
            </example>
            <returns>This method returns a List of id-value pairs of preferences. For preferences that are set to 0 or empty strings, they will NOT show up in the returned map.</returns>
            <remarks>For return value:
            This is a problem if you identify the preferences by numbers on your machine. 
            If a user fills out preference 0, 1, 2, and 4, but neglects to fill out preference 3 (because it may be optional) --> The array returned by this function 
            will map preference 4 to 3. This preference will still be identified by 4 because each initial key in the returned array stores another array that would map 4 to the user preference, 
            but you may have to iterate through each array until you find this missing preference depending on how many preferences you have and how many are missing.
            </remarks>
        </member>
        <member name="M:Facebook.Rest.Data.CreateObjectType(System.String)">
            <summary>
            An object type is like a "table" in SQL terminology, or a "class" in object-oriented programming concepts. Each object type has a unique human-readable "name" that will be used to identify itself throughout the API. Each object type also has a list of properties that one has to define individually. Each property is like a "column" in an SQL table, or a "data member" in an object class. 
            </summary>
            <example>
            <code>
            
            </code>
            </example>
            <param name="name">Name of this new object type. This name needs to be unique among all object types and associations defined for this application. This name also needs to be a valid identifier, which is no longer than 32 characters, starting with a letter (a-z) and consisting of only small letters (a-z), numbers (0-9) and/or underscores. </param>
        </member>
        <member name="M:Facebook.Rest.Data.DropObjectType(System.String)">
            <summary>
            Remove a previously defined object type. This will also delete ALL objects of this type. This deletion is NOT reversible. 
            </summary>
            <example>
            <code>
            
            </code>
            </example>
            <param name="obj_type">Name of the object type to delete. This will also delete all objects that were created with the type. </param>
        </member>
        <member name="M:Facebook.Rest.Data.RenameObjectType(System.String,System.String)">
            <summary>
            Rename a previously defined object type. 
            </summary>
            <example>
            <code>
            
            </code>
            </example>
            <param name="obj_type">Previous name of the object type to rename. </param>
            <param name="new_name">New name to use. This name needs to be unique among all object types and associations defined for this application. This name also needs to be a valid identifier, which is no longer than 32 characters, starting with a letter (a-z) and consisting of only small letters (a-z), numbers (0-9) and/or underscores.</param>
        </member>
        <member name="M:Facebook.Rest.Data.DefineObjectProperty(System.String,System.String,System.Int32)">
            <summary>
            Add a new object property to an object type.
            </summary>
            <example>
            <code>
            
            </code>
            </example>
            <param name="obj_type">Object type to add a new property to. </param>
            <param name="prop_name">Name of the new property to add. This name needs to be a valid identifier, which is no longer than 32 characters, starting with a letter (a-z) and consisting of only small letters (a-z), numbers (0-9) and/or underscores. </param>
            <param name="prop_type">Type of the new property: 1 for integer, 2 for string (max. 255 characters), 3 for text blob (max. 64kb)</param>
        </member>
        <member name="M:Facebook.Rest.Data.UndefineObjectProperty(System.String,System.String)">
            <summary>
            Remove a previously defined property of an object type. This will remove ALL values of this property of ALL objects of this type. This removal is NOT reversible. 
            </summary>
            <example>
            <code>
            
            </code>
            </example>
            <param name="obj_type">Object type from which a property is removed. </param>
            <param name="prop_name">Name of the property to remove. </param>
        </member>
        <member name="M:Facebook.Rest.Data.RenameObjectProperty(System.String,System.String,System.String)">
            <summary>
            Rename a previously defined object property. 
            </summary>
            <example>
            <code>
            
            </code>
            </example>
            <param name="obj_type">Object type of the property to rename. </param>
            <param name="prop_name">Name of the property to change. </param>
            <param name="new_name">	New name to use. This name needs to be a valid identifier, which is no longer than 32 characters, starting with a letter (a-z) and consisting of only small letters (a-z), numbers (0-9) and/or underscores. </param>
        </member>
        <member name="M:Facebook.Rest.Data.GetObjectTypes">
            <summary>
            Get a list of all previously defined object types. 
            </summary>
            <example>
            <code>
            
            </code>
            </example>
            <returns>list of object type definitions, each of which has; name: name of object type; object_class: (reserved)</returns>
        </member>
        <member name="M:Facebook.Rest.Data.GetObjectType(System.String)">
            <summary>
            Get detailed definitions of an object type, including all its properties and their types. 
            </summary>
            <example>
            <code>
            
            </code>
            </example>
            <param name="obj_type">Object type to get definition about. </param>
            <returns>list of object property definitions, each of which has; name: name of property; data_type: type of property. 1 for integer, 2 for string (max. 255 characters), 3 for text blob (max. 64kb); index_type: (reserved)</returns>
        </member>
        <member name="M:Facebook.Rest.Data.CreateObject(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Create a new object.
            </summary>
            <example>
            <code>
            
            </code>
            </example>
            <param name="obj_type">Specifies which type of new object to create. </param>
            <param name="properties">Optional - Name-value pairs of properties this new object has. The parameters must be JSON encoded with double quoted property and value, i.e. {"name":"value"} </param>
            <returns>Numeric identifier (fbid) of newly created object. </returns>
        </member>
        <member name="M:Facebook.Rest.Data.UpdateObject(System.Int64,System.Collections.Generic.Dictionary{System.String,System.String},System.Boolean)">
            <summary>
            Update an object's properties. 
            </summary>
            <example>
            <code>
            
            </code>
            </example>
            <param name="obj_id">Numeric identifier (fbid) of the object to modify. </param>
            <param name="properties">Name-value pairs of new properties. </param>
            <param name="replace">True if replace all existing properties; false to merge into existing ones.</param>
        </member>
        <member name="M:Facebook.Rest.Data.DeleteObject(System.Int64)">
            <summary>
            Delete an object permanently. 
            </summary>
            <example>
            <code>
            
            </code>
            </example>
            <param name="obj_id">Numeric identifier (fbid) of the object to delete. </param>
        </member>
        <member name="M:Facebook.Rest.Data.DeleteObjects(System.Collections.Generic.List{System.Int64})">
            <summary>
            Delete multiple objects permanently. 
            </summary>
            <example>
            <code>
            
            </code>
            </example>
            <param name="obj_ids">A list of 64-bit integers that are numeric identifiers (fbids) of objects to delete.</param>
        </member>
        <member name="M:Facebook.Rest.Data.GetObject(System.Int64,System.Collections.Generic.List{System.String})">
            <summary>
            Get an object's properties.
            </summary>
            <example>
            <code>
            
            </code>
            </example>
            <param name="obj_id">Numeric identifier (fbid) of the object to query.</param>
            <param name="prop_names">Optional - A list of property names (strings) to selectively query a subset of object properties. If not specified, all properties will be returned.</param>
            <returns>An array of the values only (not the names) of specified properties of the object. </returns>
            <remarks>The second (index 1) is the object id (fbid); after that they will be properties you added yourself.</remarks>
        </member>
        <member name="M:Facebook.Rest.Data.GetObjects(System.Collections.Generic.List{System.Int64},System.Collections.Generic.List{System.String})">
            <summary>
            Get properties of multiple objects. 
            </summary>
            <example>
            <code>
            
            </code>
            </example>
            <param name="obj_ids">A list of 64-bit numeric identifiers (fbids) of objects to query. For example: [fbid1, fbid2] </param>
            <param name="prop_names">Optional - A list of property names (strings) to selectively query a subset of object properties. If not specified, all properties will be returned. </param>
            <returns>list of name-value pairs. </returns>
        </member>
        <member name="M:Facebook.Rest.Data.GetObjectProperty(System.Int64,System.String)">
            <summary>
            Get properties of multiple objects. 
            </summary>
            <example>
            <code>
            
            </code>
            </example>
            <param name="obj_id">A list of 64-bit numeric identifiers (fbids) of objects to query. For example: [fbid1, fbid2] </param>
            <param name="prop_name">Optional - A list of property names (strings) to selectively query a subset of object properties. If not specified, all properties will be returned. </param>
            <returns>list of name-value pairs. </returns>
        </member>
        <member name="M:Facebook.Rest.Data.SetObjectProperty(System.Int64,System.String,System.String)">
            <summary>
            Set a single property of an object. 
            </summary>
            <example>
            <code>
            
            </code>
            </example>
            <param name="obj_id">Object's numeric identifier (fbid).</param>
            <param name="prop_name">Property's name.</param>
            <param name="prop_value">Property's value.</param>
        </member>
        <member name="M:Facebook.Rest.Data.GetHashValue(System.String,System.String,System.String)">
            <summary>
            Get a property value by a hash key. 
            </summary>
            <example>
            <code>
            
            </code>
            </example>
            <param name="obj_type">Object's type. This is required, so that different object types may use the same hash keys for different objects. </param>
            <param name="key">Hash key (string object identifier) for locating the object. This is created by a call to Data.setHashValue. </param>
            <param name="prop_name">Name of the property to query. </param>
            <returns>string: property's value. Empty string will be returned (without any error), if object with the specified hash key was not found or created. </returns>
        </member>
        <member name="M:Facebook.Rest.Data.SetHashValue(System.String,System.String,System.String,System.String)">
            <summary>
            Set a property value by a hash key. 
            </summary>
            <example>
            <code>
            
            </code>
            </example>
            <param name="obj_type">Object's type. This is required so that different object types can use the same hash keys for different objects. </param>
            <param name="key">Hash key. This is a unique string chosen by the user that can be used to refer to the object in subsequent function calls. </param>
            <param name="value">Property's value to set. If the hash key exists, this will overwrite any previous value. </param>
            <param name="prop_name">Name of the property to set. </param>
            <returns>Numeric identifier (fbid) of the object. </returns>
        </member>
        <member name="M:Facebook.Rest.Data.IncHashValue(System.String,System.String,System.String,System.Int32)">
            <summary>
            Atomically increases a numeric property by a hash key. This is different than "setHashValue(getHashValue() + increment)", which has two API functions calls that are not atomically done (subject to race conditions with values overwritten by interleaved API calls). 
            </summary>
            <example>
            <code>
            
            </code>
            </example>
            <param name="obj_type">Object's type. This is required, so that different object types may use the same hash keys for different objects. </param>
            <param name="key">Hash key (string object identifier) for locating the object. </param>
            <param name="prop_name">Name of the property to set. </param>
            <param name="increment">Optional - Default is 1. Increments to add to current value, which is 0 if object was not found or created. Use negative number for decrements. </param>
            <returns>Property's value after incremented. </returns>
        </member>
        <member name="M:Facebook.Rest.Data.RemoveHashKey(System.String,System.String)">
            <summary>
            Delete an object by a hash key. 
            </summary>
            <example>
            <code>
            
            </code>
            </example>
            <param name="obj_type">Object's type. This is required, so that different object types may use the same hash keys for different objects. </param>
            <param name="key">Hash key (string object identifier) to remove. </param>
        </member>
        <member name="M:Facebook.Rest.Data.RemoveHashKeys(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Delete multiple objects by a list of hash keys. 
            </summary>
            <example>
            <code>
            
            </code>
            </example>
            <param name="obj_type">Object's type. This is required, so that different object types may use the same hash keys for different objects. </param>
            <param name="keys">A list of hash keys (string object identifier) to remove.</param>
        </member>
        <member name="M:Facebook.Rest.Data.DefineAssociation(System.String,System.Int32,Facebook.Schema.assoc_object_type,Facebook.Schema.assoc_object_type,System.Nullable{System.Boolean})">
            <summary>
            An object association is a directional relationship between two object identifiers. For example, Application Installation: user id => installed application ids; Marriage: husband => wife; Friendship: user id => friend user id; Gift: giver => receiver 
            Each association has at least 3 names that are required to describe it: name of the association itself: "installation", "marriage", "friendship", "gift". alias1, name of the first object identifier: "user id", "husband", "giver". alias2, name of the second object identifier: "application id", "wife", "friend user id", "receiver". 
            For some associations, we also need reverse direction for a lookup by the second object identifier. For examples, in "marriage" case, not only may we need to look up wife ids by husband ids, but we may also need to look up husband ids by wife ids. We call this a two-way association. Since "husband to wife" is not the same as "wife to husband", we call this a two-way asymmetric association.
            In some other two-way associations, backward association has the same meaning of forward association. For example, in "friendship", if "A is B's friend" then "B is A's friend" as well. We call these types of two-way associations symmetric. For a symmetric association, when "A to B" is added, we also add "B to A", so that a reverse lookup can find out exactly the same information. 
            </summary>
            <example>
            <code>
            
            </code>
            </example>
            <param name="name">Name of forward association to create. This name needs to be unique among all object types and associations defined for this application. This name also needs to be a valid identifier, which is no longer than 32 characters, starting with a letter (a-z) and consisting of only small letters (a-z), numbers (0-9) and/or underscores. </param>
            <param name="assoc_type">Type of this association:
            1: one-way association, where reverse lookup is not needed;
            2: two-way symmetric association, where a backward association (B to A) is always created when a forward association (A to B) is created.
            3: two-way asymmetric association, where a backward association (B to A) has different meaning than a forward association (A to B). </param>
            <param name="assoc_info1">Describes object identifier 1 in an association. This is a data structure that has:
            alias: name of object identifier 1. This alias needs to be a valid identifier, which is no longer than 32 characters, starting with a letter (a-z) and consisting of only small letters (a-z), numbers (0-9) and/or underscores.
            object_type: Optional - object type of object identifier 1.
            unique: Optional - Default to false. Whether each unique object identifier 1 can only appear once in all associations of this type. </param>
            <param name="assoc_info2">Describes object identifier 2 in an association. This is a data structure that has:
            alias: name of object identifier 2. This alias needs to be a valid identifier, which is no longer than 32 characters, starting with a letter (a-z) and consisting of only small letters (a-z), numbers (0-9) and/or underscores.
            object_type: Optional - object type of object identifier 2.
            unique: Optional - Default to false. Whether each unique object identifier 2 can only appear once in all associations of this type. </param>
            <param name="inverse">Optional - name of backward association, if it is two-way asymmetric. This name needs to be unique among all object types and associations defined for this application. This name also needs to be a valid identifier, which is no longer than 32 characters, starting with a letter (a-z) and consisting of only small letters (a-z), numbers (0-9) and/or underscores. </param>
        </member>
        <member name="M:Facebook.Rest.Data.UndefineAssociation(System.String)">
            <summary>
            Remove a previously defined association. This will also delete this type of associations established between objects. This deletion is not reversible. 
            </summary>
            <example>
            <code>
            
            </code>
            </example>
            <param name="name">Name of the association to remove.</param>
        </member>
        <member name="M:Facebook.Rest.Data.RenameAssociation(System.String,System.String,System.String,System.String)">
            <summary>
            Rename a previously defined association. Any renaming here only affects one direction. To change names and aliases for another direction, rename with the name of that direction of association. 
            </summary>
            <example>
            <code>
            
            </code>
            </example>
            <param name="name">Name of the association to change. </param>
            <param name="new_name">Optional - New name to use. This name needs to be unique among all object types and associations defined for this application. This name also needs to be a valid identifier, which is no longer than 32 characters, starting with a letter (a-z) and consisting of only small letters (a-z), numbers (0-9) and/or underscores. </param>
            <param name="new_alias1">Optional - New alias for object identifier 1 to use. This alias needs to be a valid identifier, which is no longer than 32 characters, starting with a letter (a-z) and consisting of only small letters (a-z), numbers (0-9) and/or underscores. </param>
            <param name="new_alias2">Optional - New alias for object identifier 2 to use. This alias needs to be a valid identifier, which is no longer than 32 characters, starting with a letter (a-z) and consisting of only small letters (a-z), numbers (0-9) and/or underscores. </param>
        </member>
        <member name="M:Facebook.Rest.Data.GetAssociationDefinition(System.String)">
            <summary>
            Get detailed definition of an association. 
            </summary>
            <example>
            <code>
            
            </code>
            </example>
            <param name="name">	Name of the association. </param>
            <returns>An object association information data structure that has:
            name: name of the association;
            * assoc_type: an integer indicating association's type:
            o 1: one-way association, where reverse lookup is not needed;
            o 2: two-way symmetric association, where a backward association (B to A) is always created when a forward association (A to B) is created.
            o 3: two-way asymmetric association, where a backward association (B to A) has different meaning than a forward association (A to B). 
            * assoc_info1: object identifier 1's information:
            o alias: name of object identifier 1.
            o object_type: Optional - object type of object identifier 1.
            o unique: Whether each unique object identifier 1 can only appear once in all associations of this type. 
            * assoc_info2: object identifier 2's information:
            o alias: name of object identifier 2.
            o object_type: Optional - object type of object identifier 2.
            o unique: Whether each unique object identifier 1 can only appear once in all associations of this type.
            </returns>
        </member>
        <member name="M:Facebook.Rest.Data.GetAssociationDefinitions">
            <summary>
            Get detailed definitions of all previously defined associations. 
            </summary>
            <example>
            <code>
            
            </code>
            </example>
            <returns>A list of object association information data structures, each of which has: 
            name: name of the association;
            * assoc_type: an integer indicating association's type:
            o 1: one-way association, where reverse lookup is not needed;
            o 2: two-way symmetric association, where a backward association (B to A) is always created when a forward association (A to B) is created.
            o 3: two-way asymmetric association, where a backward association (B to A) has different meaning than a forward association (A to B). 
            * assoc_info1: object identifier 1's information:
            o alias: name of object identifier 1.
            o object_type: Optional - object type of object identifier 1.
            o unique: Whether each unique object identifier 1 can only appear once in all associations of this type. 
            * assoc_info2: object identifier 2's information:
            o alias: name of object identifier 2.
            o object_type: Optional - object type of object identifier 2.
            o unique: Whether each unique object identifier 1 can only appear once in all associations of this type.
            </returns>
        </member>
        <member name="M:Facebook.Rest.Data.SetAssociation(System.String,System.Int64,System.Int64,System.String,System.DateTime)">
            <summary>
            Creates an association between two object identifiers. The order of these two identifiers matters, unless this is a symmetric two-way association. 
            </summary>
            <example>
            <code>
            
            </code>
            </example>
            <param name="name">Name of the association to set. </param>
            <param name="obj_id1">Object identifier 1. </param>
            <param name="obj_id2">Object identifier 2. </param>
            <param name="data">Optional - An arbitrary data (max. 255 characters) to store with this association. </param>
            <param name="assoc_time">Optional - Default to association creation time. A timestamp to store with this association. This timestamp is represented as number of seconds since the Unix Epoch (January 1 1970 00:00:00 GMT). </param>
        </member>
        <member name="M:Facebook.Rest.Data.SetAssociations(System.Collections.Generic.IList{Facebook.Rest.DataAssociation},System.String)">
            <summary>
            Creates a list of associations. 
            </summary>
            <example>
            <code>
            
            </code>
            </example>
            <param name="assocs">A list of associations to set. Each of them has:
            * name: string, optional - name of the association to set;
            * id1: int64, object identifier 1;
            * id2: int64, object identifier 2;
            * data: string, optional - an arbitrary data (max. 255 characters) to store with this association.
            * time: integer, optional - default to association creation time. A timestamp to store with this association. This timestamp is represented as number of seconds since the Unix Epoch (January 1 1970 00:00:00 GMT). </param>
            <param name="name">Optional - default association name if association name is not specified in the list. </param>
        </member>
        <member name="M:Facebook.Rest.Data.RemoveAssociation(System.String,System.Int64,System.Int64)">
            <summary>
            Removes an association between two object identifiers. The order of these two identifiers matters, unless this is a symmetric two-way association. 
            </summary>
            <example>
            <code>
            
            </code>
            </example>
            <param name="name">Name of the association. </param>
            <param name="obj_id1">Object identifier 1. </param>
            <param name="obj_id2">Object identifier 2. </param>
        </member>
        <member name="M:Facebook.Rest.Data.RemoveAssociations(System.Collections.Generic.List{Facebook.Rest.DataAssociation},System.String)">
            <summary>
            Removes a list of associations. 
            </summary>
            <example>
            <code>
            
            </code>
            </example>
            <param name="assocs">A list of associations to remove. Each of them has:
            * name: string, optional - name of the association;
            * id1: int64, object identifier 1;
            * id2: int64, object identifier 2; </param>
            <param name="name">Optional - default association name if association name is not specified in the list. </param>
        </member>
        <member name="M:Facebook.Rest.Data.RemoveAssociatedObjects(System.String,System.Int64)">
            <summary>
            The name of this function may be misleading, but it actually removes associations between any other objects and a specified object. Those other associated objects will NOT be removed or deleted. Only the associations will be broken and deleted. 
            </summary>
            <example>
            <code>
            
            </code>
            </example>
            <param name="name">Name of the association. </param>
            <param name="obj_id">Object identifier. </param>
        </member>
        <member name="M:Facebook.Rest.Data.GetAssociatedObjects(System.String,System.Int64,System.Boolean)">
            <summary>
            Returns a list of object ids that are associated with specified object. 
            </summary>
            <example>
            <code>
            
            </code>
            </example>
            <param name="name">Name of the association. </param>
            <param name="obj_id">Object identifier. </param>
            <param name="no_data">True if only return object identifiers; false to return data and time as well. </param>
            <returns>A list of objects associated with the given id, each of which has:
            * id2: object identifier 2;
            * data: arbitrary data stored with this association; and
            * time: association creation time or a timestamp stored with this association. </returns>
        </member>
        <member name="M:Facebook.Rest.Data.GetAssociatedObjectCount(System.String,System.Int64)">
            <summary>
            Returns count of object ids that are associated with specified object. This function takes constant time to return the count, regardless how many objects are associated. 
            </summary>
            <example>
            <code>
            
            </code>
            </example>
            <param name="name">Name of the association. </param>
            <param name="obj_id">Object identifier. </param>
            <returns>integer: count of associated objects of the specified object. Seems to be returning empty string for zero. </returns>
        </member>
        <member name="M:Facebook.Rest.Data.GetAssociatedObjectCounts(System.String,System.Collections.Generic.List{System.Int64})">
            <summary>
            Returns individual counts of object ids that are associated with a list of specified objects. This function takes constant time to return the counts, regardless how many objects are associated with each queried object. 
            </summary>
            <example>
            <code>
            
            </code>
            </example>
            <param name="name">	Name of the association. </param>
            <param name="obj_ids">A list of 64-bit numeric object identifiers. </param>
            <returns>A list of integers, each of which is count of associated objects of one object in the specified list. The order of counts match exactly with input list. </returns>
        </member>
        <member name="M:Facebook.Rest.Data.GetAssociations(System.Int64,System.Int64,System.Boolean)">
            <summary>
            Get all associations between two object identifiers. 
            </summary>
            <example>
            <code>
            
            </code>
            </example>
            <param name="obj_id1">Object identifier 1. </param>
            <param name="obj_id2">Object identifier 2. </param>
            <param name="no_data">True if only return object identifiers; false to return data and time as well. </param>
            <returns>A list of associations, each of which has:
            * name: name of the association to set;
            * id1: object identifier 1;
            * id2: object identifier 2;
            * data: arbitrary information stored with this association; and
            * time: association creation time or a timestamp that was stored with this association. </returns>
        </member>
        <member name="M:Facebook.Rest.Data.GetCookies">
            <summary>
            Get Cookies for the specified user. 
            </summary>
            <example>
            <code>
            
            </code>
            </example>
            <returns>A list of cookies</returns>
        </member>
        <member name="M:Facebook.Rest.Data.GetCookies(System.Int64)">
            <summary>
            Get Cookies for the specified user. 
            </summary>
            <example>
            <code>
            
            </code>
            </example>
            <param name="uid">User id </param>
            <returns>A list of cookies</returns>
        </member>
        <member name="M:Facebook.Rest.Data.GetCookies(System.Int64,System.String)">
            <summary>
            Get Cookies for the specified user. 
            </summary>
            <example>
            <code>
            
            </code>
            </example>
            <param name="uid">User id </param>
            <param name="cookieName">Optional- Cookie name </param>
            <returns>A list of cookies</returns>
        </member>
        <member name="M:Facebook.Rest.Data.SetCookie(System.Int64,System.String,System.String,System.Nullable{System.DateTime},System.String)">
            <summary>
            Set Cookies for the specified user. 
            </summary>
            <example>
            <code>
            
            </code>
            </example>
            <param name="uid">User id </param>
            <param name="cookieName">Cookie name </param>
            <param name="value">cookie value </param>
            <param name="expires">Time stamp when the cookie should expire. If not specified, the cookie expires after 24 hours. (The time stamp can be longer than 24 hours and currently has no limit)</param>
            <param name="path">Path relative to the application's callback URL, with which the cookie should be associated. (default value is /) </param>
            <returns>This method returns true indicating success or false indicating failure.</returns>
        </member>
        <member name="M:Facebook.Rest.Data.SetUserPreferenceAsync(System.Int32,System.String,Facebook.Rest.Data.SetUserPreferenceCallback,System.Object)">
            <summary>
            Sets currently authenticated user's preference.
            </summary>
            <example>
            <code>
            
            </code>
            </example>
            <param name="pref_id">(0-201) Numeric identifier of this preference.</param>
            <param name="value">(max. 128 characters) Value of the preference to set. Set it to "0" or "" to remove this preference.</param>
            <param name="callback">The AsyncCallback delegate</param>
            <param name="state">An object containing state information for this asynchronous request</param>        
            <remarks>
            Each preference is a string of maximum 128 characters and each of them has a numeric identifier ranged from 0 to 200. Therefore, every application can store up to 201 string values for each of its user.  
            To "remove" a preference, set it to 0 or empty string. Both "0" and "" are considered as "not present", and getPreference() call will not return them. To tell them from each other, one can use some serialization format. For example, "n:0" for zeros and "s:" for empty strings. 
            </remarks>
        </member>
        <member name="M:Facebook.Rest.Data.SetUserPreferencesAsync(System.Collections.Generic.List{System.String},System.Boolean,Facebook.Rest.Data.SetUserPreferencesCallback,System.Object)">
            <summary>
            Sets currently authenticated user's preferences in batch. Each preference is a string of maximum 128 characters and each of them has a numeric identifier ranged from 0 to 200. Therefore, every application can store up to 201 string values for each of its user. 
            </summary>
            <example>
            <code>
            
            </code>
            </example>
            <param name="values">Id-value pairs of preferences to set. Each id is an integer between 0 and 200 inclusively. Each value is a string with maximum length of 128 characters. Use "0" or "" to remove a preference.</param>
            <param name="replace">True to replace all existing preferences of this user; false to merge into existing preferences.</param>
            <param name="callback">The AsyncCallback delegate</param>
            <param name="state">An object containing state information for this asynchronous request</param>        
            <remarks>To "remove" a preference, set it to 0 or empty string. Both "0" and "" are considered as "not present", and getPreference() call will not return them. To tell them from each other, one can use some serialization format. For example, "n:0" for zeros and "s:" for empty strings. </remarks>
        </member>
        <member name="M:Facebook.Rest.Data.GetUserPreferenceAsync(System.Int32,Facebook.Rest.Data.GetUserPreferenceCallback,System.Object)">
            <summary>
            Gets currently authenticated user's preference. 
            </summary>
            <example>
            <code>
            
            </code>
            </example>
            <param name="pref_id">(0-200) Numeric identifier of the preference to get. </param>
            <param name="callback">The AsyncCallback delegate</param>
            <param name="state">An object containing state information for this asynchronous request</param>        
            <returns>This method returns the value of the specified preference. Empty string if the preference was not set, or it was set to "0" or empty string before.</returns>
        </member>
        <member name="M:Facebook.Rest.Data.GetUserPreferencesAsync(Facebook.Rest.Data.GetUserPreferenceCallback,System.Object)">
            <summary>
            Gets currently authenticated user's preferences. 
            </summary>
            <example>
            <code>
            
            </code>
            </example>
            <param name="callback">The AsyncCallback delegate</param>
            <param name="state">An object containing state information for this asynchronous request</param>        
            <returns>This method returns a List of id-value pairs of preferences. For preferences that are set to 0 or empty strings, they will NOT show up in the returned map.</returns>
            <remarks>For return value:
            This is a problem if you identify the preferences by numbers on your machine. 
            If a user fills out preference 0, 1, 2, and 4, but neglects to fill out preference 3 (because it may be optional) --> The array returned by this function 
            will map preference 4 to 3. This preference will still be identified by 4 because each initial key in the returned array stores another array that would map 4 to the user preference, 
            but you may have to iterate through each array until you find this missing preference depending on how many preferences you have and how many are missing.
            </remarks>
        </member>
        <member name="M:Facebook.Rest.Data.CreateObjectTypeAsync(System.String,Facebook.Rest.Data.CreateObjectTypeCallback,System.Object)">
            <summary>
            An object type is like a "table" in SQL terminology, or a "class" in object-oriented programming concepts. Each object type has a unique human-readable "name" that will be used to identify itself throughout the API. Each object type also has a list of properties that one has to define individually. Each property is like a "column" in an SQL table, or a "data member" in an object class. 
            </summary>
            <example>
            <code>
            
            </code>
            </example>
            <param name="name">Name of this new object type. This name needs to be unique among all object types and associations defined for this application. This name also needs to be a valid identifier, which is no longer than 32 characters, starting with a letter (a-z) and consisting of only small letters (a-z), numbers (0-9) and/or underscores. </param>
            <param name="callback">The AsyncCallback delegate</param>
            <param name="state">An object containing state information for this asynchronous request</param>        
        </member>
        <member name="M:Facebook.Rest.Data.DropObjectTypeAsync(System.String,Facebook.Rest.Data.DropObjectTypeCallback,System.Object)">
            <summary>
            Remove a previously defined object type. This will also delete ALL objects of this type. This deletion is NOT reversible. 
            </summary>
            <example>
            <code>
            
            </code>
            </example>
            <param name="obj_type">Name of the object type to delete. This will also delete all objects that were created with the type. </param>
            <param name="callback">The AsyncCallback delegate</param>
            <param name="state">An object containing state information for this asynchronous request</param>        
        </member>
        <member name="M:Facebook.Rest.Data.RenameObjectTypeAsync(System.String,System.String,Facebook.Rest.Data.RenameObjectTypeCallback,System.Object)">
            <summary>
            Rename a previously defined object type. 
            </summary>
            <example>
            <code>
            
            </code>
            </example>
            <param name="obj_type">Previous name of the object type to rename. </param>
            <param name="new_name">New name to use. This name needs to be unique among all object types and associations defined for this application. This name also needs to be a valid identifier, which is no longer than 32 characters, starting with a letter (a-z) and consisting of only small letters (a-z), numbers (0-9) and/or underscores.</param>
            <param name="callback">The AsyncCallback delegate</param>
            <param name="state">An object containing state information for this asynchronous request</param>        
        </member>
        <member name="M:Facebook.Rest.Data.DefineObjectPropertyAsync(System.String,System.String,System.Int32,Facebook.Rest.Data.DefineObjectPropertyCallback,System.Object)">
            <summary>
            Add a new object property to an object type.
            </summary>
            <example>
            <code>
            
            </code>
            </example>
            <param name="obj_type">Object type to add a new property to. </param>
            <param name="prop_name">Name of the new property to add. This name needs to be a valid identifier, which is no longer than 32 characters, starting with a letter (a-z) and consisting of only small letters (a-z), numbers (0-9) and/or underscores. </param>
            <param name="prop_type">Type of the new property: 1 for integer, 2 for string (max. 255 characters), 3 for text blob (max. 64kb)</param>
            <param name="callback">The AsyncCallback delegate</param>
            <param name="state">An object containing state information for this asynchronous request</param>        
        </member>
        <member name="M:Facebook.Rest.Data.UndefineObjectPropertyAsync(System.String,System.String,Facebook.Rest.Data.UndefineObjectPropertyCallback,System.Object)">
            <summary>
            Remove a previously defined property of an object type. This will remove ALL values of this property of ALL objects of this type. This removal is NOT reversible. 
            </summary>
            <example>
            <code>
            
            </code>
            </example>
            <param name="obj_type">Object type from which a property is removed. </param>
            <param name="prop_name">Name of the property to remove. </param>
            <param name="callback">The AsyncCallback delegate</param>
            <param name="state">An object containing state information for this asynchronous request</param>        
        </member>
        <member name="M:Facebook.Rest.Data.RenameObjectPropertyAsync(System.String,System.String,System.String,Facebook.Rest.Data.RenameObjectPropertyCallback,System.Object)">
            <summary>
            Rename a previously defined object property. 
            </summary>
            <example>
            <code>
            
            </code>
            </example>
            <param name="obj_type">Object type of the property to rename. </param>
            <param name="prop_name">Name of the property to change. </param>
            <param name="new_name">	New name to use. This name needs to be a valid identifier, which is no longer than 32 characters, starting with a letter (a-z) and consisting of only small letters (a-z), numbers (0-9) and/or underscores. </param>
            <param name="callback">The AsyncCallback delegate</param>
            <param name="state">An object containing state information for this asynchronous request</param>        
        </member>
        <member name="M:Facebook.Rest.Data.GetObjectTypesAsync(Facebook.Rest.Data.GetObjectTypesCallback,System.Object)">
            <summary>
            Get a list of all previously defined object types. 
            </summary>
            <example>
            <code>
            
            </code>
            </example>
            <param name="callback">The AsyncCallback delegate</param>
            <param name="state">An object containing state information for this asynchronous request</param>        
            <returns>list of object type definitions, each of which has; name: name of object type; object_class: (reserved)</returns>
        </member>
        <member name="M:Facebook.Rest.Data.GetObjectTypeAsync(System.String,Facebook.Rest.Data.GetObjectTypeCallback,System.Object)">
            <summary>
            Get detailed definitions of an object type, including all its properties and their types. 
            </summary>
            <example>
            <code>
            
            </code>
            </example>
            <param name="obj_type">Object type to get definition about. </param>
            <param name="callback">The AsyncCallback delegate</param>
            <param name="state">An object containing state information for this asynchronous request</param>        
            <returns>list of object property definitions, each of which has; name: name of property; data_type: type of property. 1 for integer, 2 for string (max. 255 characters), 3 for text blob (max. 64kb); index_type: (reserved)</returns>
        </member>
        <member name="M:Facebook.Rest.Data.CreateObjectAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.String},Facebook.Rest.Data.CreateObjectCallback,System.Object)">
            <summary>
            Create a new object.
            </summary>
            <example>
            <code>
            
            </code>
            </example>
            <param name="obj_type">Specifies which type of new object to create. </param>
            <param name="properties">Optional - Name-value pairs of properties this new object has. The parameters must be JSON encoded with double quoted property and value, i.e. {"name":"value"} </param>
            <param name="callback">The AsyncCallback delegate</param>
            <param name="state">An object containing state information for this asynchronous request</param>        
            <returns>Numeric identifier (fbid) of newly created object. </returns>
        </member>
        <member name="M:Facebook.Rest.Data.UpdateObjectAsync(System.Int64,System.Collections.Generic.Dictionary{System.String,System.String},System.Boolean,Facebook.Rest.Data.UpdateObjectCallback,System.Object)">
            <summary>
            Update an object's properties. 
            </summary>
            <example>
            <code>
            
            </code>
            </example>
            <param name="obj_id">Numeric identifier (fbid) of the object to modify. </param>
            <param name="properties">Name-value pairs of new properties. </param>
            <param name="replace">True if replace all existing properties; false to merge into existing ones.</param>
            <param name="callback">The AsyncCallback delegate</param>
            <param name="state">An object containing state information for this asynchronous request</param>        
        </member>
        <member name="M:Facebook.Rest.Data.DeleteObjectAsync(System.Int64,Facebook.Rest.Data.DeleteObjectCallback,System.Object)">
            <summary>
            Delete an object permanently. 
            </summary>
            <example>
            <code>
            
            </code>
            </example>
            <param name="obj_id">Numeric identifier (fbid) of the object to delete. </param>
            <param name="callback">The AsyncCallback delegate</param>
            <param name="state">An object containing state information for this asynchronous request</param>        
        </member>
        <member name="M:Facebook.Rest.Data.DeleteObjectsAsync(System.Collections.Generic.List{System.Int64},Facebook.Rest.Data.DeleteObjectsCallback,System.Object)">
            <summary>
            Delete multiple objects permanently. 
            </summary>
            <example>
            <code>
            
            </code>
            </example>
            <param name="obj_ids">A list of 64-bit integers that are numeric identifiers (fbids) of objects to delete.</param>
            <param name="callback">The AsyncCallback delegate</param>
            <param name="state">An object containing state information for this asynchronous request</param>        
        </member>
        <member name="M:Facebook.Rest.Data.GetObjectAsync(System.Int64,System.Collections.Generic.List{System.String},Facebook.Rest.Data.GetObjectCallback,System.Object)">
            <summary>
            Get an object's properties.
            </summary>
            <example>
            <code>
            
            </code>
            </example>
            <param name="obj_id">Numeric identifier (fbid) of the object to query.</param>
            <param name="prop_names">Optional - A list of property names (strings) to selectively query a subset of object properties. If not specified, all properties will be returned.</param>
            <param name="callback">The AsyncCallback delegate</param>
            <param name="state">An object containing state information for this asynchronous request</param>        
            <returns>An array of the values only (not the names) of specified properties of the object. </returns>
            <remarks>The second (index 1) is the object id (fbid); after that they will be properties you added yourself.</remarks>
        </member>
        <member name="M:Facebook.Rest.Data.GetObjectsAsync(System.Collections.Generic.List{System.Int64},System.Collections.Generic.List{System.String},Facebook.Rest.Data.GetObjectsCallback,System.Object)">
            <summary>
            Get properties of multiple objects. 
            </summary>
            <example>
            <code>
            
            </code>
            </example>
            <param name="obj_ids">A list of 64-bit numeric identifiers (fbids) of objects to query. For example: [fbid1, fbid2] </param>
            <param name="prop_names">Optional - A list of property names (strings) to selectively query a subset of object properties. If not specified, all properties will be returned. </param>
            <param name="callback">The AsyncCallback delegate</param>
            <param name="state">An object containing state information for this asynchronous request</param>        
            <returns>list of name-value pairs. </returns>
        </member>
        <member name="M:Facebook.Rest.Data.GetObjectPropertyAsync(System.Int64,System.String,Facebook.Rest.Data.GetObjectPropertyCallback,System.Object)">
            <summary>
            Get properties of multiple objects. 
            </summary>
            <example>
            <code>
            
            </code>
            </example>
            <param name="obj_id">A list of 64-bit numeric identifiers (fbids) of objects to query. For example: [fbid1, fbid2] </param>
            <param name="prop_name">Optional - A list of property names (strings) to selectively query a subset of object properties. If not specified, all properties will be returned. </param>
            <param name="callback">The AsyncCallback delegate</param>
            <param name="state">An object containing state information for this asynchronous request</param>        
            <returns>list of name-value pairs. </returns>
        </member>
        <member name="M:Facebook.Rest.Data.SetObjectPropertyAsync(System.Int64,System.String,System.String,Facebook.Rest.Data.SetObjectPropertyCallback,System.Object)">
            <summary>
            Set a single property of an object. 
            </summary>
            <example>
            <code>
            
            </code>
            </example>
            <param name="obj_id">Object's numeric identifier (fbid).</param>
            <param name="prop_name">Property's name.</param>
            <param name="prop_value">Property's value.</param>
            <param name="callback">The AsyncCallback delegate</param>
            <param name="state">An object containing state information for this asynchronous request</param>        
        </member>
        <member name="M:Facebook.Rest.Data.GetHashValueAsync(System.String,System.String,System.String,Facebook.Rest.Data.GetHashValueCallback,System.Object)">
            <summary>
            Get a property value by a hash key. 
            </summary>
            <example>
            <code>
            
            </code>
            </example>
            <param name="obj_type">Object's type. This is required, so that different object types may use the same hash keys for different objects. </param>
            <param name="key">Hash key (string object identifier) for locating the object. This is created by a call to Data.setHashValue. </param>
            <param name="prop_name">Name of the property to query. </param>
            <param name="callback">The AsyncCallback delegate</param>
            <param name="state">An object containing state information for this asynchronous request</param>        
            <returns>string: property's value. Empty string will be returned (without any error), if object with the specified hash key was not found or created. </returns>
        </member>
        <member name="M:Facebook.Rest.Data.SetHashValueAsync(System.String,System.String,System.String,System.String,Facebook.Rest.Data.SetHashValueCallback,System.Object)">
            <summary>
            Set a property value by a hash key. 
            </summary>
            <example>
            <code>
            
            </code>
            </example>
            <param name="obj_type">Object's type. This is required so that different object types can use the same hash keys for different objects. </param>
            <param name="key">Hash key. This is a unique string chosen by the user that can be used to refer to the object in subsequent function calls. </param>
            <param name="value">Property's value to set. If the hash key exists, this will overwrite any previous value. </param>
            <param name="prop_name">Name of the property to set. </param>
            <param name="callback">The AsyncCallback delegate</param>
            <param name="state">An object containing state information for this asynchronous request</param>        
            <returns>Numeric identifier (fbid) of the object. </returns>
        </member>
        <member name="M:Facebook.Rest.Data.IncHashValueAsync(System.String,System.String,System.String,System.Int32,Facebook.Rest.Data.IncHashValueCallback,System.Object)">
            <summary>
            Atomically increases a numeric property by a hash key. This is different than "setHashValue(getHashValue() + increment)", which has two API functions calls that are not atomically done (subject to race conditions with values overwritten by interleaved API calls). 
            </summary>
            <example>
            <code>
            
            </code>
            </example>
            <param name="obj_type">Object's type. This is required, so that different object types may use the same hash keys for different objects. </param>
            <param name="key">Hash key (string object identifier) for locating the object. </param>
            <param name="prop_name">Name of the property to set. </param>
            <param name="increment">Optional - Default is 1. Increments to add to current value, which is 0 if object was not found or created. Use negative number for decrements. </param>
            <param name="callback">The AsyncCallback delegate</param>
            <param name="state">An object containing state information for this asynchronous request</param>        
            <returns>Property's value after incremented. </returns>
        </member>
        <member name="M:Facebook.Rest.Data.RemoveHashKeyAsync(System.String,System.String,Facebook.Rest.Data.RemoveHashKeyCallback,System.Object)">
            <summary>
            Delete an object by a hash key. 
            </summary>
            <example>
            <code>
            
            </code>
            </example>
            <param name="obj_type">Object's type. This is required, so that different object types may use the same hash keys for different objects. </param>
            <param name="key">Hash key (string object identifier) to remove. </param>
            <param name="callback">The AsyncCallback delegate</param>
            <param name="state">An object containing state information for this asynchronous request</param>        
        </member>
        <member name="M:Facebook.Rest.Data.RemoveHashKeysAsync(System.String,System.Collections.Generic.List{System.String},Facebook.Rest.Data.RemoveHashKeysCallback,System.Object)">
            <summary>
            Delete multiple objects by a list of hash keys. 
            </summary>
            <example>
            <code>
            
            </code>
            </example>
            <param name="obj_type">Object's type. This is required, so that different object types may use the same hash keys for different objects. </param>
            <param name="keys">A list of hash keys (string object identifier) to remove.</param>
            <param name="callback">The AsyncCallback delegate</param>
            <param name="state">An object containing state information for this asynchronous request</param>        
        </member>
        <member name="M:Facebook.Rest.Data.DefineAssociationAsync(System.String,System.Int32,Facebook.Schema.assoc_object_type,Facebook.Schema.assoc_object_type,System.Nullable{System.Boolean},Facebook.Rest.Data.DefineAssociationCallback,System.Object)">
            <summary>
            An object association is a directional relationship between two object identifiers. For example, Application Installation: user id => installed application ids; Marriage: husband => wife; Friendship: user id => friend user id; Gift: giver => receiver 
            Each association has at least 3 names that are required to describe it: name of the association itself: "installation", "marriage", "friendship", "gift". alias1, name of the first object identifier: "user id", "husband", "giver". alias2, name of the second object identifier: "application id", "wife", "friend user id", "receiver". 
            For some associations, we also need reverse direction for a lookup by the second object identifier. For examples, in "marriage" case, not only may we need to look up wife ids by husband ids, but we may also need to look up husband ids by wife ids. We call this a two-way association. Since "husband to wife" is not the same as "wife to husband", we call this a two-way asymmetric association.
            In some other two-way associations, backward association has the same meaning of forward association. For example, in "friendship", if "A is B's friend" then "B is A's friend" as well. We call these types of two-way associations symmetric. For a symmetric association, when "A to B" is added, we also add "B to A", so that a reverse lookup can find out exactly the same information. 
            </summary>
            <example>
            <code>
            
            </code>
            </example>
            <param name="name">Name of forward association to create. This name needs to be unique among all object types and associations defined for this application. This name also needs to be a valid identifier, which is no longer than 32 characters, starting with a letter (a-z) and consisting of only small letters (a-z), numbers (0-9) and/or underscores. </param>
            <param name="assoc_type">Type of this association:
            1: one-way association, where reverse lookup is not needed;
            2: two-way symmetric association, where a backward association (B to A) is always created when a forward association (A to B) is created.
            3: two-way asymmetric association, where a backward association (B to A) has different meaning than a forward association (A to B). </param>
            <param name="assoc_info1">Describes object identifier 1 in an association. This is a data structure that has:
            alias: name of object identifier 1. This alias needs to be a valid identifier, which is no longer than 32 characters, starting with a letter (a-z) and consisting of only small letters (a-z), numbers (0-9) and/or underscores.
            object_type: Optional - object type of object identifier 1.
            unique: Optional - Default to false. Whether each unique object identifier 1 can only appear once in all associations of this type. </param>
            <param name="assoc_info2">Describes object identifier 2 in an association. This is a data structure that has:
            alias: name of object identifier 2. This alias needs to be a valid identifier, which is no longer than 32 characters, starting with a letter (a-z) and consisting of only small letters (a-z), numbers (0-9) and/or underscores.
            object_type: Optional - object type of object identifier 2.
            unique: Optional - Default to false. Whether each unique object identifier 2 can only appear once in all associations of this type. </param>
            <param name="inverse">Optional - name of backward association, if it is two-way asymmetric. This name needs to be unique among all object types and associations defined for this application. This name also needs to be a valid identifier, which is no longer than 32 characters, starting with a letter (a-z) and consisting of only small letters (a-z), numbers (0-9) and/or underscores. </param>
            <param name="callback">The AsyncCallback delegate</param>
            <param name="state">An object containing state information for this asynchronous request</param>        
        </member>
        <member name="M:Facebook.Rest.Data.UndefineAssociationAsync(System.String,Facebook.Rest.Data.UndefineAssociationCallback,System.Object)">
            <summary>
            Remove a previously defined association. This will also delete this type of associations established between objects. This deletion is not reversible. 
            </summary>
            <example>
            <code>
            
            </code>
            </example>
            <param name="name">Name of the association to remove.</param>
            <param name="callback">The AsyncCallback delegate</param>
            <param name="state">An object containing state information for this asynchronous request</param>        
        </member>
        <member name="M:Facebook.Rest.Data.RenameAssociationAsync(System.String,System.String,System.String,System.String,Facebook.Rest.Data.RenameAssociationCallback,System.Object)">
            <summary>
            Rename a previously defined association. Any renaming here only affects one direction. To change names and aliases for another direction, rename with the name of that direction of association. 
            </summary>
            <example>
            <code>
            
            </code>
            </example>
            <param name="name">Name of the association to change. </param>
            <param name="new_name">Optional - New name to use. This name needs to be unique among all object types and associations defined for this application. This name also needs to be a valid identifier, which is no longer than 32 characters, starting with a letter (a-z) and consisting of only small letters (a-z), numbers (0-9) and/or underscores. </param>
            <param name="new_alias1">Optional - New alias for object identifier 1 to use. This alias needs to be a valid identifier, which is no longer than 32 characters, starting with a letter (a-z) and consisting of only small letters (a-z), numbers (0-9) and/or underscores. </param>
            <param name="new_alias2">Optional - New alias for object identifier 2 to use. This alias needs to be a valid identifier, which is no longer than 32 characters, starting with a letter (a-z) and consisting of only small letters (a-z), numbers (0-9) and/or underscores. </param>
            <param name="callback">The AsyncCallback delegate</param>
            <param name="state">An object containing state information for this asynchronous request</param>        
        </member>
        <member name="M:Facebook.Rest.Data.GetAssociationDefinitionAsync(System.String,Facebook.Rest.Data.GetAssociationDefinitionCallback,System.Object)">
            <summary>
            Get detailed definition of an association. 
            </summary>
            <example>
            <code>
            
            </code>
            </example>
            <param name="name">	Name of the association. </param>
            <param name="callback">The AsyncCallback delegate</param>
            <param name="state">An object containing state information for this asynchronous request</param>        
            <returns>An object association information data structure that has:
            name: name of the association;
            * assoc_type: an integer indicating association's type:
            o 1: one-way association, where reverse lookup is not needed;
            o 2: two-way symmetric association, where a backward association (B to A) is always created when a forward association (A to B) is created.
            o 3: two-way asymmetric association, where a backward association (B to A) has different meaning than a forward association (A to B). 
            * assoc_info1: object identifier 1's information:
            o alias: name of object identifier 1.
            o object_type: Optional - object type of object identifier 1.
            o unique: Whether each unique object identifier 1 can only appear once in all associations of this type. 
            * assoc_info2: object identifier 2's information:
            o alias: name of object identifier 2.
            o object_type: Optional - object type of object identifier 2.
            o unique: Whether each unique object identifier 1 can only appear once in all associations of this type.
            </returns>
        </member>
        <member name="M:Facebook.Rest.Data.GetAssociationDefinitionsAsync(Facebook.Rest.Data.GetAssociationDefinitionsCallback,System.Object)">
            <summary>
            Get detailed definitions of all previously defined associations. 
            </summary>
            <example>
            <code>
            
            </code>
            </example>
            <param name="callback">The AsyncCallback delegate</param>
            <param name="state">An object containing state information for this asynchronous request</param>        
            <returns>A list of object association information data structures, each of which has: 
            name: name of the association;
            * assoc_type: an integer indicating association's type:
            o 1: one-way association, where reverse lookup is not needed;
            o 2: two-way symmetric association, where a backward association (B to A) is always created when a forward association (A to B) is created.
            o 3: two-way asymmetric association, where a backward association (B to A) has different meaning than a forward association (A to B). 
            * assoc_info1: object identifier 1's information:
            o alias: name of object identifier 1.
            o object_type: Optional - object type of object identifier 1.
            o unique: Whether each unique object identifier 1 can only appear once in all associations of this type. 
            * assoc_info2: object identifier 2's information:
            o alias: name of object identifier 2.
            o object_type: Optional - object type of object identifier 2.
            o unique: Whether each unique object identifier 1 can only appear once in all associations of this type.
            </returns>
        </member>
        <member name="M:Facebook.Rest.Data.SetAssociationAsync(System.String,System.Int64,System.Int64,System.String,System.DateTime,Facebook.Rest.Data.SetAssociationCallback,System.Object)">
            <summary>
            Creates an association between two object identifiers. The order of these two identifiers matters, unless this is a symmetric two-way association. 
            </summary>
            <example>
            <code>
            
            </code>
            </example>
            <param name="name">Name of the association to set. </param>
            <param name="obj_id1">Object identifier 1. </param>
            <param name="obj_id2">Object identifier 2. </param>
            <param name="data">Optional - An arbitrary data (max. 255 characters) to store with this association. </param>
            <param name="assoc_time">Optional - Default to association creation time. A timestamp to store with this association. This timestamp is represented as number of seconds since the Unix Epoch (January 1 1970 00:00:00 GMT). </param>
            <param name="callback">The AsyncCallback delegate</param>
            <param name="state">An object containing state information for this asynchronous request</param>        
        </member>
        <member name="M:Facebook.Rest.Data.SetAssociationsAsync(System.Collections.Generic.IList{Facebook.Rest.DataAssociation},System.String,Facebook.Rest.Data.SetAssociationsCallback,System.Object)">
            <summary>
            Creates a list of associations. 
            </summary>
            <example>
            <code>
            
            </code>
            </example>
            <param name="assocs">A list of associations to set. Each of them has:
            * name: string, optional - name of the association to set;
            * id1: int64, object identifier 1;
            * id2: int64, object identifier 2;
            * data: string, optional - an arbitrary data (max. 255 characters) to store with this association.
            * time: integer, optional - default to association creation time. A timestamp to store with this association. This timestamp is represented as number of seconds since the Unix Epoch (January 1 1970 00:00:00 GMT). </param>
            <param name="name">Optional - default association name if association name is not specified in the list. </param>
            <param name="callback">The AsyncCallback delegate</param>
            <param name="state">An object containing state information for this asynchronous request</param>        
        </member>
        <member name="M:Facebook.Rest.Data.RemoveAssociationAsync(System.String,System.Int64,System.Int64,Facebook.Rest.Data.RemoveAssociationCallback,System.Object)">
            <summary>
            Removes an association between two object identifiers. The order of these two identifiers matters, unless this is a symmetric two-way association. 
            </summary>
            <example>
            <code>
            
            </code>
            </example>
            <param name="name">Name of the association. </param>
            <param name="obj_id1">Object identifier 1. </param>
            <param name="obj_id2">Object identifier 2. </param>
            <param name="callback">The AsyncCallback delegate</param>
            <param name="state">An object containing state information for this asynchronous request</param>        
        </member>
        <member name="M:Facebook.Rest.Data.RemoveAssociationsAsync(System.Collections.Generic.List{Facebook.Rest.DataAssociation},System.String,Facebook.Rest.Data.RemoveAssociationsCallback,System.Object)">
            <summary>
            Removes a list of associations. 
            </summary>
            <example>
            <code>
            
            </code>
            </example>
            <param name="assocs">A list of associations to remove. Each of them has:
            * name: string, optional - name of the association;
            * id1: int64, object identifier 1;
            * id2: int64, object identifier 2; </param>
            <param name="name">Optional - default association name if association name is not specified in the list. </param>
            <param name="callback">The AsyncCallback delegate</param>
            <param name="state">An object containing state information for this asynchronous request</param>        
        </member>
        <member name="M:Facebook.Rest.Data.RemoveAssociatedObjectsAsync(System.String,System.Int64,Facebook.Rest.Data.RemoveAssociatedObjectsCallback,System.Object)">
            <summary>
            The name of this function may be misleading, but it actually removes associations between any other objects and a specified object. Those other associated objects will NOT be removed or deleted. Only the associations will be broken and deleted. 
            </summary>
            <example>
            <code>
            
            </code>
            </example>
            <param name="name">Name of the association. </param>
            <param name="obj_id">Object identifier. </param>
            <param name="callback">The AsyncCallback delegate</param>
            <param name="state">An object containing state information for this asynchronous request</param>        
        </member>
        <member name="M:Facebook.Rest.Data.GetAssociatedObjectsAsync(System.String,System.Int64,System.Boolean,Facebook.Rest.Data.GetAssociatedObjectsCallback,System.Object)">
            <summary>
            Returns a list of object ids that are associated with specified object. 
            </summary>
            <example>
            <code>
            
            </code>
            </example>
            <param name="name">Name of the association. </param>
            <param name="obj_id">Object identifier. </param>
            <param name="no_data">True if only return object identifiers; false to return data and time as well. </param>
            <param name="callback">The AsyncCallback delegate</param>
            <param name="state">An object containing state information for this asynchronous request</param>        
            <returns>A list of objects associated with the given id, each of which has:
            * id2: object identifier 2;
            * data: arbitrary data stored with this association; and
            * time: association creation time or a timestamp stored with this association. </returns>
        </member>
        <member name="M:Facebook.Rest.Data.GetAssociatedObjectCountAsync(System.String,System.Int64,Facebook.Rest.Data.GetAssociatedObjectCountCallback,System.Object)">
            <summary>
            Returns count of object ids that are associated with specified object. This function takes constant time to return the count, regardless how many objects are associated. 
            </summary>
            <example>
            <code>
            
            </code>
            </example>
            <param name="name">Name of the association. </param>
            <param name="obj_id">Object identifier. </param>
            <param name="callback">The AsyncCallback delegate</param>
            <param name="state">An object containing state information for this asynchronous request</param>        
            <returns>integer: count of associated objects of the specified object. Seems to be returning empty string for zero. </returns>
        </member>
        <member name="M:Facebook.Rest.Data.GetAssociatedObjectCountsAsync(System.String,System.Collections.Generic.List{System.Int64},Facebook.Rest.Data.GetAssociatedObjectCountsCallback,System.Object)">
            <summary>
            Returns individual counts of object ids that are associated with a list of specified objects. This function takes constant time to return the counts, regardless how many objects are associated with each queried object. 
            </summary>
            <example>
            <code>
            
            </code>
            </example>
            <param name="name">	Name of the association. </param>
            <param name="obj_ids">A list of 64-bit numeric object identifiers. </param>
            <param name="callback">The AsyncCallback delegate</param>
            <param name="state">An object containing state information for this asynchronous request</param>        
            <returns>A list of integers, each of which is count of associated objects of one object in the specified list. The order of counts match exactly with input list. </returns>
        </member>
        <member name="M:Facebook.Rest.Data.GetAssociationsAsync(System.Int64,System.Int64,System.Boolean,Facebook.Rest.Data.GetAssociationsCallback,System.Object)">
            <summary>
            Get all associations between two object identifiers. 
            </summary>
            <example>
            <code>
            
            </code>
            </example>
            <param name="obj_id1">Object identifier 1. </param>
            <param name="obj_id2">Object identifier 2. </param>
            <param name="no_data">True if only return object identifiers; false to return data and time as well. </param>
            <param name="callback">The AsyncCallback delegate</param>
            <param name="state">An object containing state information for this asynchronous request</param>        
            <returns>A list of associations, each of which has:
            * name: name of the association to set;
            * id1: object identifier 1;
            * id2: object identifier 2;
            * data: arbitrary information stored with this association; and
            * time: association creation time or a timestamp that was stored with this association. </returns>
        </member>
        <member name="M:Facebook.Rest.Data.GetCookiesAsync(Facebook.Rest.Data.GetCookiesCallback,System.Object)">
            <summary>
            Get Cookies for the specified user. 
            </summary>
            <example>
            <code>
            
            </code>
            </example>
            <param name="callback">The AsyncCallback delegate</param>
            <param name="state">An object containing state information for this asynchronous request</param>        
            <returns>A list of cookies</returns>
        </member>
        <member name="M:Facebook.Rest.Data.GetCookiesAsync(System.Int64,Facebook.Rest.Data.GetCookiesCallback,System.Object)">
            <summary>
            Get Cookies for the specified user. 
            </summary>
            <example>
            <code>
            
            </code>
            </example>
            <param name="uid">User id </param>
            <param name="callback">The AsyncCallback delegate</param>
            <param name="state">An object containing state information for this asynchronous request</param>        
            <returns>A list of cookies</returns>
        </member>
        <member name="M:Facebook.Rest.Data.GetCookiesAsync(System.Int64,System.String,Facebook.Rest.Data.GetCookiesCallback,System.Object)">
            <summary>
            Get Cookies for the specified user. 
            </summary>
            <example>
            <code>
            
            </code>
            </example>
            <param name="uid">User id </param>
            <param name="cookieName">Optional- Cookie name </param>
            <param name="callback">The AsyncCallback delegate</param>
            <param name="state">An object containing state information for this asynchronous request</param>        
            <returns>A list of cookies</returns>
        </member>
        <member name="M:Facebook.Rest.Data.SetCookieAsync(System.Int64,System.String,System.String,System.Nullable{System.DateTime},System.String,Facebook.Rest.Data.SetCookieCallback,System.Object)">
            <summary>
            Set Cookies for the specified user. 
            </summary>
            <example>
            <code>
            
            </code>
            </example>
            <param name="uid">User id </param>
            <param name="cookieName">Cookie name </param>
            <param name="value">cookie value </param>
            <param name="expires">Time stamp when the cookie should expire. If not specified, the cookie expires after 24 hours. (The time stamp can be longer than 24 hours and currently has no limit)</param>
            <param name="path">Path relative to the application's callback URL, with which the cookie should be associated. (default value is /) </param>
            <param name="callback">The AsyncCallback delegate</param>
            <param name="state">An object containing state information for this asynchronous request</param>        
            <returns>This method returns true indicating success or false indicating failure.</returns>
        </member>
        <member name="T:Facebook.Rest.Data.SetUserPreferenceCallback">
            <summary>
            Delegate called when SetUserPreference call is completed.
            </summary>
            <param name="result">Boolean result.</param>
            <param name="state">An object containing state information for this asynchronous request.</param>
            <param name="e">Exception object, if the call resulted in exception.</param>
        </member>
        <member name="T:Facebook.Rest.Data.SetUserPreferencesCallback">
            <summary>
            Delegate called when SetUserPreferences call is completed.
            </summary>
            <param name="result">Boolean result.</param>
            <param name="state">An object containing state information for this asynchronous request.</param>
            <param name="e">Exception object, if the call resulted in exception.</param>
        </member>
        <member name="T:Facebook.Rest.Data.GetUserPreferenceCallback">
            <summary>
            Delegate called when GetUserPreference call is completed.
            </summary>
            <param name="preference">Preference string.</param>
            <param name="state">An object containing state information for this asynchronous request.</param>
            <param name="e">Exception object, if the call resulted in exception.</param>
        </member>
        <member name="T:Facebook.Rest.Data.CreateObjectTypeCallback">
            <summary>
            Delegate called when CreateObjectType call is completed.
            </summary>
            <param name="result">Boolean result.</param>
            <param name="state">An object containing state information for this asynchronous request.</param>
            <param name="e">Exception object, if the call resulted in exception.</param>
        </member>
        <member name="T:Facebook.Rest.Data.DropObjectTypeCallback">
            <summary>
            Delegate called when DropObjectType call is completed.
            </summary>
            <param name="result">Boolean result.</param>
            <param name="state">An object containing state information for this asynchronous request.</param>
            <param name="e">Exception object, if the call resulted in exception.</param>
        </member>
        <member name="T:Facebook.Rest.Data.RenameObjectTypeCallback">
            <summary>
            Delegate called when RenameObjectType call is completed.
            </summary>
            <param name="result">Boolean result.</param>
            <param name="state">An object containing state information for this asynchronous request.</param>
            <param name="e">Exception object, if the call resulted in exception.</param>
        </member>
        <member name="T:Facebook.Rest.Data.DefineObjectPropertyCallback">
            <summary>
            Delegate called when DefineObjectProperty call is completed.
            </summary>
            <param name="result">Boolean result.</param>
            <param name="state">An object containing state information for this asynchronous request.</param>
            <param name="e">Exception object, if the call resulted in exception.</param>
        </member>
        <member name="T:Facebook.Rest.Data.UndefineObjectPropertyCallback">
            <summary>
            Delegate called when UndefineObjectProperty call is completed.
            </summary>
            <param name="result">Boolean result.</param>
            <param name="state">An object containing state information for this asynchronous request.</param>
            <param name="e">Exception object, if the call resulted in exception.</param>
        </member>
        <member name="T:Facebook.Rest.Data.RenameObjectPropertyCallback">
            <summary>
            Delegate called when RenameObjectProperty call is completed.
            </summary>
            <param name="result">Boolean result.</param>
            <param name="state">An object containing state information for this asynchronous request.</param>
            <param name="e">Exception object, if the call resulted in exception.</param>
        </member>
        <member name="T:Facebook.Rest.Data.GetObjectTypesCallback">
            <summary>
            Delegate called when GetObjectTypes call is completed.
            </summary>
            <param name="types">A list of object_type_info types.</param>
            <param name="state">An object containing state information for this asynchronous request.</param>
            <param name="e">Exception object, if the call resulted in exception.</param>
        </member>
        <member name="T:Facebook.Rest.Data.GetObjectTypeCallback">
            <summary>
            Delegate called when GetObjectType call is completed.
            </summary>
            <param name="properties">A list of object_property_info types.</param>
            <param name="state">An object containing state information for this asynchronous request.</param>
            <param name="e">Exception object, if the call resulted in exception.</param>
        </member>
        <member name="T:Facebook.Rest.Data.CreateObjectCallback">
            <summary>
            Delegate called when CreateObject call is completed.
            </summary>
            <param name="object_id">Object identifier.</param>
            <param name="state">An object containing state information for this asynchronous request.</param>
            <param name="e">Exception object, if the call resulted in exception.</param>
        </member>
        <member name="T:Facebook.Rest.Data.UpdateObjectCallback">
            <summary>
            Delegate called when UpdateObject call is completed.
            </summary>
            <param name="result">Boolean result.</param>
            <param name="state">An object containing state information for this asynchronous request.</param>
            <param name="e">Exception object, if the call resulted in exception.</param>
        </member>
        <member name="T:Facebook.Rest.Data.DeleteObjectCallback">
            <summary>
            Delegate called when DeleteObject call is completed.
            </summary>
            <param name="result">Boolean result.</param>
            <param name="state">An object containing state information for this asynchronous request.</param>
            <param name="e">Exception object, if the call resulted in exception.</param>
        </member>
        <member name="T:Facebook.Rest.Data.DeleteObjectsCallback">
            <summary>
            Delegate called when DeleteObjects call is completed.
            </summary>
            <param name="result">Boolean result.</param>
            <param name="state">An object containing state information for this asynchronous request.</param>
            <param name="e">Exception object, if the call resulted in exception.</param>
        </member>
        <member name="T:Facebook.Rest.Data.GetObjectCallback">
            <summary>
            Delegate called when GetObject call is completed.
            </summary>
            <param name="response">A data_getObject_response result.</param>
            <param name="state">An object containing state information for this asynchronous request.</param>
            <param name="e">Exception object, if the call resulted in exception.</param>
        </member>
        <member name="T:Facebook.Rest.Data.GetObjectsCallback">
            <summary>
            Delegate called when GetObjects call is completed.
            </summary>
            <param name="objects">A List of container objects.</param>
            <param name="state">An object containing state information for this asynchronous request.</param>
            <param name="e">Exception object, if the call resulted in exception.</param>
        </member>
        <member name="T:Facebook.Rest.Data.GetObjectPropertyCallback">
            <summary>
            Delegate called when GetObjectProperty call is completed.
            </summary>
            <param name="property">Property string.</param>
            <param name="state">An object containing state information for this asynchronous request.</param>
            <param name="e">Exception object, if the call resulted in exception.</param>
        </member>
        <member name="T:Facebook.Rest.Data.SetObjectPropertyCallback">
            <summary>
            Delegate called when SetObjectProperty call is completed.
            </summary>
            <param name="result">Boolean result.</param>
            <param name="state">An object containing state information for this asynchronous request.</param>
            <param name="e">Exception object, if the call resulted in exception.</param>
        </member>
        <member name="T:Facebook.Rest.Data.GetHashValueCallback">
            <summary>
            Delegate called when GetHashValue call is completed.
            </summary>
            <param name="hashValue">Hash string result.</param>
            <param name="state">An object containing state information for this asynchronous request.</param>
            <param name="e">Exception object, if the call resulted in exception.</param>
        </member>
        <member name="T:Facebook.Rest.Data.SetHashValueCallback">
            <summary>
            Delegate called when SetHashValue call is completed.
            </summary>
            <param name="object_id">Object identifer.</param>
            <param name="state">An object containing state information for this asynchronous request.</param>
            <param name="e">Exception object, if the call resulted in exception.</param>
        </member>
        <member name="T:Facebook.Rest.Data.IncHashValueCallback">
            <summary>
            Delegate called when IncHashValue call is completed.
            </summary>
            <param name="object_id">Object identifer.</param>
            <param name="state">An object containing state information for this asynchronous request.</param>
            <param name="e">Exception object, if the call resulted in exception.</param>
        </member>
        <member name="T:Facebook.Rest.Data.RemoveHashKeyCallback">
            <summary>
            Delegate called when RemoveHashKey call is completed.
            </summary>
            <param name="result">Boolean result.</param>
            <param name="state">An object containing state information for this asynchronous request.</param>
            <param name="e">Exception object, if the call resulted in exception.</param>
        </member>
        <member name="T:Facebook.Rest.Data.RemoveHashKeysCallback">
            <summary>
            Delegate called when RemoveHashKeys call is completed.
            </summary>
            <param name="result">Boolean result.</param>
            <param name="state">An object containing state information for this asynchronous request.</param>
            <param name="e">Exception object, if the call resulted in exception.</param>
        </member>
        <member name="T:Facebook.Rest.Data.DefineAssociationCallback">
            <summary>
            Delegate called when DefineAssociation call is completed.
            </summary>
            <param name="result">Boolean result.</param>
            <param name="state">An object containing state information for this asynchronous request.</param>
            <param name="e">Exception object, if the call resulted in exception.</param>
        </member>
        <member name="T:Facebook.Rest.Data.UndefineAssociationCallback">
            <summary>
            Delegate called when UndefineAssociation call is completed.
            </summary>
            <param name="result">Boolean result.</param>
            <param name="state">An object containing state information for this asynchronous request.</param>
            <param name="e">Exception object, if the call resulted in exception.</param>
        </member>
        <member name="T:Facebook.Rest.Data.RenameAssociationCallback">
            <summary>
            Delegate called when RenameAssociation call is completed.
            </summary>
            <param name="result">Boolean result.</param>
            <param name="state">An object containing state information for this asynchronous request.</param>
            <param name="e">Exception object, if the call resulted in exception.</param>
        </member>
        <member name="T:Facebook.Rest.Data.GetAssociationDefinitionCallback">
            <summary>
            Delegate called when GetAssociationDefinition call is completed.
            </summary>
            <param name="response">A data_getAssociationDefinition_response object.</param>
            <param name="state">An object containing state information for this asynchronous request.</param>
            <param name="e">Exception object, if the call resulted in exception.</param>
        </member>
        <member name="T:Facebook.Rest.Data.GetAssociationDefinitionsCallback">
            <summary>
            Delegate called when GetAssociationDefinitions call is completed.
            </summary>
            <param name="response">A data_getAssociationDefinitions_response object.</param>
            <param name="state">An object containing state information for this asynchronous request.</param>
            <param name="e">Exception object, if the call resulted in exception.</param>
        </member>
        <member name="T:Facebook.Rest.Data.SetAssociationCallback">
            <summary>
            Delegate called when SetAssociation call is completed.
            </summary>
            <param name="result">Boolean result.</param>
            <param name="state">An object containing state information for this asynchronous request.</param>
            <param name="e">Exception object, if the call resulted in exception.</param>
        </member>
        <member name="T:Facebook.Rest.Data.SetAssociationsCallback">
            <summary>
            Delegate called when SetAssociations call is completed.
            </summary>
            <param name="result">Boolean result.</param>
            <param name="state">An object containing state information for this asynchronous request.</param>
            <param name="e">Exception object, if the call resulted in exception.</param>
        </member>
        <member name="T:Facebook.Rest.Data.RemoveAssociationCallback">
            <summary>
            Delegate called when RemoveAssociation call is completed.
            </summary>
            <param name="result">Boolean result.</param>
            <param name="state">An object containing state information for this asynchronous request.</param>
            <param name="e">Exception object, if the call resulted in exception.</param>
        </member>
        <member name="T:Facebook.Rest.Data.RemoveAssociationsCallback">
            <summary>
            Delegate called when RemoveAssociations call is completed.
            </summary>
            <param name="result">Boolean result.</param>
            <param name="state">An object containing state information for this asynchronous request.</param>
            <param name="e">Exception object, if the call resulted in exception.</param>
        </member>
        <member name="T:Facebook.Rest.Data.RemoveAssociatedObjectsCallback">
            <summary>
            Delegate called when RemoveAssociatedObjects call is completed.
            </summary>
            <param name="result">Boolean result.</param>
            <param name="state">An object containing state information for this asynchronous request.</param>
            <param name="e">Exception object, if the call resulted in exception.</param>
        </member>
        <member name="T:Facebook.Rest.Data.GetAssociatedObjectsCallback">
            <summary>
            Delegate called when GetAssociatedObjects call is completed.
            </summary>
            <param name="response">A data_getAssociatedObjects_response object.</param>
            <param name="state">An object containing state information for this asynchronous request.</param>
            <param name="e">Exception object, if the call resulted in exception.</param>
        </member>
        <member name="T:Facebook.Rest.Data.GetAssociatedObjectCountCallback">
            <summary>
            Delegate called when GetAssociatedObjectCount call is completed.
            </summary>
            <param name="objectCount">Object count.</param>
            <param name="state">An object containing state information for this asynchronous request.</param>
            <param name="e">Exception object, if the call resulted in exception.</param>
        </member>
        <member name="T:Facebook.Rest.Data.GetAssociatedObjectCountsCallback">
            <summary>
            Delegate called when GetAssociatedObjectCounts call is completed.
            </summary>
            <param name="objectCounts">A List of object counts.</param>
            <param name="state">An object containing state information for this asynchronous request.</param>
            <param name="e">Exception object, if the call resulted in exception.</param>
        </member>
        <member name="T:Facebook.Rest.Data.GetAssociationsCallback">
            <summary>
            Delegate called when GetAssociations call is completed.
            </summary>
            <param name="response">A data_getAssociations_response object.</param>
            <param name="state">An object containing state information for this asynchronous request.</param>
            <param name="e">Exception object, if the call resulted in exception.</param>
        </member>
        <member name="T:Facebook.Rest.Data.GetCookiesCallback">
            <summary>
            Delegate called when GetCookies call is completed.
            </summary>
            <param name="cookies">A List of cookies.</param>
            <param name="state">An object containing state information for this asynchronous request.</param>
            <param name="e">Exception object, if the call resulted in exception.</param>
        </member>
        <member name="T:Facebook.Rest.Data.SetCookieCallback">
            <summary>
            Delegate called when SetCookie call is completed.
            </summary>
            <param name="result">Boolean result.</param>
            <param name="state">An object containing state information for this asynchronous request.</param>
            <param name="e">Exception object, if the call resulted in exception.</param>
        </member>
        <member name="T:Facebook.Rest.DataAssociation">
            <summary>
            Id-value pairs
            </summary>
        </member>
        <member name="P:Facebook.Rest.DataAssociation.name">
            <summary>
            Name of the association to set. 
            </summary>
        </member>
        <member name="P:Facebook.Rest.DataAssociation.id1">
            <summary>
            Object identifier 1. 
            </summary>
        </member>
        <member name="P:Facebook.Rest.DataAssociation.id2">
            <summary>
            Object identifier 2.
            </summary>
        </member>
        <member name="P:Facebook.Rest.DataAssociation.data">
            <summary>
            Optional - An arbitrary data (max. 255 characters) to store with this association. 
            </summary>
        </member>
        <member name="P:Facebook.Rest.DataAssociation.assoc_time">
            <summary>
            Optional - Default to association creation time. A timestamp to store with this association. 
            </summary>
        </member>
        <member name="T:Facebook.BindingHelper.FacebookPhotoAlbum">
            <summary>
            Represents a photo album object
            </summary>
        </member>
        <member name="M:Facebook.BindingHelper.FacebookPhotoAlbum.#ctor">
            <summary>
            Initializes FacebookPhotoAlbum object
            </summary>
        </member>
        <member name="M:Facebook.BindingHelper.FacebookPhotoAlbum.#ctor(Facebook.Schema.album)">
            <summary>
            Initializes FacebookPhotoAlbum object from underlying album object
            </summary>
            <param name="a">Album object</param>
        </member>
        <member name="M:Facebook.BindingHelper.FacebookPhotoAlbum.Refresh">
            <summary>
            Makes an async call to refresh photos information for this album
            </summary>
        </member>
        <member name="M:Facebook.BindingHelper.FacebookPhotoAlbum.Equals(Facebook.BindingHelper.FacebookPhotoAlbum)">
            <summary>
            Overridden operator to compare this album to another album
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.FacebookPhotoAlbum.IsMyProfilePicturesAlbum">
            <summary>
             Is the album the owners
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.FacebookPhotoAlbum.Photos">
            <summary>
            Photos collection in this album
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.FacebookPhotoAlbum.Owner">
            <summary>
            FacebookContact object for owner of this album
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.FacebookPhotoAlbum.OwnerName">
            <summary>
            The name of the user who owns this photo album
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.FacebookPhotoAlbum.CoverPhoto">
            <summary>
            Coverphoto object
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.FacebookPhotoAlbum.AlbumId">
            <summary>
            Album id
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.FacebookPhotoAlbum.CoverPid">
            <summary>
            Cover photo id
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.FacebookPhotoAlbum.OwnerId">
            <summary>
            Owner id
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.FacebookPhotoAlbum.Name">
            <summary>
            Name of album
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.FacebookPhotoAlbum.Created">
            <summary>
            Created time in facebook format
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.FacebookPhotoAlbum.CreatedTime">
            <summary>
            Created time of album
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.FacebookPhotoAlbum.Modified">
            <summary>
            Modified time in facebook format
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.FacebookPhotoAlbum.ModifiedTime">
            <summary>
            Modified time of album
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.FacebookPhotoAlbum.Description">
            <summary>
            Description of album
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.FacebookPhotoAlbum.Location">
            <summary>
            Location information
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.FacebookPhotoAlbum.Link">
            <summary>
            Link information
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.FacebookPhotoAlbum.Size">
            <summary>
            Number of photos in the album
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.FacebookPhotoAlbum.Visible">
            <summary>
            Visible information
            </summary>
        </member>
        <member name="E:Facebook.BindingHelper.FacebookPhotoAlbum.PropertyChanged">
            <summary>
            Proeprty change event
            </summary>
        </member>
        <member name="F:Facebook.Winforms.Forms.FacebookAuthentication.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Facebook.Winforms.Forms.FacebookAuthentication.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Facebook.Winforms.Forms.FacebookAuthentication.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Facebook.BindingHelper.DataCollectionErrorEventArgs">
            <summary>
            Represents event args for DataCollectionError
            </summary>
        </member>
        <member name="M:Facebook.BindingHelper.DataCollectionErrorEventArgs.#ctor(Facebook.Utility.FacebookException)">
            <summary>
            Creates new DataCollectionErrorEventArgs object
            </summary>
            <param name="exception"></param>
        </member>
        <member name="P:Facebook.BindingHelper.DataCollectionErrorEventArgs.Exception">
            <summary>
            Exception that was generated when updating the collection
            </summary>
        </member>
        <member name="T:Facebook.Utility.FacebookStreamPostCollection">
            <summary>
            Represents collection of Stream posts
            </summary>
        </member>
        <member name="M:Facebook.Utility.FacebookStreamPostCollection.#ctor">
            <summary>
            Initializes FacebookContactCollection object
            </summary>
        </member>
        <member name="M:Facebook.Utility.FacebookStreamPostCollection.#ctor(System.Collections.Generic.IEnumerable{Facebook.Utility.FacebookStreamPost})">
            <summary>
            Initializes FacebookContactCollection from contacts list
            </summary>
            <param name="posts">list of posts</param>
        </member>
        <member name="T:Facebook.Utility.FacebookStreamPost">
            <summary>
            Contains information about a stream post
            </summary>
        </member>
        <member name="M:Facebook.Utility.FacebookStreamPost.#ctor(Facebook.Schema.stream_post)">
            <summary>
            Constructor that hydrates this object from xml data transfer object
            </summary>
        </member>
        <member name="P:Facebook.Utility.FacebookStreamPost.PostId">
            <summary>
            Id of this post
            </summary>
        </member>
        <member name="P:Facebook.Utility.FacebookStreamPost.ViewerId">
            <summary>
            viewer id
            </summary>
        </member>
        <member name="P:Facebook.Utility.FacebookStreamPost.View">
            <summary>
            View information
            </summary>
        </member>
        <member name="P:Facebook.Utility.FacebookStreamPost.SourceId">
            <summary>
            Source id of this post
            </summary>
        </member>
        <member name="P:Facebook.Utility.FacebookStreamPost.Type">
            <summary>
            Type of this post
            </summary>
        </member>
        <member name="P:Facebook.Utility.FacebookStreamPost.AppId">
            <summary>
            App id that posted this
            </summary>
        </member>
        <member name="P:Facebook.Utility.FacebookStreamPost.Attribution">
            <summary>
            Attribution information
            </summary>
        </member>
        <member name="P:Facebook.Utility.FacebookStreamPost.ActorId">
            <summary>
            userId of the user who posted this post
            </summary>
        </member>
        <member name="P:Facebook.Utility.FacebookStreamPost.ActorProfile">
            <summary>
            </summary>
        </member>
        <member name="P:Facebook.Utility.FacebookStreamPost.TargetId">
            <summary>
            Target id
            </summary>
        </member>
        <member name="P:Facebook.Utility.FacebookStreamPost.Message">
            <summary>
            Post message
            </summary>
        </member>
        <member name="P:Facebook.Utility.FacebookStreamPost.Attachment">
            <summary>
            Attachment information
            </summary>
        </member>
        <member name="P:Facebook.Utility.FacebookStreamPost.AppData">
            <summary>
            App data for this post
            </summary>
        </member>
        <member name="P:Facebook.Utility.FacebookStreamPost.ActionLinks">
            <summary>
            Action links for this post
            </summary>
        </member>
        <member name="P:Facebook.Utility.FacebookStreamPost.StreamComments">
            <summary>
            Comments information for this post
            </summary>
        </member>
        <member name="P:Facebook.Utility.FacebookStreamPost.Likes">
            <summary>
            Likes information for this post
            </summary>
        </member>
        <member name="P:Facebook.Utility.FacebookStreamPost.Updated">
            <summary>
            Updated time in facebook format
            </summary>
        </member>
        <member name="P:Facebook.Utility.FacebookStreamPost.UpdatedTime">
            <summary>
            Time of last update to this post
            </summary>
        </member>
        <member name="P:Facebook.Utility.FacebookStreamPost.Created">
            <summary>
            Created time in facebook format
            </summary>
        </member>
        <member name="P:Facebook.Utility.FacebookStreamPost.CreatedTime">
            <summary>
            This this post was created
            </summary>
        </member>
        <member name="T:Facebook.Utility.FacebookStreamActionLink">
            <summary>
            Represents Stream property information
            </summary>
        </member>
        <member name="M:Facebook.Utility.FacebookStreamActionLink.#ctor(Facebook.Schema.stream_action_link)">
            <summary>
            Constructor to hydrate given an object serialized from xml
            </summary>
        </member>
        <member name="P:Facebook.Utility.FacebookStreamActionLink.Name">
            <summary>
            Name of property
            </summary>
        </member>
        <member name="P:Facebook.Utility.FacebookStreamActionLink.Text">
            <summary>
            Text of property
            </summary>
        </member>
        <member name="P:Facebook.Utility.FacebookStreamActionLink.Href">
            <summary>
            Href of property
            </summary>
        </member>
        <member name="T:Facebook.Utility.FacebookStreamAppData">
            <summary>
            Represents stream app data information
            </summary>
        </member>
        <member name="M:Facebook.Utility.FacebookStreamAppData.#ctor(Facebook.Schema.stream_app_data)">
            <summary>
            Constructor that populates this object for xml deserialized version
            </summary>
        </member>
        <member name="P:Facebook.Utility.FacebookStreamAppData.TbId">
            <summary>
            Id of data
            </summary>
        </member>
        <member name="P:Facebook.Utility.FacebookStreamAppData.AttachmentData">
            <summary>
            Attachement data
            </summary>
        </member>
        <member name="P:Facebook.Utility.FacebookStreamAppData.Images">
            <summary>
            Images information
            </summary>
        </member>
        <member name="T:Facebook.Utility.FacebookStreamComments">
            <summary>
            Represents comments information
            </summary>
        </member>
        <member name="P:Facebook.Utility.FacebookStreamComments.CanRemove">
            <summary>
            Specifies if user can remove a comment
            </summary>
        </member>
        <member name="P:Facebook.Utility.FacebookStreamComments.CanPost">
            <summary>
            Specifies if user can post a comment
            </summary>
        </member>
        <member name="P:Facebook.Utility.FacebookStreamComments.Count">
            <summary>
            Number of comments for the post
            </summary>
        </member>
        <member name="P:Facebook.Utility.FacebookStreamComments.Comments">
            <summary>
            List of comments for this post
            </summary>
        </member>
        <member name="T:Facebook.Utility.FacebookComment">
            <summary>
            Represents a facebook comment
            </summary>
        </member>
        <member name="M:Facebook.Utility.FacebookComment.#ctor(Facebook.Schema.comment)">
            <summary>
            Hydrates this object from a comment
            </summary>
        </member>
        <member name="P:Facebook.Utility.FacebookComment.XId">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:Facebook.Utility.FacebookComment.FromId">
            <summary>
            Id of user who commented
            </summary>
        </member>
        <member name="P:Facebook.Utility.FacebookComment.FromUser">
            <summary>
            </summary>
        </member>
        <member name="P:Facebook.Utility.FacebookComment.time">
            <summary>
            Time in facebook format
            </summary>
        </member>
        <member name="P:Facebook.Utility.FacebookComment.Time">
            <summary>
            Time when this comment was made
            </summary>
        </member>
        <member name="P:Facebook.Utility.FacebookComment.Text">
            <summary>
            Text of comment
            </summary>
        </member>
        <member name="P:Facebook.Utility.FacebookComment.CommentId">
            <summary>
            Comment id
            </summary>
        </member>
        <member name="P:Facebook.Utility.FacebookComment.UserName">
            <summary>
            Username who made this comment
            </summary>
        </member>
        <member name="P:Facebook.Utility.FacebookComment.ReplyXId">
            <summary>
            Reply xid
            </summary>
        </member>
        <member name="P:Facebook.Utility.FacebookComment.PostId">
            <summary>
            Post id for which the comment was made.
            </summary>
        </member>
        <member name="T:Facebook.Utility.FacebookStreamLikes">
            <summary>
            Contains information about stream likes
            </summary>
        </member>
        <member name="M:Facebook.Utility.FacebookStreamLikes.#ctor(Facebook.Schema.stream_likes)">
            <summary>
            hydrate the object from schema object deserialized from xml response.
            </summary>
        </member>
        <member name="P:Facebook.Utility.FacebookStreamLikes.Href">
            <summary>
            Href of likes information
            </summary>
        </member>
        <member name="P:Facebook.Utility.FacebookStreamLikes.Count">
            <summary>
            Count of likes
            </summary>
        </member>
        <member name="P:Facebook.Utility.FacebookStreamLikes.Friends">
            <summary>
            List of friends who liked the pst
            </summary>
        </member>
        <member name="P:Facebook.Utility.FacebookStreamLikes.UserLikes">
            <summary>
            User Likes
            </summary>
        </member>
        <member name="P:Facebook.Utility.FacebookStreamLikes.CanLikes">
            <summary>
            specified if user can like the comment
            </summary>
        </member>
        <member name="T:Facebook.Utility.FacebookStreamAttachment">
            <summary>
            Represents attachment information
            </summary>
        </member>
        <member name="M:Facebook.Utility.FacebookStreamAttachment.#ctor(Facebook.Schema.stream_attachment)">
            <summary>
            hydrates object with object from xml deserialization
            </summary>
        </member>
        <member name="M:Facebook.Utility.FacebookStreamAttachment.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Facebook.Utility.FacebookStreamAttachment.Media">
            <summary>
            List of media information
            </summary>
        </member>
        <member name="P:Facebook.Utility.FacebookStreamAttachment.Name">
            <summary>
            Name of attachment
            </summary>
        </member>
        <member name="P:Facebook.Utility.FacebookStreamAttachment.Href">
            <summary>
            Href of attachement
            </summary>
        </member>
        <member name="P:Facebook.Utility.FacebookStreamAttachment.Caption">
            <summary>
            Caption of attachment
            </summary>
        </member>
        <member name="P:Facebook.Utility.FacebookStreamAttachment.Description">
            <summary>
            Description of attachment
            </summary>
        </member>
        <member name="P:Facebook.Utility.FacebookStreamAttachment.Latitude">
            <summary>
            Latitude of attachment
            </summary>
        </member>
        <member name="P:Facebook.Utility.FacebookStreamAttachment.Longitude">
            <summary>
            Longitude of attachment
            </summary>
        </member>
        <member name="P:Facebook.Utility.FacebookStreamAttachment.Icon">
            <summary>
            Icon
            </summary>
        </member>
        <member name="T:Facebook.Utility.FacebookStreamMedia">
            <summary>
            Represent sstream media information
            </summary>
        </member>
        <member name="M:Facebook.Utility.FacebookStreamMedia.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Facebook.Utility.FacebookStreamMedia.#ctor(Facebook.Schema.stream_media)">
            <summary>
            hydrates object from object from xml deserialization
            </summary>
        </member>
        <member name="P:Facebook.Utility.FacebookStreamMedia.Href">
            <summary>
            Href of media
            </summary>
        </member>
        <member name="P:Facebook.Utility.FacebookStreamMedia.Alt">
            <summary>
            Alt information
            </summary>
        </member>
        <member name="P:Facebook.Utility.FacebookStreamMedia.Type">
            <summary>
            Type of media
            </summary>
        </member>
        <member name="P:Facebook.Utility.FacebookStreamMedia.Source">
            <summary>
            Media source
            </summary>
        </member>
        <member name="P:Facebook.Utility.FacebookStreamMedia.Video">
            <summary>
            Video information
            </summary>
        </member>
        <member name="P:Facebook.Utility.FacebookStreamMedia.Obj">
            <summary>
            Object information
            </summary>
        </member>
        <member name="P:Facebook.Utility.FacebookStreamMedia.Music">
            <summary>
            Music information
            </summary>
        </member>
        <member name="P:Facebook.Utility.FacebookStreamMedia.Data">
            <summary>
            Data information
            </summary>
        </member>
        <member name="P:Facebook.Utility.FacebookStreamMedia.Photo">
            <summary>
            Photo information
            </summary>
        </member>
        <member name="P:Facebook.Utility.FacebookStreamMedia.Swf">
            <summary>
            Flash object information
            </summary>
        </member>
        <member name="T:Facebook.Utility.FacebookStreamVideo">
            <summary>
            Represents a video in stream
            </summary>
        </member>
        <member name="P:Facebook.Utility.FacebookStreamVideo.DisplayUrl">
            <summary>
            Display url
            </summary>
        </member>
        <member name="P:Facebook.Utility.FacebookStreamVideo.SourceUrl">
            <summary>
            source url
            </summary>
        </member>
        <member name="P:Facebook.Utility.FacebookStreamVideo.Owner">
            <summary>
            Owner information
            </summary>
        </member>
        <member name="P:Facebook.Utility.FacebookStreamVideo.PermaLink">
            <summary>
            Perma link
            </summary>
        </member>
        <member name="P:Facebook.Utility.FacebookStreamVideo.PreviewImg">
            <summary>
            Preview image
            </summary>
        </member>
        <member name="T:Facebook.Utility.FacebookStreamMusic">
            <summary>
            Represents music information in steam
            </summary>
        </member>
        <member name="P:Facebook.Utility.FacebookStreamMusic.SourceUrl">
            <summary>
            Source url
            </summary>
        </member>
        <member name="P:Facebook.Utility.FacebookStreamMusic.Title">
            <summary>
            Title 
            </summary>
        </member>
        <member name="P:Facebook.Utility.FacebookStreamMusic.Artist">
            <summary>
            Artist info
            </summary>
        </member>
        <member name="P:Facebook.Utility.FacebookStreamMusic.Album">
            <summary>
            Album info
            </summary>
        </member>
        <member name="T:Facebook.Utility.FacebookStreamPhoto">
            <summary>
            Represents photo info in stream
            </summary>
        </member>
        <member name="P:Facebook.Utility.FacebookStreamPhoto.AlbumId">
            <summary>
            Album id
            </summary>
        </member>
        <member name="P:Facebook.Utility.FacebookStreamPhoto.PhotoId">
            <summary>
            Photo Id
            </summary>
        </member>
        <member name="P:Facebook.Utility.FacebookStreamPhoto.Owner">
            <summary>
            Owner information
            </summary>
        </member>
        <member name="P:Facebook.Utility.FacebookStreamPhoto.Index">
            <summary>
            Index information
            </summary>
        </member>
        <member name="T:Facebook.Utility.FacebookStreamSwf">
            <summary>
            Represents flash object information
            </summary>
        </member>
        <member name="P:Facebook.Utility.FacebookStreamSwf.SourceUrl">
            <summary>
            source url
            </summary>
        </member>
        <member name="P:Facebook.Utility.FacebookStreamSwf.PreviewImg">
            <summary>
            Preivew image url
            </summary>
        </member>
        <member name="P:Facebook.Utility.FacebookStreamSwf.FlashVars">
            <summary>
            flash vars
            </summary>
        </member>
        <member name="P:Facebook.Utility.FacebookStreamSwf.Width">
            <summary>
            width info
            </summary>
        </member>
        <member name="P:Facebook.Utility.FacebookStreamSwf.Height">
            <summary>
            Height info
            </summary>
        </member>
        <member name="T:Facebook.Utility.StreamFilter">
            <summary>
            StreamFilter
            </summary>
        </member>
        <member name="M:Facebook.Utility.StreamFilter.#ctor(Facebook.Schema.stream_filter)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Facebook.Utility.StreamFilter.UserId">
            <summary>
            UserId of user
            </summary>
        </member>
        <member name="P:Facebook.Utility.StreamFilter.FilterKey">
            <summary>
            A key identifying a particular filter for a user's stream
            </summary>
        </member>
        <member name="P:Facebook.Utility.StreamFilter.Name">
            <summary>
            The name of the filter 
            </summary>
        </member>
        <member name="P:Facebook.Utility.StreamFilter.Rank">
            <summary>
            A 32-bit int that indicates where the filter appears in the sort
            </summary>
        </member>
        <member name="P:Facebook.Utility.StreamFilter.IconUrl">
            <summary>
            The URL to the filter icon
            </summary>
        </member>
        <member name="P:Facebook.Utility.StreamFilter.Visible">
            <summary>
            If true, indicates that the filter is visible on the home page
            </summary>
        </member>
        <member name="P:Facebook.Utility.StreamFilter.Type">
            <summary>
            The type of filter. One of application, newsfeed, friendlist, network, or publicprofile
            </summary>
        </member>
        <member name="P:Facebook.Utility.StreamFilter.value">
            <summary>
            A 64-bit ID for the filter type
            </summary>
        </member>
        <member name="T:Facebook.Rest.Groups">
            <summary>
            Facebook Groups API methods.
            </summary>
        </member>
        <member name="M:Facebook.Rest.Groups.#ctor(Facebook.Session.IFacebookSession)">
            <summary>
            Public constructor for facebook.Groups
            </summary>
            <param name="session">Needs a connected Facebook Session object for making requests</param>
        </member>
        <member name="M:Facebook.Rest.Groups.Get">
            <summary>
            Returns all visible groups according to the filters specified.  
            This may be used to find all groups of which a user is as member, or to query specific gids.
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
            var result = api.Groups.Get();
            </code>
            </example>
            <returns>This method returns all groups satisfying the filters specified. The method can be used to return all groups associated with user, or query a specific set of events by a list of gids. If both the uid and gids parameters are provided, the method returns all groups in the set of gids, with which the user is associated. If the gids parameter is omitted, the method returns all groups associated with the provided user.</returns>
            <remarks>Group creators will be visible to an application only if the creator has not turned off access to the Platform or used the application'; If the creator has opted out, the creator element will appear as nil=true.</remarks>
        </member>
        <member name="M:Facebook.Rest.Groups.Get(System.Int64)">
            <summary>
            Returns all visible groups according to the filters specified.  
            This may be used to find all groups of which a user is as member, or to query specific gids.
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
            var result = api.Groups.Get(Constants.UserId);
            </code>
            </example>
            <param name="uid">Filter by groups associated with a user with this uid</param>
            <returns>This method returns all groups satisfying the filters specified. The method can be used to return all groups associated with user, or query a specific set of events by a list of gids. If both the uid and gids parameters are provided, the method returns all groups in the set of gids, with which the user is associated. If the gids parameter is omitted, the method returns all groups associated with the provided user.</returns>
            <remarks>Group creators will be visible to an application only if the creator has not turned off access to the Platform or used the application'; If the creator has opted out, the creator element will appear as nil=true.</remarks>
        </member>
        <member name="M:Facebook.Rest.Groups.Get(System.Collections.Generic.List{System.Int64})">
            <summary>
            Returns all visible groups according to the filters specified.  
            This may be used to find all groups of which a user is as member, or to query specific gids.
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
            List&lt;long&gt; gids = new List&lt;long&gt; { Constants.GroupId };
            var result = api.Groups.Get(gids);
            </code>
            </example>
            <param name="gids">Filter by this list of group ids. This is a List of gids.</param>
            <returns>This method returns all groups satisfying the filters specified. The method can be used to return all groups associated with user, or query a specific set of events by a list of gids. If both the uid and gids parameters are provided, the method returns all groups in the set of gids, with which the user is associated. If the gids parameter is omitted, the method returns all groups associated with the provided user.</returns>
            <remarks>Group creators will be visible to an application only if the creator has not turned off access to the Platform or used the application'; If the creator has opted out, the creator element will appear as nil=true.</remarks>
        </member>
        <member name="M:Facebook.Rest.Groups.Get(System.Int64,System.Collections.Generic.List{System.Int64})">
            <summary>
            Returns all visible groups according to the filters specified.  
            This may be used to find all groups of which a user is as member, or to query specific gids.
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
            List&lt;long&gt; gids = new List&lt;long&gt; { Constants.GroupId };
            var result = api.Groups.Get(Constants.UserId, gids);
            </code>
            </example>
            <param name="uid">Filter by groups associated with a user with this uid</param>
            <param name="gids">Filter by this list of group ids. This is a List of gids.</param>
            <returns>This method returns all groups satisfying the filters specified. The method can be used to return all groups associated with user, or query a specific set of events by a list of gids. If both the uid and gids parameters are provided, the method returns all groups in the set of gids, with which the user is associated. If the gids parameter is omitted, the method returns all groups associated with the provided user.</returns>
            <remarks>Group creators will be visible to an application only if the creator has not turned off access to the Platform or used the application'; If the creator has opted out, the creator element will appear as nil=true.</remarks>
        </member>
        <member name="M:Facebook.Rest.Groups.GetMembers(System.Int64)">
            <summary>
            Returns membership list data associated with a group.
            </summary>
            <param name="gid">Group ID for which to retrieve member list.</param>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
            var result = api.Groups.GetMembers(Constants.GroupId);
            </code>
            </example>
            <returns>This method returns four (possibly empty) lists of users associated with a group, keyed on their associations. The members list will contain the officers and admins lists, but will not overlap with the not_replied list.</returns>
        </member>
        <member name="M:Facebook.Rest.Groups.GetAsync(Facebook.Rest.Groups.GetCallback,System.Object)">
             <summary>
             Returns all visible groups according to the filters specified.  
             This may be used to find all groups of which a user is as member, or to query specific gids.
             </summary>
             <example>
             <code>
             private static void RunDemoAsync()
             {
                 FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.ApplicationSecret, Constants.SessionKey));
                 api.Groups.GetAsync(AsyncDemoCompleted, null);
             }
            
             private static void AsyncDemoCompleted(IList&lt;group&gt; result, Object state, FacebookException e)
             {
                 var actual = result;
             }
             </code>
             </example>
             <param name="callback">The AsyncCallback delegate</param>
             <param name="state">An object containing state information for this asynchronous request</param>        
             <returns>This method returns all groups satisfying the filters specified. The method can be used to return all groups associated with user, or query a specific set of events by a list of gids. If both the uid and gids parameters are provided, the method returns all groups in the set of gids, with which the user is associated. If the gids parameter is omitted, the method returns all groups associated with the provided user.</returns>
             <remarks>Group creators will be visible to an application only if the creator has not turned off access to the Platform or used the application'; If the creator has opted out, the creator element will appear as nil=true.</remarks>
        </member>
        <member name="M:Facebook.Rest.Groups.GetAsync(System.Int64,Facebook.Rest.Groups.GetCallback,System.Object)">
             <summary>
             Returns all visible groups according to the filters specified.  
             This may be used to find all groups of which a user is as member, or to query specific gids.
             </summary>
             <example>
             <code>
             private static void RunDemoAsync()
             {
                 FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.ApplicationSecret, Constants.SessionKey));
                 api.Groups.GetAsync(Constants.UserId, AsyncDemoCompleted, null);
             }
            
             private static void AsyncDemoCompleted(IList&lt;group&gt; result, Object state, FacebookException e)
             {
                 var actual = result;
             }
             </code>
             </example>
             <param name="uid">Filter by groups associated with a user with this uid</param>
             <param name="callback">The AsyncCallback delegate</param>
             <param name="state">An object containing state information for this asynchronous request</param>        
             <returns>This method returns all groups satisfying the filters specified. The method can be used to return all groups associated with user, or query a specific set of events by a list of gids. If both the uid and gids parameters are provided, the method returns all groups in the set of gids, with which the user is associated. If the gids parameter is omitted, the method returns all groups associated with the provided user.</returns>
             <remarks>Group creators will be visible to an application only if the creator has not turned off access to the Platform or used the application'; If the creator has opted out, the creator element will appear as nil=true.</remarks>
        </member>
        <member name="M:Facebook.Rest.Groups.GetAsync(System.Collections.Generic.List{System.Int64},Facebook.Rest.Groups.GetCallback,System.Object)">
             <summary>
             Returns all visible groups according to the filters specified.  
             This may be used to find all groups of which a user is as member, or to query specific gids.
             </summary>
             <example>
             <code>
             private static void RunDemoAsync()
             {
                 FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.ApplicationSecret, Constants.SessionKey));
                 List&lt;long&gt; gids = new List&lt;long&gt; { Constants.GroupId };
                 api.Groups.GetAsync(gids, AsyncDemoCompleted, null);
             }
            
             private static void AsyncDemoCompleted(IList&lt;group&gt; result, Object state, FacebookException e)
             {
                 var actual = result;
             }
             </code>
             </example>
             <param name="gids">Filter by this list of group ids. This is a List of gids.</param>
             <param name="callback">The AsyncCallback delegate</param>
             <param name="state">An object containing state information for this asynchronous request</param>        
             <returns>This method returns all groups satisfying the filters specified. The method can be used to return all groups associated with user, or query a specific set of events by a list of gids. If both the uid and gids parameters are provided, the method returns all groups in the set of gids, with which the user is associated. If the gids parameter is omitted, the method returns all groups associated with the provided user.</returns>
             <remarks>Group creators will be visible to an application only if the creator has not turned off access to the Platform or used the application'; If the creator has opted out, the creator element will appear as nil=true.</remarks>
        </member>
        <member name="M:Facebook.Rest.Groups.GetAsync(System.Int64,System.Collections.Generic.List{System.Int64},Facebook.Rest.Groups.GetCallback,System.Object)">
             <summary>
             Returns all visible groups according to the filters specified.  
             This may be used to find all groups of which a user is as member, or to query specific gids.
             </summary>
             <example>
             <code>
             private static void RunDemoAsync()
             {
                 FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.ApplicationSecret, Constants.SessionKey));
                 List&lt;long&gt; gids = new List&lt;long&gt; { Constants.GroupId };
                 api.Groups.GetAsync(Constants.UserId, gids, AsyncDemoCompleted, null);
             }
            
             private static void AsyncDemoCompleted(IList&lt;group&gt; result, Object state, FacebookException e)
             {
                 var actual = result;
             }
             </code>
             </example>
             <param name="uid">Filter by groups associated with a user with this uid</param>
             <param name="gids">Filter by this list of group ids. This is a List of gids.</param>
             <param name="callback">The AsyncCallback delegate</param>
             <param name="state">An object containing state information for this asynchronous request</param>        
             <returns>This method returns all groups satisfying the filters specified. The method can be used to return all groups associated with user, or query a specific set of events by a list of gids. If both the uid and gids parameters are provided, the method returns all groups in the set of gids, with which the user is associated. If the gids parameter is omitted, the method returns all groups associated with the provided user.</returns>
             <remarks>Group creators will be visible to an application only if the creator has not turned off access to the Platform or used the application'; If the creator has opted out, the creator element will appear as nil=true.</remarks>
        </member>
        <member name="M:Facebook.Rest.Groups.GetMembersAsync(System.Int64,Facebook.Rest.Groups.GetMembersCallback,System.Object)">
             <summary>
             Returns membership list data associated with a group.
             </summary>
             <param name="gid">Group ID for which to retrieve member list.</param>
             <example>
             <code>
             private static void RunDemoAsync()
             {
                 FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.ApplicationSecret, Constants.SessionKey));
                 api.Groups.GetMembersAsync(Constants.GroupId, AsyncDemoCompleted, null);
             }
            
             private static void AsyncDemoCompleted(group_members result, Object state, FacebookException e)
             {
                 var actual = result;
             }
             </code>
             </example>
             <param name="callback">The AsyncCallback delegate</param>
             <param name="state">An object containing state information for this asynchronous request</param>        
             <returns>This method returns four (possibly empty) lists of users associated with a group, keyed on their associations. The members list will contain the officers and admins lists, but will not overlap with the not_replied list.</returns>
        </member>
        <member name="T:Facebook.Rest.Groups.GetCallback">
            <summary>
            Delegate called when GetGroups call is completed.
            </summary>
            <param name="groups">List of user objects</param>
            <param name="state">An object containing state information for this asynchronous request</param>
            <param name="e">Exception object, if the call resulted in exception.</param>
        </member>
        <member name="T:Facebook.Rest.Groups.GetMembersCallback">
            <summary>
            Delegate called when GetGroupMembers call is completed.
            <param name="members">List of group members</param>
            <param name="state">An object containing state information for this asynchronous request</param>
            <param name="e">Exception object, if the call resulted in exception.</param>
            </summary>
        </member>
        <member name="T:Facebook.Rest.Connect">
            <summary>
            Facebook Connect API methods.
            </summary>
        </member>
        <member name="M:Facebook.Rest.Connect.#ctor(Facebook.Session.IFacebookSession)">
            <summary>
            Public constructor for facebook.Connect
            </summary>
            <param name="session">Needs a connected Facebook Session object for making requests</param>
        </member>
        <member name="M:Facebook.Rest.Connect.UnregisterUsers(System.Collections.Generic.List{System.String})">
            <summary>
            Unregisters a previously registered account (using connect.registerUsers). You should call this method if the user deletes his or her account on your site. (for Facebook Connect).
            </summary>
            <example>
            <code>
            ConnectSession _connectSession = new ConnectSession(Constants.ApplicationKey, Constants.ApplicationSecret);
            
            NOTE: This is shortened for brevity; would require a postback after completing Facebook Connect authentication.
            
            if (_connectSession.IsConnected())
            {
                FacebookApi _api = new FacebookApi(_connectSession);
                List&lt;string&gt; hashes = new List&lt;string&gt;();
                hashes.Add(_currentUser.email_hashes.email_hashes_elt[0]);
                var result = _api.Connect.UnregisterUsers(hashes);
            }
            </code>
            </example>
            <param name="email_hashes">An array of email_hashes to unregister.</param>
            <returns>This method returns a List of unregistered email hashes. If any email hashes are missing, we recommend that you try unregistering the account again later.</returns>
        </member>
        <member name="M:Facebook.Rest.Connect.RegisterUsers(System.Collections.Generic.List{Facebook.Rest.ConnectAccountMap})">
            <summary>
            Creates an association between an existing user account on your site and that user's Facebook account, provided the user has not connected accounts before (for Facebook Connect).
            </summary>
            <example>
            <code>
            ConnectSession _connectSession = new ConnectSession(Constants.ApplicationKey, Constants.ApplicationSecret);
            
            NOTE: This is shortened for brevity; would require a postback after completing Facebook Connect authentication.
            
            if (_connectSession.IsConnected())
            {
                _api = new FacebookApi(_connectSession);
                var registerList = new List&lt;ConnectAccountMap&gt;();
                registerList.Add(new ConnectAccountMap
                {
                    EmailAddress = "facebook@claritycon.com",
                    AccountId = "10001"
                });
                var result = _api.Connect.RegisterUsers(registerList);
            }
            </code>
            </example>
            <param name="accounts">An array of up to 1,000 arrays, or "maps," where each map represent a connected account.</param>
            <returns>This method returns a List email hashes that have been successfully registered. If any email hashes are missing, we recommend that you try registering them again later.</returns>
        </member>
        <member name="M:Facebook.Rest.Connect.GetUnconnectedFriends">
            <summary>
            Returns the number of friends of the current user who have accounts on your site, but have not yet connected their accounts. (for [{Facebook Connect]]).
            </summary>
            <example>
            <code>
            ConnectSession connectSession = new ConnectSession(Constants.ApplicationKey, Constants.ApplicationSecret);
            /// 
            /// NOTE: This is shortened for brevity; would require a postback after completing Facebook Connect authentication.
            /// 
            /// if(connectSession.IsConnected())
            {
                FacebookApi api = new FacebookApi(connectSession);
                var result = api.Connect.GetUnconnectedFriends();
            }
            </code>
            </example>
            <returns>This method returns an int that indicates the number of users who have not yet connected their accounts.</returns>
        </member>
        <member name="M:Facebook.Rest.Connect.UnregisterUsersAsync(System.Collections.Generic.List{System.String},Facebook.Rest.Connect.UnregisterUsersCallback,System.Object)">
             <summary>
             Unregisters a previously registered account (using connect.registerUsers). You should call this method if the user deletes his or her account on your site. (for Facebook Connect).
             </summary>
             <example>
             <code>
             private static void RunDemo()
             {
                 ConnectSession connectSession = new ConnectSession(Constants.ApplicationKey, Constants.ApplicationSecret);
            
                 /// 
                 /// NOTE: This is shortened for brevity; would require a postback after completing Facebook Connect authentication.
                 /// 
                
                 if (connectSession.IsConnected())
                 {
                     FacebookApi _api = new FacebookApi(connectSession);
                     List&lt;string&gt; hashes = new List&lt;string&gt;();
                     hashes.Add(_currentUser.email_hashes.email_hashes_elt[0]);
                     _api.Connect.UnregisterUsersAsync(hashes, AsyncDemoCompleted, null); 
                 }
             }
             
             private static void AsyncDemoCompleted(bool result, object state, FacebookException e)
             {
                 var actual = result;
             }
             </code>
             </example>
             <param name="email_hashes">An array of email_hashes to unregister.</param>
             <param name="callback">The AsyncCallback delegate</param>
             <param name="state">An object containing state information for this asynchronous request</param>        
             <returns>This method returns a List of unregistered email hashes. If any email hashes are missing, we recommend that you try unregistering the account again later.</returns>
        </member>
        <member name="M:Facebook.Rest.Connect.RegisterUsersAsync(System.Collections.Generic.List{Facebook.Rest.ConnectAccountMap},Facebook.Rest.Connect.RegisterUsersCallback,System.Object)">
             <summary>
             Creates an association between an existing user account on your site and that user's Facebook account, provided the user has not connected accounts before (for Facebook Connect).
             </summary>
             <example>
             <code>
             private static void RunDemo()
             {
                 ConnectSession connectSession = new ConnectSession(Constants.ApplicationKey, Constants.ApplicationSecret);
            
                 /// 
                 /// NOTE: This is shortened for brevity; would require a postback after completing Facebook Connect authentication.
                 /// 
                
                 if (connectSession.IsConnected())
                 {
                     FacebookApi _api = new FacebookApi(connectSession);
            
                     var registerList = new List&lt;ConnectAccountMap&gt;();
                     registerList.Add(new ConnectAccountMap
                                          {
                                              EmailAddress = "facebook@claritycon.com",
                                              AccountId = "10001"
                                          });
                     _api.Connect.RegisterUsersAsync(registerList, AsyncDemoCompleted, null);
                 }
             }
             
             private static void AsyncDemoCompleted(bool result, object state, FacebookException e)
             {
                 var actual = result;
             }
             </code>
             </example>
             <param name="accounts">An array of up to 1,000 arrays, or "maps," where each map represent a connected account.</param>
             <param name="callback">The AsyncCallback delegate</param>
             <param name="state">An object containing state information for this asynchronous request</param>        
             <returns>This method returns a List email hashes that have been successfully registered. If any email hashes are missing, we recommend that you try registering them again later.</returns>
        </member>
        <member name="M:Facebook.Rest.Connect.GetUnconnectedFriendsAsync(Facebook.Rest.Connect.GetUnconnectedFriendsCallback,System.Object)">
             <summary>
             Returns the number of friends of the current user who have accounts on your site, but have not yet connected their accounts. (for [{Facebook Connect]]).
             </summary>
             <example>
             <code>
             private static void RunDemoAsync()
             {
                 ConnectSession connectSession = new ConnectSession(Constants.ApplicationKey, Constants.ApplicationSecret);
            
                 /// 
                 /// NOTE: This is shortened for brevity; would require a postback after completing Facebook Connect authentication.
                 /// 
                
                 if (connectSession.IsConnected())
                 {
                     FacebookApi api = new FacebookApi(connectSession);
                     api.Connect.GetUnconnectedFriendsAsync(AsyncDemoCompleted, null);
                 }
             }
            
             private static void AsyncDemoCompleted(int result, Object state, FacebookException e)
             {
                 var actual = result;
             }
             </code>
             </example>
             <param name="callback">The AsyncCallback delegate</param>
             <param name="state">An object containing state information for this asynchronous request</param>        
             <returns>This method returns an int that indicates the number of users who have not yet connected their accounts.</returns>
        </member>
        <member name="T:Facebook.Rest.Connect.UnregisterUsersCallback">
            <summary>
            Delegate called when UnregisterUsers call completed
            </summary>
            <param name="emailHashes">Hashes of the emails to unregister.</param>
            <param name="state">An object containing state information for this asynchronous request.</param>
            <param name="e">Exception object, if the call resulted in exception.</param>
        </member>
        <member name="T:Facebook.Rest.Connect.RegisterUsersCallback">
            <summary>
            Delegate called when RegisterUsers call completed
            </summary>
            <param name="emailHashes">Hases of the emails of the users to unregister.</param>
            <param name="state">An object containing state information for this asynchronous request.</param>
            <param name="e">Exception object, if the call resulted in exception.</param>
        </member>
        <member name="T:Facebook.Rest.Connect.GetUnconnectedFriendsCallback">
            <summary>
            Delegate called when GetUnconnectedFriends call completed
            </summary>
            <param name="numFriends">The count of unconnected friends.</param>
            <param name="state">An object containing state information for this asynchronous request.</param>
            <param name="e">Exception object, if the call resulted in exception.</param>
        </member>
        <member name="T:Facebook.Rest.ConnectAccountMap">
            <summary>
            A helper object to store one Facebook Connect account map, where each map represents one Facebook Connect site email address and one of two
            optional Account identifiers.  This object is used to register third-party accounts with existing Facebook accounts.
            </summary>
        </member>
        <member name="P:Facebook.Rest.ConnectAccountMap.EmailAddress">
            <summary>
            The email account of the remote (Connect site) account.
            </summary>
        </member>
        <member name="P:Facebook.Rest.ConnectAccountMap.AccountId">
            <summary>
            Optional: The user's account ID on the Facebook Connect site. If you specify the AccountId property, then you must also set a 
            Connect Preview URL in your application's settings in order to generate a full user URL. The Connect Preview URL contains an 
            AccountId parameter, such as http://www.example.com/profile.php?user=AccountId. 
            </summary>
        </member>
        <member name="P:Facebook.Rest.ConnectAccountMap.AccountUrl">
            <summary>
            Optional:  The URL to the user's account on the Facebook Connect site.  If you specify the AccountUrl property, that URL will be used directly.
            Facebook recommends that you specify at least one of either the AccountId or the AccountUrl properties.
            </summary>
        </member>
        <member name="T:Facebook.BindingHelper.GetImageSourceAsyncCallback">
            <summary>
            Callback function for GetImageSourceAsync Call
            </summary>
        </member>
        <member name="T:Facebook.BindingHelper.GetImageSourceCompletedEventArgs">
            <summary>
            Event arguments accompanying delegate for GetImageSource event.
            </summary>
        </member>
        <member name="F:Facebook.BindingHelper.GetImageSourceCompletedEventArgs.imageSource">
            <summary>
            The ImageSource representing data from the Internet resource.
            </summary>
        </member>
        <member name="M:Facebook.BindingHelper.GetImageSourceCompletedEventArgs.#ctor(System.Windows.Media.ImageSource,System.Object)">
            <summary>
            Initializes a new instance of the GetImageSourceCompletedEventArgs class for successful completion.
            </summary>
            <param name="imageSource">The ImageSource representing data from the Internet resource.</param>
            <param name="userState">The user-supplied state object.</param>
        </member>
        <member name="M:Facebook.BindingHelper.GetImageSourceCompletedEventArgs.#ctor(System.Exception,System.Boolean,System.Object)">
            <summary>
            Initializes a new instance of the GetImageSourceCompletedEventArgs class for an error or a cancellation.
            </summary>
            <param name="error">Any error that occurred during the asynchronous operation.</param>
            <param name="cancelled">A value indicating whether the asynchronous operation was canceled.</param>
            <param name="userState">The user-supplied state object.</param>
        </member>
        <member name="P:Facebook.BindingHelper.GetImageSourceCompletedEventArgs.ImageSource">
            <summary>
            Gets the ImageSource representing data from the Internet resource.
            </summary>
        </member>
        <member name="T:Facebook.BindingHelper.FacebookPhotoCollection">
            <summary>
            Represents a photo collection
            </summary>
        </member>
        <member name="M:Facebook.BindingHelper.FacebookPhotoCollection.#ctor">
            <summary>
            Initializes photo collection object
            </summary>
        </member>
        <member name="M:Facebook.BindingHelper.FacebookPhotoCollection.#ctor(System.Collections.Generic.IEnumerable{Facebook.BindingHelper.FacebookPhoto})">
            <summary>
            Initializes photo collection object from list of photos
            </summary>
            <param name="photos"></param>
        </member>
        <member name="T:Facebook.Rest.Status">
            <summary>
            Facebook Status API methods.
            </summary>
        </member>
        <member name="M:Facebook.Rest.Status.#ctor(Facebook.Session.IFacebookSession)">
            <summary>
            Public constructor for facebook.Status
            </summary>
            <param name="session">Needs a connected Facebook Session object for making requests</param>
        </member>
        <member name="M:Facebook.Rest.Status.Get">
            <summary>
            Returns the user's current and most recent statuses.
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
            var result = api.Status.Get();
            </code>
            </example>
            <returns>This method returns an List of user_status objects.</returns>
            <remarks>Pass in 0 if you want the logged in user or the default of 100 messages</remarks>
        </member>
        <member name="M:Facebook.Rest.Status.Get(System.Int64)">
            <summary>
            Returns the user's current and most recent statuses.
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
            var result = api.Status.Get(Constants.UserId);
            </code>
            </example>
            <param name="uid">The user ID of the user whose status messages you want to retrieve.</param>
            <returns>This method returns an List of user_status objects.</returns>
            <remarks>Pass in 0 if you want the logged in user or the default of 100 messages</remarks>
        </member>
        <member name="M:Facebook.Rest.Status.Get(System.Int64,System.Int32)">
            <summary>
            Returns the user's current and most recent statuses.
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
            var result = api.Status.Get(Constants.UserId, 20);
            </code>
            </example>
            <param name="uid">The user ID of the user whose status messages you want to retrieve.</param>
            <param name="limit">The number of status messages you want to return. (Default value is 100.)</param>
            <returns>This method returns an List of user_status objects.</returns>
            <remarks>Pass in 0 if you want the logged in user or the default of 100 messages</remarks>
        </member>
        <member name="M:Facebook.Rest.Status.Set(System.String)">
            <summary>
            Updates a user's Facebook status through your application. This is a streamlined version of users.setStatus.
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
            var result = api.Status.Set("Setting a test status.");
            </code>
            </example>
            <param name="status">The status message to set.  Note: The maximum message length is 255 characters; messages longer than that limit will be truncated and appended with '...'.</param>
            <returns>This method returns true on success, false on failure, or an error code.</returns>
            <remarks>Pass in 0 if you want the logged in user or the default of 100 messages</remarks>
        </member>
        <member name="M:Facebook.Rest.Status.Set(System.Int64,System.String)">
            <summary>
            Updates a user's Facebook status through your application. This is a streamlined version of users.setStatus.
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
            var result = api.Status.Set(Constants.UserId, "Setting a test status.");
            </code>
            </example>
            <param name="uid">The user ID of the user whose status you are setting. Note: This parameter applies only to Web applications. Facebook ignores this parameter if it is passed by a desktop application.</param>
            <param name="status">The status message to set.  Note: The maximum message length is 255 characters; messages longer than that limit will be truncated and appended with '...'.</param>
            <returns>This method returns true on success, false on failure, or an error code.</returns>
            <remarks>Pass in 0 if you want the logged in user or the default of 100 messages</remarks>
        </member>
        <member name="M:Facebook.Rest.Status.GetAsync(Facebook.Rest.Status.GetCallback,System.Object)">
            <summary>
            Returns the user's current and most recent statuses.
            </summary>
            <example>
            <code>
            private static void RunDemoAsync()
            {
                FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.ApplicationSecret, Constants.SessionKey));
                api.Status.GetAsync(AsyncDemoCompleted, null);
            }
            
            private static void AsyncDemoCompleted(IList&lt;user_status&gt; result, Object state, FacebookException e)
            {
               var actual = result;
            }
            </code>
            </example>
            <param name="callback">The AsyncCallback delegate</param>
            <param name="state">An object containing state information for this asynchronous request</param>        
            <returns>This method returns an List of user_status objects.</returns>
            <remarks>Pass in 0 if you want the logged in user or the default of 100 messages</remarks>
        </member>
        <member name="M:Facebook.Rest.Status.GetAsync(System.Int64,Facebook.Rest.Status.GetCallback,System.Object)">
            <summary>
            Returns the user's current and most recent statuses.
            </summary>
            <example>
            <code>
            private static void RunDemoAsync()
            {
                Api api = new Api(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.ApplicationSecret, Constants.SessionKey));
                api.Status.GetAsync(Constants.UserId, AsyncDemoCompleted, null);
            }
            
            private static void AsyncDemoCompleted(IList&lt;user_status&gt; result, Object state, FacebookException e)
            {
               var actual = result;
            }
            </code>
            </example>
            <param name="uid">The user ID of the user whose status messages you want to retrieve.</param>
            <param name="callback">The AsyncCallback delegate</param>
            <param name="state">An object containing state information for this asynchronous request</param>        
            <returns>This method returns an List of user_status objects.</returns>
            <remarks>Pass in 0 if you want the logged in user or the default of 100 messages</remarks>
        </member>
        <member name="M:Facebook.Rest.Status.GetAsync(System.Int64,System.Int32,Facebook.Rest.Status.GetCallback,System.Object)">
            <summary>
            Returns the user's current and most recent statuses.
            </summary>
            <example>
            <code>
            private static void RunDemoAsync()
            {
                FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.ApplicationSecret, Constants.SessionKey));
                api.Status.GetAsync(Constants.UserId, 20, AsyncDemoCompleted, null);
            }
            
            private static void AsyncDemoCompleted(IList&lt;user_status&gt; result, Object state, FacebookException e)
            {
               var actual = result;
            }
            </code>
            </example>
            <param name="uid">The user ID of the user whose status messages you want to retrieve.</param>
            <param name="limit">The number of status messages you want to return. (Default value is 100.)</param>
            <param name="callback">The AsyncCallback delegate</param>
            <param name="state">An object containing state information for this asynchronous request</param>        
            <returns>This method returns an List of user_status objects.</returns>
            <remarks>Pass in 0 if you want the logged in user or the default of 100 messages</remarks>
        </member>
        <member name="M:Facebook.Rest.Status.SetAsync(System.String,Facebook.Rest.Status.SetCallback,System.Object)">
             <summary>
             Updates a user's Facebook status through your application. This is a streamlined version of users.setStatus.
             </summary>
             <example>
             <code>
             private static void RunDemoAsync()
             {
                 FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.ApplicationSecret, Constants.SessionKey));
                 api.Status.SetAsync("Setting a test async status.", AsyncDemoCompleted, null);
             }
            
             private static void AsyncDemoCompleted(bool result, Object state, FacebookException e)
             {
                 var actual = result;
             }
             </code>
             </example>
             <param name="status">The status message to set.  Note: The maximum message length is 255 characters; messages longer than that limit will be truncated and appended with '...'.</param>
             <param name="callback">The AsyncCallback delegate</param>
             <param name="state">An object containing state information for this asynchronous request</param>        
             <returns>This method returns true on success, false on failure, or an error code.</returns>
             <remarks>Pass in 0 if you want the logged in user or the default of 100 messages</remarks>
        </member>
        <member name="M:Facebook.Rest.Status.SetAsync(System.Int64,System.String,Facebook.Rest.Status.SetCallback,System.Object)">
             <summary>
             Updates a user's Facebook status through your application. This is a streamlined version of users.setStatus.
             </summary>
             <example>
             <code>
             private static void RunDemoAsync()
             {
                 FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.ApplicationSecret, Constants.SessionKey));
                 api.Status.SetAsync(Constants.UserId, "Setting a test async status.", AsyncDemoCompleted, null);
             }
            
             private static void AsyncDemoCompleted(bool result, Object state, FacebookException e)
             {
                 var actual = result;
             }
             </code>
             </example>
             <param name="uid">The user ID of the user whose status you are setting. Note: This parameter applies only to Web applications. Facebook ignores this parameter if it is passed by a desktop application.</param>
             <param name="status">The status message to set.  Note: The maximum message length is 255 characters; messages longer than that limit will be truncated and appended with '...'.</param>
             <param name="callback">The AsyncCallback delegate</param>
             <param name="state">An object containing state information for this asynchronous request</param>        
             <returns>This method returns true on success, false on failure, or an error code.</returns>
             <remarks>Pass in 0 if you want the logged in user or the default of 100 messages</remarks>
        </member>
        <member name="M:Facebook.Rest.Status.Set(System.Int64,System.String,System.Boolean,Facebook.Rest.Status.SetCallback,System.Object)">
            <summary>
            pass in 0 if you want the logged in user or the default of 100 messages
            </summary>
            <returns>This method returns true on success, false on failure, or an error code.</returns>
        </member>
        <member name="T:Facebook.Rest.Status.GetCallback">
            <summary>
            Delegate called when GetStatus call completed
            </summary>
            <param name="userstatus">List of user_status objects</param>
            <param name="state">An object containing state information for this asynchronous request</param>
            <param name="e">Exception object, if the call resulted in exception.</param>
        </member>
        <member name="T:Facebook.Rest.Status.SetCallback">
            <summary>
            Delegate called when SetStatus call completed
            </summary>
            <param name="result">result of operation</param>
            <param name="state">An object containing state information for this asynchronous request</param>
            <param name="e">Exception object, if the call resulted in exception.</param>
        </member>
        <member name="T:Facebook.Session.FacebookSession">
            <summary>
            Base class for session object
            </summary>
        </member>
        <member name="P:Facebook.Session.FacebookSession.ApplicationKey">
            <summary>
            Application key
            </summary>
        </member>
        <member name="P:Facebook.Session.FacebookSession.ApplicationSecret">
            <summary>
            Application secret
            </summary>
        </member>
        <member name="P:Facebook.Session.FacebookSession.SessionKey">
            <summary>
            Session key
            </summary>
        </member>
        <member name="P:Facebook.Session.FacebookSession.SessionSecret">
            <summary>
            Session secret
            </summary>
        </member>
        <member name="P:Facebook.Session.FacebookSession.ExpiryTime">
            <summary>
            Expiry time
            </summary>
        </member>
        <member name="P:Facebook.Session.FacebookSession.SessionExpires">
            <summary>
            Whether or not the session expires
            </summary>
        </member>
        <member name="P:Facebook.Session.FacebookSession.UserId">
            <summary>
            User Id
            </summary>
        </member>
        <member name="P:Facebook.Session.FacebookSession.CompressHttp">
            <summary>
             Whether the Http Post and Response should be compressed
            </summary>
        </member>
        <member name="P:Facebook.Session.FacebookSession.Secret">
            <summary>
            Secret key that needs to be used to encrypt requests
            </summary>
        </member>
        <member name="T:Facebook.Rest.Events">
            <summary>
            Facebook Events API methods.
            </summary>
        </member>
        <member name="M:Facebook.Rest.Events.#ctor(Facebook.Session.IFacebookSession)">
            <summary>
            Public constructor for facebook.Events
            </summary>
            <param name="session">Needs a connected Facebook Session object for making requests</param>
        </member>
        <member name="M:Facebook.Rest.Events.Get(System.Nullable{System.Int64},System.Collections.Generic.List{System.Int64},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String)">
            <summary>
            Returns all visible events according to the filters specified.
            This may be used to find all events of a user, or to query specific eids.
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
            var result = api.Events.Get(Constants.UserId, new List&lt;long&gt; { Constants.EventId }, new DateTime(2000, 1, 1), DateTime.Now.AddYears(1), "attending");
            </code>
            </example>
            <param name="uid">Filter by events associated with a user with this uid.</param>
            <param name="eids">Filter by this list of event ids. This is a comma-separated list of eids.</param>
            <param name="startTime">Filter with this UTC as lower bound. A missing or zero parameter indicates no lower bound.</param>
            <param name="endTime">Filter with this UTC as upper bound. A missing or zero parameter indicates no upper bound.</param>
            <param name="rsvp_status">Filter by this RSVP status.  attending,unsure,declined,not_replied </param>
            <returns>This method returns all events satisfying the filters specified. The method can be used to return all events associated with user, or query a specific set of events by a list of eids.</returns> 
        </member>
        <member name="M:Facebook.Rest.Events.Get">
            <summary>
            Returns all visible events according to the filters specified.
            This may be used to find all events of a user, or to query specific eids.
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
            var result = api.Events.Get();
            </code>
            </example>
            <returns>This method returns all events satisfying the filters specified. The method can be used to return all events associated with user, or query a specific set of events by a list of eids.</returns> 
        </member>
        <member name="M:Facebook.Rest.Events.Get(System.Nullable{System.Int64})">
            <summary>
            Returns all visible events according to the filters specified.
            This may be used to find all events of a user, or to query specific eids.
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
            var result = api.Events.Get(Constants.UserId);
            </code>
            </example>
            <param name="uid">Filter by events associated with a user with this uid.</param>
            <returns>This method returns all events satisfying the filters specified. The method can be used to return all events associated with user, or query a specific set of events by a list of eids.</returns> 
        </member>
        <member name="M:Facebook.Rest.Events.Get(System.Nullable{System.Int64},System.Collections.Generic.List{System.Int64})">
            <summary>
            Returns all visible events according to the filters specified.
            This may be used to find all events of a user, or to query specific eids.
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
            var result = api.Events.Get(Constants.UserId, new List&lt;long&gt; { Constants.EventId });
            </code>
            </example>
            <param name="uid">Filter by events associated with a user with this uid.</param>
            <param name="eids">Filter by this list of event ids. This is a comma-separated list of eids.</param>
            <returns>This method returns all events satisfying the filters specified. The method can be used to return all events associated with user, or query a specific set of events by a list of eids.</returns> 
        </member>
        <member name="M:Facebook.Rest.Events.Get(System.Collections.Generic.List{System.Int64})">
            <summary>
            Returns all visible events according to the filters specified.
            This may be used to find all events of a user, or to query specific eids.
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
            var result = api.Events.Get(new List&lt;long&gt; { Constants.EventId });
            </code>
            </example>
            <param name="eids">Filter by this list of event ids. This is a comma-separated list of eids.</param>
            <returns>This method returns all events satisfying the filters specified. The method can be used to return all events associated with user, or query a specific set of events by a list of eids.</returns> 
        </member>
        <member name="M:Facebook.Rest.Events.Get(System.Nullable{System.Int64},System.Collections.Generic.List{System.Int64},System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Returns all visible events according to the filters specified.
            This may be used to find all events of a user, or to query specific eids.
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
            var result = api.Events.Get(Constants.UserId, new List&lt;long&gt; { Constants.EventId }, new DateTime(2000, 1, 1), DateTime.Now.AddYears(1));
            </code>
            </example>
            <param name="uid">Filter by events associated with a user with this uid.</param>
            <param name="eids">Filter by this list of event ids. This is a comma-separated list of eids.</param>
            <param name="startTime">Filter with this UTC as lower bound. A missing or zero parameter indicates no lower bound.</param>
            <param name="endTime">Filter with this UTC as upper bound. A missing or zero parameter indicates no upper bound.</param>
            <returns>This method returns all events satisfying the filters specified. The method can be used to return all events associated with user, or query a specific set of events by a list of eids.</returns> 
        </member>
        <member name="M:Facebook.Rest.Events.Cancel(System.Int64,System.String)">
            <summary>
            Cancels an event. The application must be an admin of the event.
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
            var result = api.Events.Cancel(Constants.EventId, "cancel message");
            </code>
            </example>
            <param name="eid">The event ID.</param>
            <param name="cancelMessage">The message sent explaining why the event was canceled. You can pass an empty string if you don't want to provide an explanation.</param>
            <returns>This method returns true if the Cancel is successful.</returns>
        </member>
        <member name="M:Facebook.Rest.Events.Create(Facebook.Schema.facebookevent)">
             <summary>
             Creates an event on behalf of the user if the application has an active session; otherwise it creates an event on behalf of the application.
             </summary>
             <example>
             <code>
             FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
             facebookevent eventInfo = new facebookevent
             {
                 description = "event description",
                 end_date = DateTime.Now.AddDays(7),
                 event_subtype = "1",
                 event_type = "1",
                 location = "location",
                 venue = new location { city = "chicago" },
                 start_date = DateTime.Now.AddDays(1),
                 host = "Facebook Samples",
                 name = "test event"
             };
             var result = api.Events.Create(eventInfo);
             </code>
             </example>
             <param name="eventInfo">The event information. See the Facebook API Notes for information on what parameters to include in the object.</param>
             <returns>This method returns the identifier of the created event.</returns>
             <remarks>
             Create an event - You must pass the following parameters in the event_info array: 
             name 
             category 
             subcategory 
             location 
             start_time 
             end_time 
             The start_time and end_time are the times that were input by the event creator, converted to UTC after assuming that they were in Pacific time (Daylight Savings or Standard, depending on the date of the event), then converted into Unix epoch time. 
            
             Optionally, you can pass the following parameters in the event_info array: 
                
             street 
             phone 
             email 
             host_id 
             host 
             desc 
             privacy_type 
             tagline 
             </remarks>
        </member>
        <member name="M:Facebook.Rest.Events.Edit(System.Int64,Facebook.Schema.facebookevent)">
            <summary>
            Edits an existing event. The application must be an admin of the event.
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
            facebookevent eventInfo = new facebookevent
            {
                description = "event description 2",
                end_date = DateTime.Now.AddDays(7),
                event_subtype = "1",
                event_type = "1",
                location = "location",
                venue = new location { city = "chicago" },
                start_date = DateTime.Now.AddDays(1),
                host = "Facebook Samples",
                name = "test event"
            };
            var result = api.Events.Edit(Constants.EventId, eventInfo);
            </code>
            </example>
            <param name="eid">The event ID.</param>
            <param name="eventInfo">The event information. See the Facebook API Notes for information on what parameters to include in the object.</param>
            <returns>This method returns true if successful, or an error code otherwise.</returns>
        </member>
        <member name="M:Facebook.Rest.Events.Rsvp(System.Int64,System.String)">
            <summary>
            Sets the attendance option for the current user.
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
            var result = api.Events.Rsvp(Constants.EventId, "attending");
            </code>
            </example>
            <param name="eid">The event ID.</param>
            <param name="rsvp_Status">The user's RSVP status. Specify attending, unsure, or declined.</param>
            <returns>This method returns true if successful.</returns>
        </member>
        <member name="M:Facebook.Rest.Events.GetMembers(System.Int64)">
            <summary>
            Returns membership list data associated with an event.
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
            var result = api.Events.GetMembers(Constants.EventId);
            </code>
            </example>
            <param name="eid">The event ID.</param>
            <returns>This method returns four (possibly empty) lists of users associated with an event, keyed on their RSVP statuses. These lists should never share any members.</returns>
        </member>
        <member name="M:Facebook.Rest.Events.GetAsync(Facebook.Rest.Events.GetEventsCallback,System.Object)">
             <summary>
             Returns all visible events according to the filters specified.
             This may be used to find all events of a user, or to query specific eids.
             </summary>
             <example>
             <code>
             private static void RunDemoAsync()
             {
                 FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.ApplicationSecret, Constants.SessionKey));
                 api.Events.GetAsync(AsyncDemoCompleted, null);
             }
            
             private static void AsyncDemoCompleted(IList&lt;facebookevent&gt; result, Object state, FacebookException e)
             {
                 var actual = result;
             }
             </code>
             </example>
             <param name="callback">The AsyncCallback delegate</param>
             <param name="state">An object containing state information for this asynchronous request</param>
             <returns>This method returns all events satisfying the filters specified. The method can be used to return all events associated with user, or query a specific set of events by a list of eids.</returns> 
        </member>
        <member name="M:Facebook.Rest.Events.GetAsync(System.Nullable{System.Int64},Facebook.Rest.Events.GetEventsCallback,System.Object)">
             <summary>
             Returns all visible events according to the filters specified.
             This may be used to find all events of a user, or to query specific eids.
             </summary>
             <example>
             <code>
             private static void RunDemoAsync()
             {
                 FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.ApplicationSecret, Constants.SessionKey));
                 api.Events.GetAsync(Constants.UserId, AsyncDemoCompleted, null);
             }
            
             private static void AsyncDemoCompleted(IList&lt;facebookevent&gt; result, Object state, FacebookException e)
             {
                 var actual = result;
             }
             </code>
             </example>
             <param name="uid">Filter by events associated with a user with this uid.</param>
             <param name="callback">The AsyncCallback delegate</param>
             <param name="state">An object containing state information for this asynchronous request</param>
             <returns>This method returns all events satisfying the filters specified. The method can be used to return all events associated with user, or query a specific set of events by a list of eids.</returns> 
        </member>
        <member name="M:Facebook.Rest.Events.GetAsync(System.Nullable{System.Int64},System.Collections.Generic.List{System.Int64},Facebook.Rest.Events.GetEventsCallback,System.Object)">
             <summary>
             Returns all visible events according to the filters specified.
             This may be used to find all events of a user, or to query specific eids.
             </summary>
             <example>
             <code>
             private static void RunDemoAsync()
             {
                 FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.ApplicationSecret, Constants.SessionKey));
                 api.Events.GetAsync(Constants.UserId, new List&lt;long&gt; { Constants.EventId }, AsyncDemoCompleted, null);
             }
            
             private static void AsyncDemoCompleted(IList&lt;facebookevent&gt; result, Object state, FacebookException e)
             {
                 var actual = result;
             }
             </code>
             </example>
             <param name="uid">Filter by events associated with a user with this uid.</param>
             <param name="eids">Filter by this list of event ids. This is a comma-separated list of eids.</param>
             <param name="callback">The AsyncCallback delegate</param>
             <param name="state">An object containing state information for this asynchronous request</param>
             <returns>This method returns all events satisfying the filters specified. The method can be used to return all events associated with user, or query a specific set of events by a list of eids.</returns> 
        </member>
        <member name="M:Facebook.Rest.Events.GetAsync(System.Collections.Generic.List{System.Int64},Facebook.Rest.Events.GetEventsCallback,System.Object)">
             <summary>
             Returns all visible events according to the filters specified.
             This may be used to find all events of a user, or to query specific eids.
             </summary>
             <example>
             <code>
             private static void RunDemoAsync()
             {
                 FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.ApplicationSecret, Constants.SessionKey));
                 api.Events.GetAsync(new List&lt;long&gt; { Constants.EventId }, AsyncDemoCompleted, null);
             }
            
             private static void AsyncDemoCompleted(IList&lt;facebookevent&gt; result, Object state, FacebookException e)
             {
                 var actual = result;
             }
             </code>
             </example>
             <param name="eids">Filter by this list of event ids. This is a comma-separated list of eids.</param>
             <param name="callback">The AsyncCallback delegate</param>
             <param name="state">An object containing state information for this asynchronous request</param>
             <returns>This method returns all events satisfying the filters specified. The method can be used to return all events associated with user, or query a specific set of events by a list of eids.</returns> 
        </member>
        <member name="M:Facebook.Rest.Events.GetAsync(System.Nullable{System.Int64},System.Collections.Generic.List{System.Int64},System.Nullable{System.DateTime},System.Nullable{System.DateTime},Facebook.Rest.Events.GetEventsCallback,System.Object)">
             <summary>
             Returns all visible events according to the filters specified.
             This may be used to find all events of a user, or to query specific eids.
             </summary>
             <example>
             <code>
             private static void RunDemoAsync()
             {
                 FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.ApplicationSecret, Constants.SessionKey));
                 api.Events.GetAsync(Constants.UserId, new List&lt;long&gt; { Constants.EventId }, new DateTime(2000, 1, 1), DateTime.Now.AddYears(1), AsyncDemoCompleted, null);
             }
            
             private static void AsyncDemoCompleted(IList&lt;facebookevent&gt; result, Object state, FacebookException e)
             {
                 var actual = result;
             }
             </code>
             </example>
             <param name="uid">Filter by events associated with a user with this uid.</param>
             <param name="eids">Filter by this list of event ids. This is a comma-separated list of eids.</param>
             <param name="startTime">Filter with this UTC as lower bound. A missing or zero parameter indicates no lower bound.</param>
             <param name="endTime">Filter with this UTC as upper bound. A missing or zero parameter indicates no upper bound.</param>
             <param name="callback">The AsyncCallback delegate</param>
             <param name="state">An object containing state information for this asynchronous request</param>
             <returns>This method returns all events satisfying the filters specified. The method can be used to return all events associated with user, or query a specific set of events by a list of eids.</returns> 
        </member>
        <member name="M:Facebook.Rest.Events.GetAsync(System.Nullable{System.Int64},System.Collections.Generic.List{System.Int64},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String,Facebook.Rest.Events.GetEventsCallback,System.Object)">
             <summary>
             Returns all visible events according to the filters specified.
             This may be used to find all events of a user, or to query specific eids.
             </summary>
             <example>
             <code>
             private static void RunDemoAsync()
             {
                 FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.ApplicationSecret, Constants.SessionKey));
                 api.Events.GetAsync(Constants.UserId, new List&lt;long&gt; { Constants.EventId }, new DateTime(2000, 1, 1), DateTime.Now.AddYears(1), "attending", AsyncDemoCompleted, null);
             }
            
             private static void AsyncDemoCompleted(IList&lt;facebookevent&gt; result, Object state, FacebookException e)
             {
                 var actual = result;
             }
             </code>
             </example>
             <param name="uid">Filter by events associated with a user with this uid.</param>
             <param name="eids">Filter by this list of event ids. This is a comma-separated list of eids.</param>
             <param name="startTime">Filter with this UTC as lower bound. A missing or zero parameter indicates no lower bound.</param>
             <param name="endTime">Filter with this UTC as upper bound. A missing or zero parameter indicates no upper bound.</param>
             <param name="rsvp_status">Filter by this RSVP status.  attending,unsure,declined,not_replied </param>
             <param name="callback">The AsyncCallback delegate</param>
             <param name="state">An object containing state information for this asynchronous request</param>
             <returns>This method returns all events satisfying the filters specified. The method can be used to return all events associated with user, or query a specific set of events by a list of eids.</returns> 
        </member>
        <member name="M:Facebook.Rest.Events.CancelAsync(System.Int64,System.String,Facebook.Rest.Events.CancelEventCallback,System.Object)">
             <summary>
             Cancels an event. The application must be an admin of the event.
             </summary>
             <example>
             <code>
             private static void RunDemoAsync()
             {
                 FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.ApplicationSecret, Constants.SessionKey));
                 api.Events.CancelAsync(Constants.EventId, "cancel message", AsyncDemoCompleted, null);
             }
            
             private static void AsyncDemoCompleted(bool result, Object state, FacebookException e)
             {
                 var actual = result;
             }
             </code>
             </example>
             <param name="eid">The event ID.</param>
             <param name="cancelMessage">The message sent explaining why the event was canceled. You can pass an empty string if you don't want to provide an explanation.</param>
             <param name="callback">The AsyncCallback delegate</param>
             <param name="state">An object containing state information for this asynchronous request</param>
             <returns>This method returns true if the Cancel is successful.</returns>
        </member>
        <member name="M:Facebook.Rest.Events.CreateAsync(Facebook.Schema.facebookevent,Facebook.Rest.Events.CreateEventCallback,System.Object)">
             <summary>
             Creates an event on behalf of the user if the application has an active session; otherwise it creates an event on behalf of the application.
             </summary>
             <example>
             <code>
             private static void RunDemoAsync()
             {
                 FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.ApplicationSecret, Constants.SessionKey));
                 facebookevent eventInfo = new facebookevent
                 {
                     description = "event description",
                     end_date = DateTime.Now.AddDays(7),
                     event_subtype = "1",
                     event_type = "1",
                     location = "location",
                     venue = new location { city = "chicago" },
                     start_date = DateTime.Now.AddDays(1),
                     host = "Facebook Samples",
                     name = "test event"
                 };
                 api.Events.CreateAsync(eventInfo, AsyncDemoCompleted, null);
             }
            
             private static void AsyncDemoCompleted(long result, Object state, FacebookException e)
             {
                 var actual = result;
             }
             </code>
             </example>
             <param name="eventInfo">The event information. See the Facebook API Notes for information on what parameters to include in the object.</param>
             <param name="callback">The AsyncCallback delegate</param>
             <param name="state">An object containing state information for this asynchronous request</param>        
             <returns>This method returns the identifier of the created event.</returns>
             <remarks>
             Create an event - You must pass the following parameters in the event_info array: 
             name 
             category 
             subcategory 
             location 
             start_time 
             end_time 
             The start_time and end_time are the times that were input by the event creator, converted to UTC after assuming that they were in Pacific time (Daylight Savings or Standard, depending on the date of the event), then converted into Unix epoch time. 
            
             Optionally, you can pass the following parameters in the event_info array: 
                
             street 
             phone 
             email 
             host_id 
             host 
             desc 
             privacy_type 
             tagline 
             </remarks>
        </member>
        <member name="M:Facebook.Rest.Events.EditAsync(System.Int64,Facebook.Schema.facebookevent,Facebook.Rest.Events.EditEventCallback,System.Object)">
             <summary>
             Edits an existing event. The application must be an admin of the event.
             </summary>
             <example>
             <code>
             private static void RunDemoAsync()
             {
                 FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.ApplicationSecret, Constants.SessionKey));
                 facebookevent eventInfo = new facebookevent
                 {
                     description = "event description 2",
                     end_date = DateTime.Now.AddDays(7),
                     event_subtype = "1",
                     event_type = "1",
                     location = "location",
                     venue = new location { city = "chicago" },
                     start_date = DateTime.Now.AddDays(1),
                     host = "Facebook Samples",
                     name = "test event"
                 };
                 api.Events.EditAsync(Constants.EventId, eventInfo, AsyncDemoCompleted, null);
             }
            
             private static void AsyncDemoCompleted(bool result, Object state, FacebookException e)
             {
                 var actual = result;
             }
             </code>
             </example>
             <param name="eid">The event ID.</param>
             <param name="eventInfo">The event information. See the Facebook API Notes for information on what parameters to include in the object.</param>
             <param name="callback">The AsyncCallback delegate</param>
             <param name="state">An object containing state information for this asynchronous request</param>        
             <returns>This method returns true if successful, or an error code otherwise.</returns>
        </member>
        <member name="M:Facebook.Rest.Events.RsvpAsync(System.Int64,System.String,Facebook.Rest.Events.RsvpCallback,System.Object)">
             <summary>
             Sets the attendance option for the current user.
             </summary>
             <example>
             <code>
             private static void RunDemoAsync()
             {
                 FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.ApplicationSecret, Constants.SessionKey));
                 api.Events.RsvpAsync(Constants.EventId, "attending", AsyncDemoCompleted, null);
             }
            
             private static void AsyncDemoCompleted(bool result, Object state, FacebookException e)
             {
                 var actual = result;
             }
             </code>
             </example>
             <param name="eid">The event ID.</param>
             <param name="rsvp_Status">The user's RSVP status. Specify attending, unsure, or declined.</param>
             <param name="callback">The AsyncCallback delegate</param>
             <param name="state">An object containing state information for this asynchronous request</param>        
             <returns>This method returns true if successful.</returns>
        </member>
        <member name="M:Facebook.Rest.Events.GetMembersAsync(System.Int64,Facebook.Rest.Events.EventGetMembersCallback,System.Object)">
             <summary>
             Returns membership list data associated with an event.
             </summary>
             <example>
             <code>
             private static void RunDemoAsync()
             {
                 FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.ApplicationSecret, Constants.SessionKey));
                 api.Events.GetMembersAsync(Constants.EventId, AsyncDemoCompleted, null);
             }
            
             private static void AsyncDemoCompleted(event_members result, Object state, FacebookException e)
             {
                 var actual = result;
             }
             </code>
             </example>
             <param name="eid">The event ID.</param>
             <param name="callback">The AsyncCallback delegate</param>
             <param name="state">An object containing state information for this asynchronous request</param>        
             <returns>This method returns four (possibly empty) lists of users associated with an event, keyed on their RSVP statuses. These lists should never share any members.</returns>
        </member>
        <member name="T:Facebook.Rest.Events.GetEventsCallback">
            <summary>
            Delegate called when GetEvents call completed
            </summary>
            <param name="events">events information</param>
            <param name="state">An object containing state information for this asynchronous request</param>
            <param name="e">Exception object, if the call resulted in exception.</param>
        </member>
        <member name="T:Facebook.Rest.Events.CancelEventCallback">
            <summary>
            Delegate called when CancelEvent call completed
            </summary>
            <param name="result">result of operation</param>
            <param name="state">An object containing state information for this asynchronous request</param>
            <param name="e">Exception object, if the call resulted in exception.</param>
        </member>
        <member name="T:Facebook.Rest.Events.CreateEventCallback">
            <summary>
            Delegate called when CreateEvent call is completed.
            </summary>
            <param name="eventId">event ID of the newly created event</param>
            <param name="state">An object containing state information for this asynchronous request</param>
            <param name="e">Exception object, if the call resulted in exception.</param>
        </member>
        <member name="T:Facebook.Rest.Events.EditEventCallback">
            <summary>
            Delegate called when EditEvent call completed
            </summary>
            <param name="result">result of operation</param>
            <param name="state">An object containing state information for this asynchronous request</param>
            <param name="e">Exception object, if the call resulted in exception.</param>
        </member>
        <member name="T:Facebook.Rest.Events.RsvpCallback">
            <summary>
            Delegate called when Rsvp call completed
            </summary>
            <param name="result">result of operation</param>
            <param name="state">An object containing state information for this asynchronous request</param>
            <param name="e">Exception object, if the call resulted in exception.</param>
        </member>
        <member name="T:Facebook.Rest.Events.EventGetMembersCallback">
            <summary>
            Delegate called when EventGetMembers call completed
            </summary>
            <param name="evtMembers">event members infomration</param>
            <param name="state">An object containing state information for this asynchronous request</param>
            <param name="e">Exception object, if the call resulted in exception.</param>
        </member>
        <member name="T:Facebook.Rest.FacebookCallCompleted`1">
            <summary>
            Delegate called when facebook call completes
            </summary>
            <typeparam name="T">Type of object to which result should be deserialized</typeparam>
            <param name="result">desrialized result object</param>
            <param name="state">Object passed in the initial facebook call</param>
            <param name="e">Exception if any</param>
        </member>
        <member name="T:Facebook.Rest.FacebookCallCompleted">
            <summary>
            Delegate called when facebook call completes
            </summary>
        </member>
        <member name="T:Facebook.Rest.Batch">
            <summary>
            Facebook Batch API methods.
            </summary>
        </member>
        <member name="M:Facebook.Rest.Batch.#ctor(Facebook.Session.IFacebookSession)">
            <summary>
            Public constructor for facebook.Batch
            </summary>
            <param name="session">Needs a connected Facebook Session object for making requests</param>
        </member>
        <member name="M:Facebook.Rest.Batch.ExecuteBatch">
            <summary>
            Execute a list of individual API calls in a single batch.
            </summary>
            <returns>An array of individual results as objects.</returns>
        </member>
        <member name="M:Facebook.Rest.Batch.ExecuteBatch(System.Boolean)">
            <summary>
            Execute a list of individual API calls in a single batch.
            </summary>
            <param name="isSerial">n optional parameter to indicate whether the methods in the method_feed must be executed in order. The default value is false.</param>
            <returns>An array of individual results as objects.</returns>
        </member>
        <member name="M:Facebook.Rest.Batch.ExecuteBatchAsync">
            <summary>
            Execute a list of individual API calls in a single batch.
            </summary>
            <returns>An array of individual results as objects.</returns>
        </member>
        <member name="M:Facebook.Rest.Batch.ExecuteBatchAsync(System.Boolean)">
            <summary>
            Execute a list of individual API calls in a single batch.
            </summary>
            <param name="isSerial">n optional parameter to indicate whether the methods in the method_feed must be executed in order. The default value is false.</param>
            <returns>An array of individual results as objects.</returns>
        </member>
        <member name="M:Facebook.Rest.Batch.BeginBatch">
            <summary>
            Sets the current Batch state of the Batch object to Active.
            </summary>
        </member>
        <member name="M:Facebook.Rest.Batch.OnRunCompleted(System.IAsyncResult)">
            <summary>
            Completes the async operation that was started by BeginExecuteBatch
            </summary>
            <param name="ar">An IAsyncResult that references a pending request for token</param>
        </member>
        <member name="P:Facebook.Rest.Batch.IsActive">
            <summary>
            </summary>
        </member>
        <member name="P:Facebook.Rest.Batch.CallList">
            <summary>
            </summary>
        </member>
        <member name="P:Facebook.Rest.Batch.CallListAsync">
            <summary>
            </summary>
        </member>
        <member name="T:Facebook.Rest.BatchRecord">
            <summary>
            </summary>
        </member>
        <member name="M:Facebook.Rest.BatchRecord.#ctor(Facebook.Utility.AsyncResult,System.String)">
            <summary>
            </summary>
            <param name="ar"></param>
            <param name="postData"></param>
        </member>
        <member name="P:Facebook.Rest.BatchRecord.AsyncResult">
            <summary>
            </summary>
        </member>
        <member name="P:Facebook.Rest.BatchRecord.PostData">
            <summary>
            </summary>
        </member>
        <member name="T:Facebook.Rest.Auth">
            <summary>
            Facebook Auth API methods.
            </summary>
        </member>
        <member name="M:Facebook.Rest.Auth.#ctor(Facebook.Session.IFacebookSession)">
            <summary>
            Public constructor for facebook.Auth
            </summary>
            <param name="session">Needs a connected Facebook Session object for making requests</param>
        </member>
        <member name="M:Facebook.Rest.Auth.CreateToken">
            <summary>
            Creates an auth_token to be passed in as a parameter to GetSession after the user has logged in.
            (Intended for desktop applications only)
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new FBMLCanvasSession(Constants.WebApplicationKey, Constants.WebSecret));
            api.Session.UserId = Constants.UserId;
            string result = api.Auth.CreateToken();
            </code>
            </example>
            <returns>This method creates an auth_token to be passed in as a parameter to Facebook Login url and then to Auth.GetSession after the user has logged in.</returns>
            <remarks>That this function does not require a session_key or call_id (although specifying a call_id will not cause any problems). The values returned from this call are storable, but expire on their first use in facebook.auth.getSession.</remarks>
        </member>
        <member name="M:Facebook.Rest.Auth.GetSession">
            <summary>
            Returns the session key bound to an auth_token, as returned by CreateToken or in the callback URL.
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new FBMLCanvasSession(Constants.WebApplicationKey, Constants.WebSecret));
            // Note see GetSession(string auth_token) method for a more complete (creating token, authenticating) example flow
            var result = api.Auth.GetSession();
            </code>
            </example>
            <returns>If the user has successfully logged in, this will return valid values for each field. The expires element is a Unix time that indicates when the given session will expire. If the value is 0, the session will never expire. See the authentication guide for more information.</returns>
            <remarks>For desktop applications this method must be called at the https endpoint instead of the http endpoint, and its return value is slightly different (as noted below). Also, this function does not require a session_key or call_id (although specifying a call_id will not cause any problems). The session key is storable for the duration of the session, and the uid is storable indefinitely. For desktop applications, the top-level element will have an additional element named secret that should be used as the session's secret key as described in the facebook authentication guide.</remarks>
        </member>
        <member name="M:Facebook.Rest.Auth.GetSession(System.String)">
             <summary>
             Returns the session key bound to an auth_token, as returned by CreateToken or in the callback URL.
             </summary>
             <example>
             <code>
             FacebookApi api = new FacebookApi(new FBMLCanvasSession(Constants.WebApplicationKey, Constants.WebSecret));
            
             // Create auth token
             var token = api.Auth.CreateToken();
            
             // Note user must be navigated to Facebook login.php to validate token
             const string facebookLoginUrl = "https://login.facebook.com/login.php?api_key={0}&amp;auth_token={1}&amp;v=1.0&amp;popup";
             var loginurl = String.Format(facebookLoginUrl, Constants.WebApplicationKey, token);
             System.Diagnostics.Process.Start(loginurl);
            
             // After login.php visited and login completed:
             var result = api.Auth.GetSession(token);
             </code>
             </example>
             <param name="auth_token"></param>
             <returns>If the user has successfully logged in, this will return valid values for each field. The expires element is a Unix time that indicates when the given session will expire. If the value is 0, the session will never expire. See the authentication guide for more information.</returns>
             <remarks>For desktop applications this method must be called at the https endpoint instead of the http endpoint, and its return value is slightly different (as noted below). Also, this function does not require a session_key or call_id (although specifying a call_id will not cause any problems). The session key is storable for the duration of the session, and the uid is storable indefinitely. For desktop applications, the top-level element will have an additional element named secret that should be used as the session's secret key as described in the facebook authentication guide.</remarks>
        </member>
        <member name="M:Facebook.Rest.Auth.ExpireSession">
            <summary>
            Expires the session indicated in the API call, for your application.
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
            var result = api.Auth.ExpireSession();
            </code>
            </example>
            <returns>If the invalidation is successful, this will return true.</returns>
        </member>
        <member name="M:Facebook.Rest.Auth.RevokeAuthorization">
            <summary>
            If this method is called for the logged in user, then no further API calls can be made on that user's behalf until the user decides to authorize the application again.
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
            api.Auth.RevokeAuthorization();
            </code>
            </example>
            <returns>If the revoke is successful, this will return true.</returns>
        </member>
        <member name="M:Facebook.Rest.Auth.RevokeExtendedPermission(Facebook.Schema.Enums.ExtendedPermissions)">
            <summary>
            Removes a specific extended permission that a user explicitly granted to your application.
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
            api.Auth.RevokeExtendedPermission(Enums.ExtendedPermissions.create_event);
            </code>
            </example>
            <param name="ext_perm">The extended permission to revoke.</param>
            <returns>This method returns true upon success.</returns>
        </member>
        <member name="M:Facebook.Rest.Auth.RevokeExtendedPermission(Facebook.Schema.Enums.ExtendedPermissions,System.Int64)">
            <summary>
            Removes a specific extended permission that a user explicitly granted to your application.
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
            api.Auth.RevokeExtendedPermission(Enums.ExtendedPermissions.create_event, Constants.UserId);
            </code>
            </example>
            <param name="ext_perm">The extended permission to revoke.</param>
            <param name="uid">The user ID of the user whose extended permission you want to revoke. If you don't specify this parameter, then you must have a valid session for the current user, and that session's user will have the specified permission revoked.</param>
            <returns>This method returns true upon success.</returns>
        </member>
        <member name="M:Facebook.Rest.Auth.PromoteSession">
            <summary>
            Returns a temporary session secret associated to the current existing session, for use in a client-side component to an application.
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
            var result = api.Auth.PromoteSession();
            </code>
            </example>
            <returns>This method creates a temporary session secret for the current (non-infinite) session of a Web application.</returns>
        </member>
        <member name="M:Facebook.Rest.Auth.CreateTokenAsync(Facebook.Rest.Auth.CreateTokenCallback,System.Object)">
            <summary>
            Creates an auth_token to be passed in as a parameter to GetSession after the user has logged in.
            (Intended for desktop applications only)
            </summary>
            <example>
            <code>
            private static void RunDemoAsync()
            {
                FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.ApplicationSecret, Constants.SessionKey));
                api.Auth.CreateTokenAsync(AsyncDemoCompleted, null);
            }
            
            private static void AsyncDemoCompleted(string result, Object state, FacebookException e)
            {
                var actual = result;
            }
            </code>
            </example>
            <param name="callback">The AsyncCallback delegate</param>
            <param name="state">An object containing state information for this asynchronous request</param>        
            <returns>This method creates an auth_token to be passed in as a parameter to Facebook Login url and then to Auth.GetSession after the user has logged in.</returns>
        </member>
        <member name="M:Facebook.Rest.Auth.GetSessionAsync(System.String,Facebook.Rest.Auth.GetSessionCallback,System.Object)">
             <summary>
             Returns the session key bound to an auth_token, as returned by CreateToken or in the callback URL.
             </summary>
             <example>
             <code>
             private static void RunDemoAsync()
             {
                 FacebookApi api = new FacebookApi(new FBMLCanvasSession(Constants.WebApplicationKey, Constants.WebSecret));
            
                 // Create auth token (using synchronous for sample brevity only)
                 var token = api.Auth.CreateToken();
            
                 // Note user must be navigated to Facebook login.php to validate token
                 const string facebookLoginUrl = "https://login.facebook.com/login.php?api_key={0}&amp;auth_token={1}&amp;v=1.0&amp;popup";
                 var loginurl = String.Format(facebookLoginUrl, Constants.WebApplicationKey, token);
                 System.Diagnostics.Process.Start(loginurl);
            
                 // After login.php visited and 
                 api.Auth.GetSessionAsync(token, AsyncDemoCompleted, null);
             }
            
             private static void AsyncDemoCompleted(session_info result, Object state, FacebookException e)
             {
                 var actual = result;
             }
             </code>
             </example>
             <param name="authToken">Token retrieved from prev CreateToken call</param>
             <param name="callback">The AsyncCallback delegate</param>
             <param name="state">An object containing state information for this asynchronous request</param>        
             <returns>If the user has successfully logged in, this will return valid values for each field. The expires element is a Unix time that indicates when the given session will expire. If the value is 0, the session will never expire. See the authentication guide for more information.</returns>
        </member>
        <member name="M:Facebook.Rest.Auth.ExpireSessionAsync(Facebook.Rest.Auth.ExpireSessionCallback,System.Object)">
             <summary>
             Expires the session indicated in the API call, for your application.
             </summary>
             <example>
             <code>
             private static void RunDemoAsync()
             {
                 FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.ApplicationSecret, Constants.SessionKey));
                 api.Auth.ExpireSessionAsync(AsyncDemoCompleted, null);
             }
            
             private static void AsyncDemoCompleted(bool result, Object state, FacebookException e)
             {
                 var actual = result;
             }
             </code>
             </example>
             <param name="callback">The AsyncCallback delegate</param>
             <param name="state">An object containing state information for this asynchronous request</param>        
             <returns>If the invalidation is successful, this will return true.</returns>
        </member>
        <member name="M:Facebook.Rest.Auth.PromoteSessionAsync(Facebook.Rest.Auth.PromoteSessionCallback,System.Object)">
             <summary>
             Returns a temporary session secret associated to the current existing session, for use in a client-side component to an application.
             </summary>
             <example>
             <code>
             private static void RunDemoAsync()
             {
                 FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.ApplicationSecret, Constants.SessionKey));
                 api.Auth.PromoteSessionAsync(AsyncDemoCompleted, null);
             }
            
             private static void AsyncDemoCompleted(string result, Object state, FacebookException e)
             {
                 var actual = result;
             }
             </code>
             </example>
             <param name="callback">The AsyncCallback delegate</param>
             <param name="state">An object containing state information for this asynchronous request</param>        
             <returns>This method creates a temporary session secret for the current (non-infinite) session of a Web application.</returns>
        </member>
        <member name="M:Facebook.Rest.Auth.RevokeAuthorizationAsync(Facebook.Rest.Auth.RevokeAuthorizationCallback,System.Object)">
            <summary>
            If this method is called for the logged in user, then no further API calls can be made on that user's behalf until the user decides to authorize the application again.
            </summary>
            <example>
            <code>
            private static void RunDemoAsync()
            {
                FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.ApplicationSecret, Constants.SessionKey));
                api.Auth.RevokeAuthorizationAsync(AsyncDemoCompleted, null);
            }
            
            private static void AsyncDemoCompleted(bool result, Object state, FacebookException e)
            {
                var actual = result;
            }
            </code>
            </example>
            <param name="callback">The AsyncCallback delegate</param>
            <param name="state">An object containing state information for this asynchronous request</param>        
            <returns>If the revoke is successful, this will return true.</returns>
        </member>
        <member name="M:Facebook.Rest.Auth.RevokeExtendedPermissionAsync(Facebook.Schema.Enums.ExtendedPermissions,Facebook.Rest.Auth.RevokeExtendedPermissionCallback,System.Object)">
             <summary>
             Removes a specific extended permission that a user explicitly granted to your application.
             </summary>
             <example>
             <code>
             private static void RunDemoAsync()
             {
                 FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.ApplicationSecret, Constants.SessionKey));
                 api.Auth.RevokeExtendedPermissionAsync(Enums.ExtendedPermissions.create_event, AsyncDemoCompleted, null);
             }
            
             private static void AsyncDemoCompleted(bool result, Object state, FacebookException e)
             {
                 var actual = result;
             }
             </code>
             </example>
             <param name="ext_perm">The extended permission to revoke.</param>
             <param name="callback">The AsyncCallback delegate</param>
             <param name="state">An object containing state information for this asynchronous request</param>
             <returns>This method returns true upon success.</returns>
        </member>
        <member name="M:Facebook.Rest.Auth.RevokeExtendedPermissionAsync(Facebook.Schema.Enums.ExtendedPermissions,System.Int64,Facebook.Rest.Auth.RevokeExtendedPermissionCallback,System.Object)">
             <summary>
             Begins an async request to to revoke extended permission. See the facebook 
             guide for more information
             </summary>
             <example>
             <code>
             private static void RunDemoAsync()
             {
                 FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.ApplicationSecret, Constants.SessionKey));
                 api.Auth.RevokeExtendedPermissionAsync(Enums.ExtendedPermissions.create_event, Constants.UserId, AsyncDemoCompleted, null);
             }
            
             private static void AsyncDemoCompleted(bool result, Object state, FacebookException e)
             {
                 var actual = result;
             }
             </code>
             </example>
             <param name="ext_perm">The extended permission to revoke.</param>
             <param name="uid">The user ID of the user whose extended permission you want to revoke. If you don't specify this parameter, then you must have a valid session for the current user, and that session's user will have the specified permission revoked.</param>
             <param name="callback">The AsyncCallback delegate</param>
             <param name="state">An object containing state information for this asynchronous request</param>        
             <returns>This method returns true upon success.</returns>
        </member>
        <member name="T:Facebook.Rest.Auth.CreateTokenCallback">
            <summary>
            Delegate called when CreateToken call completed
            </summary>
            <param name="token">Token that was created</param>
            <param name="state">An object containing state information for this asynchronous request</param>
            <param name="e">Exception object, if the call resulted in exception.</param>
        </member>
        <member name="T:Facebook.Rest.Auth.GetSessionCallback">
            <summary>
            Delegate called when GetSession call completed
            </summary>
            <param name="sessionInfo">session info of current session</param>
            <param name="state">An object containing state information for this asynchronous request</param>
            <param name="e">Exception object, if the call resulted in exception.</param>
        </member>
        <member name="T:Facebook.Rest.Auth.ExpireSessionCallback">
            <summary>
            Delegate called when ExpireSession call completed
            </summary>
            <param name="result">result of operation</param>
            <param name="state">An object containing state information for this asynchronous request</param>
            <param name="e">Exception object, if the call resulted in exception.</param>
        </member>
        <member name="T:Facebook.Rest.Auth.PromoteSessionCallback">
            <summary>
            Delegate called when PromoteSession call completed
            </summary>
            <param name="token">Token represeting a session secret</param>
            <param name="state">An object containing state information for this asynchronous request</param>
            <param name="e">Exception object, if the call resulted in exception.</param>
        </member>
        <member name="T:Facebook.Rest.Auth.RevokeAuthorizationCallback">
            <summary>
            Delegate called when RevokeAuthorization call completed
            </summary>
            <param name="result">result of operation</param>
            <param name="state">An object containing state information for this asynchronous request</param>
            <param name="e">Exception object, if the call resulted in exception.</param>
        </member>
        <member name="T:Facebook.Rest.Auth.RevokeExtendedPermissionCallback">
            <summary>
            Delegate called when RevokeExtendedPermission call completed
            </summary>
            <param name="result">result of operation</param>
            <param name="state">An object containing state information for this asynchronous request</param>
            <param name="e">Exception object, if the call resulted in exception.</param>
        </member>
        <member name="T:Facebook.BindingHelper.ActivityPostAttachment">
            <summary>
            Defines a stream post object
            </summary>
        </member>
        <member name="M:Facebook.BindingHelper.ActivityPostAttachment.#ctor(Facebook.Schema.stream_attachment)">
            <summary>
            Initializes a ActivityPost object
            </summary>
            <param name="attachment">activitypost attachment</param>
        </member>
        <member name="M:Facebook.BindingHelper.ActivityPostAttachment.#ctor(Facebook.Utility.FacebookStreamAttachment)">
            <summary>
            Initializes a ActivityPost object
            </summary>
            <param name="attachment">activitypost attachment</param>
        </member>
        <member name="P:Facebook.BindingHelper.ActivityPostAttachment.Media">
            <summary>
            List of media information
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.ActivityPostAttachment.Name">
            <summary>
            Name of attachment
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.ActivityPostAttachment.Href">
            <summary>
            Href of attachement
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.ActivityPostAttachment.Caption">
            <summary>
            Caption of attachment
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.ActivityPostAttachment.Description">
            <summary>
            Description of attachment
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.ActivityPostAttachment.Icon">
            <summary>
            Icon of attachment
            </summary>
        </member>
        <member name="T:Facebook.BindingHelper.ActivityPostAttachmentMedia">
            <summary>
            Represents an attachment media object
            </summary>
        </member>
        <member name="M:Facebook.BindingHelper.ActivityPostAttachmentMedia.#ctor(Facebook.Schema.stream_media)">
            <summary>
            Initializes new AcitivtyPostAttachmentMedia object
            </summary>
            <param name="media"></param>
        </member>
        <member name="P:Facebook.BindingHelper.ActivityPostAttachmentMedia.Href">
            <summary>
            Href of media
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.ActivityPostAttachmentMedia.Alt">
            <summary>
            Alt information
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.ActivityPostAttachmentMedia.Type">
            <summary>
            Type of media
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.ActivityPostAttachmentMedia.Source">
            <summary>
            Media source
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.ActivityPostAttachmentMedia.Video">
            <summary>
            Video information
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.ActivityPostAttachmentMedia.Obj">
            <summary>
            Object information
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.ActivityPostAttachmentMedia.Music">
            <summary>
            Music information
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.ActivityPostAttachmentMedia.Data">
            <summary>
            Data information
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.ActivityPostAttachmentMedia.Photo">
            <summary>
            Photo information
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.ActivityPostAttachmentMedia.Swf">
            <summary>
            Flash object information
            </summary>
        </member>
        <member name="T:Facebook.BindingHelper.ActivityPostAttachmentPhotoInfo">
            <summary>
            Represents photo info in Attachment
            </summary>
        </member>
        <member name="M:Facebook.BindingHelper.ActivityPostAttachmentPhotoInfo.#ctor(Facebook.Schema.stream_photo)">
            <summary>
            Initializes new ActivityPostAttachmentPhotoInfo object
            </summary>
            <param name="photo">Photo information</param>
        </member>
        <member name="M:Facebook.BindingHelper.ActivityPostAttachmentPhotoInfo.#ctor(Facebook.Utility.FacebookStreamPhoto)">
            <summary>
            Initializes new ActivityPostAttachmentPhotoInfo object
            </summary>
            <param name="photo">Photo information</param>
        </member>
        <member name="P:Facebook.BindingHelper.ActivityPostAttachmentPhotoInfo.AlbumId">
            <summary>
            Album id
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.ActivityPostAttachmentPhotoInfo.Album">
            <summary>
            Album object 
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.ActivityPostAttachmentPhotoInfo.PhotoId">
            <summary>
            Photo Id
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.ActivityPostAttachmentPhotoInfo.Photo">
            <summary>
            Photo object
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.ActivityPostAttachmentPhotoInfo.Owner">
            <summary>
            Owner information
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.ActivityPostAttachmentPhotoInfo.Index">
            <summary>
            Index information
            </summary>
        </member>
        <member name="E:Facebook.BindingHelper.ActivityPostAttachmentPhotoInfo.PropertyChanged">
            <summary>
            Property change event
            </summary>
        </member>
        <member name="T:Facebook.Session.SessionManagement">
            <summary>
            Currently, there is not implementation, so I don't need this.
            </summary>
        </member>
        <member name="M:Facebook.Session.SessionManagement.Login">
            <summary>
            Logs in user
            </summary>
        </member>
        <member name="M:Facebook.Session.SessionManagement.Logout">
            <summary>
            Logs out user
            </summary>
        </member>
        <member name="T:Facebook.Session.FacebookSessionFactory">
            <summary>
            You can't create the factory until you're ready to provide it 
            the inputs that it needs.
            </summary>
        </member>
        <member name="T:Facebook.Rest.Comments">
            <summary>
            Facebook Comments API methods.
            </summary>
        </member>
        <member name="M:Facebook.Rest.Comments.#ctor(Facebook.Session.IFacebookSession)">
            <summary>
            Public constructor for facebook.Comments
            </summary>
            <param name="session">Needs a connected Facebook Session object for making requests</param>
        </member>
        <member name="M:Facebook.Rest.Comments.Get(System.String)">
            <summary>
            Returns all comments for a given xid posted through fb:comments. This method is a wrapper for the FQL query on the comment FQL table.
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
            var result = api.Comments.Get("xid_test");
            </code>
            </example>
            <param name="xid">The comment xid that you want to retrieve. For a Comments Box, you can determine the xid on the admin panel or in the application settings editor in the Facebook Developer application.</param>
            <returns>This method returns all comments for a given xid.</returns>
        </member>
        <member name="M:Facebook.Rest.Comments.Add(System.String,System.String)">
            <summary>
            Adds a comment for a given xid on behalf of a user. Calls with a session secret may only act on behalf of the session user.
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
            var result = api.Comments.Add("xid_test", "test");
            </code>
            </example>
            <param name="xid">The xid of a particular Comments Box or fb:comments.</param>
            <param name="text">The comment/text to be added, as inputted by a user.</param>
            <returns>This call returns a comment_id if the comment was added successfully, or an error code if the call was unsuccessful.</returns>
        </member>
        <member name="M:Facebook.Rest.Comments.Add(System.String,System.String,System.Int64)">
            <summary>
            Adds a comment for a given xid on behalf of a user. Calls with a session secret may only act on behalf of the session user.
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
            var result = api.Comments.Add("xid_test", "test", Constants.UserId);
            </code>
            </example>
            <param name="xid">The xid of a particular Comments Box or fb:comments.</param>
            <param name="text">The comment/text to be added, as inputted by a user.</param>
            <param name="uid">The user ID to add a comment on behalf of. This defaults to the session user and must only be the session user if using a session secret (example: Desktop and JSCL apps).</param>
            <returns>This call returns a comment_id if the comment was added successfully, or an error code if the call was unsuccessful.</returns>
        </member>
        <member name="M:Facebook.Rest.Comments.Add(System.String,System.String,System.Int64,System.String,System.String,System.Boolean)">
            <summary>
            Adds a comment for a given xid on behalf of a user. Calls with a session secret may only act on behalf of the session user.
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
            var result = api.Comments.Add("xid_test", "test", Constants.UserId, "comment title", "http://www.facebook.com", false);
            </code>
            </example>
            <param name="xid">The xid of a particular Comments Box or fb:comments.</param>
            <param name="text">The comment/text to be added, as inputted by a user.</param>
            <param name="uid">The user ID to add a comment on behalf of. This defaults to the session user and must only be the session user if using a session secret (example: Desktop and JSCL apps).</param>
            <param name="title">The title associated with the item the user is commenting on. This is required if publishing a feed story as it provides the text of the permalink to give context to the user's comment.</param>
            <param name="url">The url associated with the item the user is commenting on. This is required if publishing a feed story as it is the permalink associated with the comment.</param>
            <param name="publish_to_stream">Whether a feed story should be published about this comment. This defaults to false and can only be 'true' if the user has granted the publish_stream extended permission.</param>
            <returns>This call returns a comment_id if the comment was added successfully, or an error code if the call was unsuccessful.</returns>
        </member>
        <member name="M:Facebook.Rest.Comments.Remove(System.String,System.Int32)">
            <summary>
            Removes a comment for a given xid by comment_id. Calls with a session secret may only act on behalf of the session user.
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
            var result = api.Comments.Remove("xid_test", 174967);
            </code>
            </example>
            <param name="xid">The xid of a particular Comments Box or fb:comments.</param>
            <param name="comment_id">The comment_id, as returned by Comments.add or Comments.get, to be removed.</param>
            <returns>This call returns true if the comment was removed successfully, or an error code if the call was unsuccessful.</returns>
        </member>
        <member name="M:Facebook.Rest.Comments.Remove(System.String,System.Int32,System.Boolean)">
            <summary>
            Removes a comment for a given xid by comment_id. Calls with a session secret may only act on behalf of the session user.
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
            var result = api.Comments.Remove("xid_test", 174967, true);
            </code>
            </example>
            <param name="xid">The xid of a particular Comments Box or fb:comments.</param>
            <param name="comment_id">The comment_id, as returned by Comments.add or Comments.get, to be removed.</param>
            <param name="useSession">Flag to determine if current session should be passed to API.</param>
            <returns>This call returns true if the comment was removed successfully, or an error code if the call was unsuccessful.</returns>
        </member>
        <member name="M:Facebook.Rest.Comments.GetAsync(System.String,Facebook.Rest.Comments.GetCallback,System.Object)">
             <summary>
             Returns all comments for a given xid posted through fb:comments. This method is a wrapper for the FQL query on the comment FQL table.
             </summary>
             <example>
             <code>
             private static void RunDemoAsync()
             {
                 FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.ApplicationSecret, Constants.SessionKey));
                 api.Comments.GetAsync("xid_test", AsyncDemoCompleted, null);
             }
            
             private static void AsyncDemoCompleted(IList&lt;comment&gt; result, Object state, FacebookException e)
             {
                 var actual = result;
             }
             </code>
             </example>
             <param name="xid">The comment xid that you want to retrieve. For a Comments Box, you can determine the xid on the admin panel or in the application settings editor in the Facebook Developer application.</param>
             <param name="callback">The AsyncCallback delegate</param>
             <param name="state">An object containing state information for this asynchronous request</param>        
             <returns>This method returns all comments for a given xid.</returns>
        </member>
        <member name="M:Facebook.Rest.Comments.AddAsync(System.String,System.String,Facebook.Rest.Comments.AddCallback,System.Object)">
             <summary>
             Adds a comment for a given xid on behalf of a user. Calls with a session secret may only act on behalf of the session user.
             </summary>
             <example>
             <code>
             private static void RunDemoAsync()
             {
                 FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.ApplicationSecret, Constants.SessionKey));
                 api.Comments.AddAsync("xid_test", "test", AsyncDemoCompleted, null);
             }
            
             private static void AsyncDemoCompleted(int result, Object state, FacebookException e)
             {
                 var actual = result;
             }
             </code>
             </example>
             <param name="xid">The xid of a particular Comments Box or fb:comments.</param>
             <param name="text">The comment/text to be added, as inputted by a user.</param>
             <param name="callback">The AsyncCallback delegate</param>
             <param name="state">An object containing state information for this asynchronous request</param>        
             <returns>This call returns a comment_id if the comment was added successfully, or an error code if the call was unsuccessful.</returns>
        </member>
        <member name="M:Facebook.Rest.Comments.AddAsync(System.String,System.String,System.Int64,Facebook.Rest.Comments.AddCallback,System.Object)">
             <summary>
             Adds a comment for a given xid on behalf of a user. Calls with a session secret may only act on behalf of the session user.
             </summary>
             <example>
             <code>
             private static void RunDemoAsync()
             {
                 FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.ApplicationSecret, Constants.SessionKey));
                 api.Comments.AddAsync("xid_test", "test", Constants.UserId, AsyncDemoCompleted, null);
             }
            
             private static void AsyncDemoCompleted(int result, Object state, FacebookException e)
             {
                 var actual = result;
             }
             </code>
             </example>
             <param name="xid">The xid of a particular Comments Box or fb:comments.</param>
             <param name="text">The comment/text to be added, as inputted by a user.</param>
             <param name="uid">The user ID to add a comment on behalf of. This defaults to the session user and must only be the session user if using a session secret (example: Desktop and JSCL apps).</param>
             <param name="callback">The AsyncCallback delegate</param>
             <param name="state">An object containing state information for this asynchronous request</param>        
             <returns>This call returns a comment_id if the comment was added successfully, or an error code if the call was unsuccessful.</returns>
        </member>
        <member name="M:Facebook.Rest.Comments.AddAsync(System.String,System.String,System.Int64,System.String,System.String,System.Boolean,Facebook.Rest.Comments.AddCallback,System.Object)">
             <summary>
             Adds a comment for a given xid on behalf of a user. Calls with a session secret may only act on behalf of the session user.
             </summary>
             <example>
             <code>
             private static void RunDemoAsync()
             {
                 FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.ApplicationSecret, Constants.SessionKey));
                 api.Comments.AddAsync("xid_test", "test", Constants.UserId, "comment title", "http://www.facebook.com", false, AsyncDemoCompleted, null);
             }
            
             private static void AsyncDemoCompleted(int result, Object state, FacebookException e)
             {
                 var actual = result;
             }
             </code>
             </example>
             <param name="xid">The xid of a particular Comments Box or fb:comments.</param>
             <param name="text">The comment/text to be added, as inputted by a user.</param>
             <param name="uid">The user ID to add a comment on behalf of. This defaults to the session user and must only be the session user if using a session secret (example: Desktop and JSCL apps).</param>
             <param name="title">The title associated with the item the user is commenting on. This is required if publishing a feed story as it provides the text of the permalink to give context to the user's comment.</param>
             <param name="url">The url associated with the item the user is commenting on. This is required if publishing a feed story as it is the permalink associated with the comment.</param>
             <param name="publish_to_stream">Whether a feed story should be published about this comment. This defaults to false and can only be 'true' if the user has granted the publish_stream extended permission.</param>
             <param name="callback">The AsyncCallback delegate</param>
             <param name="state">An object containing state information for this asynchronous request</param>        
             <returns>This call returns a comment_id if the comment was added successfully, or an error code if the call was unsuccessful.</returns>
        </member>
        <member name="M:Facebook.Rest.Comments.RemoveAsync(System.String,System.Int32,Facebook.Rest.Comments.RemoveCallback,System.Object)">
             <summary>
             Removes a comment for a given xid by comment_id. Calls with a session secret may only act on behalf of the session user.
             </summary>
             <example>
             <code>
             private static void RunDemoAsync()
             {
                 FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.ApplicationSecret, Constants.SessionKey));
                 api.Comments.RemoveAsync("xid_test", 174967, AsyncDemoCompleted, null);
             }
            
             private static void AsyncDemoCompleted(bool result, Object state, FacebookException e)
             {
                 var actual = result;
             }
             </code>
             </example>
             <param name="xid">The xid of a particular Comments Box or fb:comments.</param>
             <param name="comment_id">The comment_id, as returned by Comments.add or Comments.get, to be removed.</param>
             <param name="callback">The AsyncCallback delegate</param>
             <param name="state">An object containing state information for this asynchronous request</param>        
             <returns>This call returns true if the comment was removed successfully, or an error code if the call was unsuccessful.</returns>
        </member>
        <member name="M:Facebook.Rest.Comments.RemoveAsync(System.String,System.Int32,System.Boolean,Facebook.Rest.Comments.RemoveCallback,System.Object)">
             <summary>
             Removes a comment for a given xid by comment_id. Calls with a session secret may only act on behalf of the session user.
             </summary>
             <example>
             <code>
             private static void RunDemoAsync()
             {
                 FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.ApplicationSecret, Constants.SessionKey));
                 api.Comments.RemoveAsync("xid_test", 174967, true, AsyncDemoCompleted, null);
             }
            
             private static void AsyncDemoCompleted(bool result, Object state, FacebookException e)
             {
                 var actual = result;
             }
             </code>
             </example>
             <param name="xid">The xid of a particular Comments Box or fb:comments.</param>
             <param name="comment_id">The comment_id, as returned by Comments.add or Comments.get, to be removed.</param>
             <param name="useSession">Flag to determine if current session should be passed to API.</param>
             <param name="callback">The AsyncCallback delegate</param>
             <param name="state">An object containing state information for this asynchronous request</param>        
             <returns>This call returns true if the comment was removed successfully, or an error code if the call was unsuccessful.</returns>
        </member>
        <member name="T:Facebook.Rest.Comments.GetCallback">
            <summary>
            </summary>
            <param name="comments"></param>
            <param name="state"></param>
            <param name="e"></param>
        </member>
        <member name="T:Facebook.Rest.Comments.AddCallback">
            <summary>
            </summary>
            <param name="comment_id"></param>
            <param name="state"></param>
            <param name="e"></param>
        </member>
        <member name="T:Facebook.Rest.Comments.RemoveCallback">
            <summary>
            </summary>
            <param name="result"></param>
            <param name="state"></param>
            <param name="e"></param>
        </member>
        <member name="T:Facebook.BindingHelper.ActivityCommentCollection">
            <summary>
            Defines a collection of ActivityComment object
            </summary>
        </member>
        <member name="M:Facebook.BindingHelper.ActivityCommentCollection.#ctor">
            <summary>
            Initializes ActivityCommentCollection object
            </summary>
        </member>
        <member name="M:Facebook.BindingHelper.ActivityCommentCollection.#ctor(System.Collections.Generic.IEnumerable{Facebook.BindingHelper.ActivityComment})">
            <summary>
            Initializes ActivityCommentCollection from comments list
            </summary>
            <param name="comments">list of comments</param>
        </member>
        <member name="M:Facebook.BindingHelper.ActivityCommentCollection.#ctor(System.Collections.Generic.IEnumerable{Facebook.Schema.comment})">
            <summary>
            Initializes ActivityCommentCollection from comments list
            </summary>
            <param name="comments">comments list</param>
        </member>
        <member name="M:Facebook.BindingHelper.ActivityCommentCollection.#ctor(System.Collections.Generic.IEnumerable{Facebook.Utility.FacebookComment})">
            <summary>
            Initializes ActivityCommentCollection from comments list
            </summary>
            <param name="comments">comments list</param>
        </member>
        <member name="T:Facebook.Utility.FacebookObject`1">
            <summary>
            Help to serialize the facebook object.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Facebook.Utility.FacebookObject`1.Deserialize(System.String)">
            <summary>
            Deserializes facebook response to object
            </summary>
            <param name="xml"></param>
            <returns>This method returns an instance of the specified object (of type T).</returns>
        </member>
        <member name="T:Facebook.Rest.Links">
            <summary>
            Facebook Links API methods.
            </summary>
        </member>
        <member name="M:Facebook.Rest.Links.#ctor(Facebook.Session.IFacebookSession)">
            <summary>
            Public constructor for facebook.Links
            </summary>
            <param name="session">Needs a connected Facebook Session object for making requests</param>
        </member>
        <member name="M:Facebook.Rest.Links.Get">
            <summary>
            Returns all links the user has posted on their profile through your application.
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
            var result = api.Links.Get();
            </code>
            </example>
            <returns>This method returns an List of link data.</returns>
            <remarks>For desktop applications, don't specify a uid; keep the default. (Default value is the logged-in user.)</remarks>
        </member>
        <member name="M:Facebook.Rest.Links.Get(System.Int64)">
            <summary>
            Returns all links the user has posted on their profile through your application.
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
            var result = api.Links.Get(Constants.UserId);
            </code>
            </example>
            <param name="uid">he user ID of the user whose links you want to retrieve.</param>
            <returns>This method returns an List of link data.</returns>
            <remarks>For desktop applications, don't specify a uid; keep the default. (Default value is the logged-in user.)</remarks>
        </member>
        <member name="M:Facebook.Rest.Links.Post(System.Int64,System.Uri,System.String)">
            <summary>
            Lets a user post a link on their Wall through your application.
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
            var result = api.Links.Post(Constants.UserId, new Uri("http://www.bing.com"), "I'm checking out Bing.");
            </code>
            </example>
            <param name="uid">The user ID of the user posting the link.</param>
            <param name="url">The URL for the link.</param>
            <param name="comment">The comment the user included with the link.</param>
            <returns>This method returns a link_id if successful.</returns>
        </member>
        <member name="M:Facebook.Rest.Links.GetAsync(Facebook.Rest.Links.GetCallback,System.Object)">
             <summary>
             Returns all links the user has posted on their profile through your application.
             </summary>
             <example>
             <code>
             private static void RunDemoAsync()
             {
                 FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.ApplicationSecret, Constants.SessionKey));
                 api.Links.GetAsync(AsyncDemoCompleted, null);
             } 
            
             private static void AsyncDemoCompleted(IList&lt;link&gt; result, Object state, FacebookException e)
             {
                 var actual = result;
             }
             </code>
             </example>
             <param name="callback">The AsyncCallback delegate</param>
             <param name="state">An object containing state information for this asynchronous request</param>        
             <returns>This method returns an List of link data.</returns>
             <remarks>For desktop applications, don't specify a uid; keep the default. (Default value is the logged-in user.)</remarks>
        </member>
        <member name="M:Facebook.Rest.Links.GetAsync(System.Int64,Facebook.Rest.Links.GetCallback,System.Object)">
             <summary>
             Returns all links the user has posted on their profile through your application.
             </summary>
             <example>
             <code>
             private static void RunDemoAsync()
             {
                 FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.ApplicationSecret, Constants.SessionKey));
                 api.Links.GetAsync(Constants.UserId, AsyncDemoCompleted, null);
             } 
            
             private static void AsyncDemoCompleted(IList&lt;link&gt; result, Object state, FacebookException e)
             {
                 var actual = result;
             }
             </code>
             </example>
             <param name="uid">he user ID of the user whose links you want to retrieve.</param>
             <param name="callback">The AsyncCallback delegate</param>
             <param name="state">An object containing state information for this asynchronous request</param>        
             <returns>This method returns an List of link data.</returns>
             <remarks>For desktop applications, don't specify a uid; keep the default. (Default value is the logged-in user.)</remarks>
        </member>
        <member name="M:Facebook.Rest.Links.PostAsync(System.Int64,System.Uri,System.String,Facebook.Rest.Links.PostCallback,System.Object)">
             <summary>
             Lets a user post a link on their Wall through your application.
             </summary>
             <example>
             <code>
             private static void RunDemoAsync()
             {
                 FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.ApplicationSecret, Constants.SessionKey));
                 api.Links.PostAsync(Constants.UserId, new Uri("http://www.bing.com"), "I'm checking out Bing.", AsyncDemoCompleted, null);
             }
            
             private static void AsyncDemoCompleted(long result, Object state, FacebookException e)
             {
                 var actual = result;
             }
             </code>
             </example>
             <param name="uid">The user ID of the user posting the link.</param>
             <param name="url">The URL for the link.</param>
             <param name="comment">The comment the user included with the link.</param>
             <param name="callback">The AsyncCallback delegate</param>
             <param name="state">An object containing state information for this asynchronous request</param>        
             <returns>This method returns a link_id if successful.</returns>
        </member>
        <member name="T:Facebook.Rest.Links.GetCallback">
            <summary>
            Delegate called when GetLinks call is completed.
            </summary>
            <param name="links">array of links object</param>
            <param name="state">An object containing state information for this asynchronous request</param>
            <param name="e">Exception object, if the call resulted in exception.</param>
        </member>
        <member name="T:Facebook.Rest.Links.PostCallback">
            <summary>
            Delegate called when PostLinks call is completed.
            </summary>
            <param name="linkId">ID of the link posted</param>
            <param name="state">An object containing state information for this asynchronous request</param>
            <param name="e">Exception object, if the call resulted in exception.</param>
        </member>
        <member name="T:Facebook.Rest.Video">
            <summary>
            Facebook Video API methods.
            </summary>
        </member>
        <member name="M:Facebook.Rest.Video.#ctor(Facebook.Session.IFacebookSession)">
            <summary>
            Public constructor for facebook.video
            </summary>
            <param name="session">Needs a connected Facebook Session object for making requests</param>
        </member>
        <member name="M:Facebook.Rest.Video.GetUploadLimits">
            <summary>
            Returns the file size and length limits for a video that the current user can upload through your application.
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
            var result = api.Video.GetUploadLimits();
            </code>
            </example>
            <returns>This method returns a video_limits object length and size keys mapped to the number of seconds and bytes, respectively.</returns>
        </member>
        <member name="M:Facebook.Rest.Video.Upload(System.String,System.String,System.IO.FileInfo)">
            <summary>
            Uploads a video owned by the current session user and returns the video.
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
            var data = new FileInfo(@"C:\Butterfly.wmv");
            var result = api.Video.Upload("my new video", "a video upload test", data);
            </code>
            </example>
            <param name="title">The name of the video. The name cannot be longer than 65 characters. Longer titles will get truncated and will not return an error.</param>
            <param name="description">A description of the video. There is no limit to the length of the description.</param>
            <param name="data">The raw image data for the video.</param>
            <returns>This method returns a video object containing information about the uploaded object.</returns>
        </member>
        <member name="M:Facebook.Rest.Video.GetUploadLimitsAsync(Facebook.Rest.Video.GetUploadLimitsCallback,System.Object)">
             <summary>
             Returns the file size and length limits for a video that the current user can upload through your application.
             </summary>
             <example>
             <code>
             private static void RunDemoAsync()
             {
                 FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.ApplicationSecret, Constants.SessionKey));
                 api.Video.GetUploadLimitsAsync(AsyncDemoCompleted, null);
             }
            
             private static void AsyncDemoCompleted(video_limits result, Object state, FacebookException e)
             {
                 var actual = result;
             }
             </code>
             </example>
             <param name="callback">The AsyncCallback delegate</param>
             <param name="state">An object containing state information for this asynchronous request</param>        
             <returns>This method returns a video_limits object length and size keys mapped to the number of seconds and bytes, respectively.</returns>
        </member>
        <member name="M:Facebook.Rest.Video.UploadAsync(System.String,System.String,System.Byte[],System.String,Facebook.Rest.Video.UploadCallback,System.Object)">
             <summary>
             Uploads a video owned by the current session user and returns the video.
             </summary>
             <example>
             <code>
             private static void RunDemoAsync()
             {
                 FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
                 var filePath = @"C:\Butterfly.wmv";
                 var fileStream = System.IO.File.OpenRead(filePath);
                 var reader = new System.IO.BinaryReader(fileStream);
                 var fileData = reader.ReadBytes((int)fileStream.Length);
                 api.Video.UploadAsync("test", "video upload test", System.IO.Path.GetFileName(filePath), fileData, "video/avi", AsyncDemoCompleted, null);
             }
            
             private static void AsyncDemoCompleted(video result, Object state, FacebookException e)
             {
                 var actual = result;
             }
             </code>
             </example>
             <param name="title">The name of the video. The name cannot be longer than 65 characters. Longer titles will get truncated and will not return an error.</param>
             <param name="description">A description of the video. There is no limit to the length of the description.</param>
             <param name="data">The raw image data for the video.</param>
             <param name="contentType">Content type of the video.  Supported types are: video/x-ms-asf,video/avi,video/x-flv,video/mp4,video/x-matroska,video/quicktime,video/mp4,video/mpeg,video/mpeg,video/mp4,video/mpeg,application/x-winamp,video/ogg,video/quicktime,video/dvd,video/x-ms-wmv</param>
             <param name="callback">The AsyncCallback delegate</param>
             <param name="state">An object containing state information for this asynchronous request</param>        
             <returns>This method returns a video object containing information about the uploaded object.</returns>
        </member>
        <member name="M:Facebook.Rest.Video.UploadAsync(System.String,System.String,System.Byte[],Facebook.Schema.Enums.FileType,Facebook.Rest.Video.UploadCallback,System.Object)">
             <summary>
             Uploads a video owned by the current session user and returns the video.
             </summary>
             <example>
             <code>
             private static void RunDemoAsync()
             {
                 FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
                 var filePath = @"C:\Butterfly.wmv";
                 var fileStream = System.IO.File.OpenRead(filePath);
                 var reader = new System.IO.BinaryReader(fileStream);
                 var fileData = reader.ReadBytes((int)fileStream.Length);
                 api.Video.UploadAsync("test", "video upload test", System.IO.Path.GetFileName(filePath), fileData, "video/avi", AsyncDemoCompleted, null);
             }
            
             private static void AsyncDemoCompleted(video result, Object state, FacebookException e)
             {
                 var actual = result;
             }
             </code>
             </example>
             <param name="title">The name of the video. The name cannot be longer than 65 characters. Longer titles will get truncated and will not return an error.</param>
             <param name="description">A description of the video. There is no limit to the length of the description.</param>
             <param name="data">The raw image data for the video.</param>
             <param name="fileType">One of the video type</param>
             <param name="callback">The AsyncCallback delegate</param>
             <param name="state">An object containing state information for this asynchronous request</param>        
             <returns>This method returns a video object containing information about the uploaded object.</returns>
        </member>
        <member name="T:Facebook.Rest.Video.GetUploadLimitsCallback">
            <summary>
            Delegate called when GetVideoUploadLimits call completed
            </summary>
            <param name="limits">video limits data</param>
            <param name="state">An object containing state information for this asynchronous request</param>
            <param name="e">Exception object, if the call resulted in exception.</param>
        </member>
        <member name="T:Facebook.Rest.Video.UploadCallback">
            <summary>
            Delegate called when VideoUpload call completed
            </summary>
            <param name="video">information about uploaded video</param>
            <param name="state">An object containing state information for this asynchronous request</param>
            <param name="e">Exception object, if the call resulted in exception.</param>
        </member>
        <member name="T:Facebook.Rest.Message">
            <summary>
            Facebook LiveMessage API methods.
            </summary>
        </member>
        <member name="M:Facebook.Rest.Message.#ctor(Facebook.Session.IFacebookSession)">
            <summary>
            Public constructor for facebook.LiveMessage
            </summary>
            <param name="session">Needs a connected Facebook Session object for making requests</param>
        </member>
        <member name="M:Facebook.Rest.Message.GetThreadsInFolder(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns all of a user's messages and threads from the Inbox. The user needs to grant the calling application the read_mailbox extended permission. 
            This method is a wrapper around the thread and message FQL tables; you can achieve more fine-grained control by using those two FQL tables in conjunction with the fql.multiquery API call. 
            Applications must pass a valid session key or a user ID. 
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
            var result = api.Message.GetThreadsInFolder(
            </code>
            </example>
            <param name="folder_id">The ID of the folder you want to return. The ID can be one of: 0 (for Inbox), 1 (for Outbox), or 4 (for Updates). </param>
            <param name="uid">Indicates whether to include notifications that have already been read. By default, notifications a user has read are not included. </param>
            <param name="limit">Indicates the number of threads to return.</param>
            <param name="offset">Indicates how many threads to skip from the most recent thread.</param>
            <returns>On success, returns an array of threads, where each contains an array of messages. Or else it returns an error code..</returns>
        </member>
        <member name="M:Facebook.Rest.Message.GetThreadsInFolderAsynch(System.Int32,System.Int32,System.Int32,System.Int32,Facebook.Rest.Message.GetThreadsInFolderCallback,System.Object)">
            <summary>
            Returns all of a user's messages and threads from the Inbox. The user needs to grant the calling application the read_mailbox extended permission. 
            This method is a wrapper around the thread and message FQL tables; you can achieve more fine-grained control by using those two FQL tables in conjunction with the fql.multiquery API call. 
            Applications must pass a valid session key or a user ID. 
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
            var result = api.Message.GetThreadsInFolder(
            </code>
            </example>
            <param name="folder_id">The ID of the folder you want to return. The ID can be one of: 0 (for Inbox), 1 (for Outbox), or 4 (for Updates). </param>
            <param name="uid">Indicates whether to include notifications that have already been read. By default, notifications a user has read are not included. </param>
            <param name="limit">Indicates the number of threads to return.</param>
            <param name="offset">Indicates how many threads to skip from the most recent thread.</param>
            <param name="callback">The callback function if this is being called asynchronously.</param>
            <param name="state">The state of the object to return for the asynch call.</param>
            <returns>On success, returns an array of threads, where each contains an array of messages. Or else it returns an error code..</returns>
        </member>
        <member name="T:Facebook.Rest.Message.GetThreadsInFolderCallback">
            <summary>
            Delegate called when Send call is completed.
            </summary>
            <param name="result">boolean result</param>
            <param name="state">An object containing state information for this asynchronous request</param>
            <param name="e">Exception object, if the call resulted in exception.</param>
        </member>
        <member name="T:Facebook.Utility.DateHelper">
            <summary>
             Contains helper for converting to and from the date formats provided by facebook
            </summary>
        </member>
        <member name="M:Facebook.Utility.DateHelper.ConvertUnixTimeToDateTime(System.Int64)">
            <summary>
             Event dates are stored by assuming the time which the user input was in Pacific
             time (PST or PDT, depending on the date), converting that to UTC, and then
             converting that to Unix epoch time. This algorithm reverses that process.
            </summary>
        </member>
        <member name="M:Facebook.Utility.DateHelper.ConvertDateToFacebookDate(System.DateTime)">
            <summary>
            Convert datetime to UTC time, as understood by Facebook.
            </summary>
            <param name="dateToConvert">The date that we need to pass to the api.</param>
            <returns>The number of seconds since Jan 1, 1970.</returns>
        </member>
        <member name="M:Facebook.Utility.DateHelper.ConvertDoubleToDate(System.Double)">
            <summary>
            Convert UTC time, as returned by Facebook, to localtime.
            </summary>
            <param name="secondsSinceEpoch">The number of seconds since Jan 1, 1970.</param>
            <returns>Local time.</returns>
        </member>
        <member name="M:Facebook.Utility.DateHelper.ConvertDateToDouble(System.Nullable{System.DateTime})">
            <summary>
            Convert datetime to UTC time, as understood by Facebook.
            </summary>
            <param name="dateToConvert">The date that we need to pass to the api.</param>
            <returns>The number of seconds since Jan 1, 1970.</returns>
        </member>
        <member name="P:Facebook.Utility.DateHelper.BaseUTCDateTime">
            <summary>
             Returns a datetime corresponding to 1/1/1970
            </summary>
        </member>
        <member name="T:Facebook.Utility.EnumHelper">
            <summary>
             Contains helper functions used to help when using enums inside of collections and serialization
            </summary>
        </member>
        <member name="M:Facebook.Utility.EnumHelper.GetEnumDescription``1(``0)">
            <summary>
            </summary>
            <param name="enumeratedType"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Facebook.Utility.EnumHelper.GetEnumCollectionDescription``1(System.Collections.ObjectModel.Collection{``0})">
            <summary>
            </summary>
            <param name="enums"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="T:Facebook.Session.IFrameSessionProvider">
            <summary>
            The only difference between this provider and the FBML one is that this one can cache session info
            in cookies.
            </summary>
        </member>
        <member name="M:Facebook.Session.IFrameSessionProvider.GetSession">
            <summary>
            This version of GetSession looks for a sessionkey in the request.  If it can't find one, it looks 
            for a cached session in the cookies.  Failing that, it looks for an auth token, and exchanges it
            for a session.  Any time a session is created/found, it is cached, for the next lookup.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Facebook.Rest.Fql">
            <summary>
            Facebook Fql API methods.
            </summary>
        </member>
        <member name="M:Facebook.Rest.Fql.#ctor(Facebook.Session.IFacebookSession)">
            <summary>
            Public constructor for facebook.Fql
            </summary>
            <param name="session">Needs a connected Facebook Session object for making requests</param>
        </member>
        <member name="M:Facebook.Rest.Fql.Query(System.String)">
            <summary>
            Evaluates an FQL (Facebook Query Language) query.
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
            var query = string.Format("SELECT uid, name FROM user WHERE uid IN ({0})", Constants.UserId);
            var result = api.Fql.Query(query);
            </code>
            </example>
            <param name="query">The query to perform, as described in the FQL documentation.</param>
            <returns>This method returns data that very closely resembles the returns of other API calls like users.getInfo. This is not a coincidence - in fact, many of the other API functions are simply wrappers for FQL queries. Note that it preserves the order of the fields in your SELECT clause and that it can contain multiple elements with the same name depending on how you structure the query.</returns>
        </member>
        <member name="M:Facebook.Rest.Fql.Query``1(System.String)">
            <summary>
            Evaluates an FQL (Facebook Query Language) query.
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
            var query = string.Format("SELECT uid, name FROM user WHERE uid IN ({0})", Constants.UserId);
            user result = api.Fql.Query&lt;user&gt;(query);
            </code>
            </example>
            <param name="query">The query to perform, as described in the FQL documentation.</param>
            <returns>This method returns data that very closely resembles the returns of other API calls like users.getInfo. This is not a coincidence - in fact, many of the other API functions are simply wrappers for FQL queries. Note that it preserves the order of the fields in your SELECT clause and that it can contain multiple elements with the same name depending on how you structure the query.</returns>
        </member>
        <member name="M:Facebook.Rest.Fql.Multiquery(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Evaluates a series of FQL (Facebook Query Language) queries in one call and returns the data at one time.
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
            var query1 = string.Format("SELECT uid, name FROM user WHERE uid IN ({0})", Constants.UserId);
            var query2 = string.Format("SELECT uid, name FROM user WHERE uid IN ({0})", Constants.UserId);
            var queries = new Dictionary&lt;string, string&gt;();
            queries.Add("firstQuery", query1);
            queries.Add("secondQuery", query2);
            var results = api.Fql.Multiquery(queries);
            </code>
            </example>
            <param name="queries">A collection of the queries to perform. The array contains a set of key/value pairs. Each key is a query name, which can contain only alphanumeric characters and optional underscores. Each key maps to a value containing a traditional FQL query.</param>
            <returns>This call returns a List of query results. The keys returned are the names of the queries made.  As with fql.query, the data returned from each query very closely resembles the returns of other API calls like users.getInfo, as many API functions are simply wrappers for FQL queries.</returns>
        </member>
        <member name="M:Facebook.Rest.Fql.Multiquery(Facebook.Rest.FqlMultiQueryInfo[])">
            <summary>
            Evaluates a series of FQL (Facebook Query Language) queries in one call and returns the data at one time.
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
            var query1 = string.Format("SELECT uid, name FROM user WHERE uid IN ({0})", Constants.UserId);
            var query2 = string.Format("SELECT uid, name FROM user WHERE uid IN ({0})", Constants.UserId);
            var queries = new Dictionary&lt;string, string&gt;();
            queries.Add("firstQuery", query1);
            queries.Add("secondQuery", query2);
            var results = api.Fql.Multiquery(queries);
            </code>
            </example>
            <param name="queries">A collection of the queries to perform. The array contains a set of key/value pairs. Each key is a query name, which can contain only alphanumeric characters and optional underscores. Each key maps to a value containing a traditional FQL query.</param>
            <returns>This call returns a List of query results. The keys returned are the names of the queries made.  As with fql.query, the data returned from each query very closely resembles the returns of other API calls like users.getInfo, as many API functions are simply wrappers for FQL queries.</returns>
        </member>
        <member name="M:Facebook.Rest.Fql.QueryAsync(System.String,Facebook.Rest.Fql.QueryCallback,System.Object)">
             <summary>
             Evaluates an FQL (Facebook Query Language) query.
             </summary>
             <example>
             <code>
             private static void RunDemoAsync()
             {
                 FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
                 var query = string.Format("SELECT uid, name FROM user WHERE uid IN ({0})", Constants.UserId);
                 api.Fql.QueryAsync(query, AsyncDemoCompleted, null);
             }
            
             private static void AsyncDemoCompleted(string result, Object state, FacebookException e)
             {
                 var actual = result;
             }
             </code>
             </example>
             <param name="query">The query to perform, as described in the FQL documentation.</param>
             <param name="callback">The AsyncCallback delegate</param>
             <param name="state">An object containing state information for this asynchronous request</param>        
             <returns>This method returns data that very closely resembles the returns of other API calls like users.getInfo. This is not a coincidence - in fact, many of the other API functions are simply wrappers for FQL queries. Note that it preserves the order of the fields in your SELECT clause and that it can contain multiple elements with the same name depending on how you structure the query.</returns>
        </member>
        <member name="M:Facebook.Rest.Fql.QueryAsync``1(System.String,Facebook.Rest.Fql.QueryCallback{``0},System.Object)">
            <summary>
            Evaluates an FQL (Facebook Query Language) query.  
            </summary>
            <typeparam name="T">The generic type should be an object that wraps the returned type.  Some like users_getInfo_response</typeparam>
            <param name="query">The query to perform, as described in the FQL documentation.</param>
            <param name="callback">The AsyncCallback delegate</param>
            <param name="state">An object containing state information for this asynchronous request</param>        
            <returns>This method returns data that very closely resembles the returns of other API calls like users.getInfo. This is not a coincidence - in fact, many of the other API functions are simply wrappers for FQL queries. Note that it preserves the order of the fields in your SELECT clause and that it can contain multiple elements with the same name depending on how you structure the query.</returns>
        </member>
        <member name="M:Facebook.Rest.Fql.MultiqueryAsync(System.Collections.Generic.Dictionary{System.String,System.String},Facebook.Rest.Fql.MultiqueryCallback,System.Object)">
             <summary>
             Evaluates a series of FQL (Facebook Query Language) queries in one call and returns the data at one time.
             </summary>
             <example>
             <code>
             private static void RunDemoAsync()
             {
                 FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
                 var query1 = string.Format("SELECT uid, name FROM user WHERE uid IN ({0})", Constants.UserId);
                 var query2 = string.Format("SELECT uid, name FROM user WHERE uid IN ({0})", Constants.UserId);
                 var queries = new Dictionary&lt;string, string&gt;();
                 queries.Add("firstQuery", query1);
                 queries.Add("secondQuery", query2);
                 api.Fql.MultiqueryAsync(queries, AsyncDemoCompleted, null);
             }
            
             private static void AsyncDemoCompleted(IList&lt;fql_result&gt; result, Object state, FacebookException e)
             {
                 var actual = result;
             }
             </code>
             </example>
             <param name="queries">A collection of the queries to perform. The array contains a set of key/value pairs. Each key is a query name, which can contain only alphanumeric characters and optional underscores. Each key maps to a value containing a traditional FQL query.</param>
             <param name="callback">The AsyncCallback delegate</param>
             <param name="state">An object containing state information for this asynchronous request</param>        
             <returns>This call returns a List of query results. The keys returned are the names of the queries made.  As with fql.query, the data returned from each query very closely resembles the returns of other API calls like users.getInfo, as many API functions are simply wrappers for FQL queries.</returns>
        </member>
        <member name="M:Facebook.Rest.Fql.MultiqueryAsync(Facebook.Rest.FqlMultiQueryInfo[],Facebook.Rest.Fql.MultiqueryParsedCallback,System.Object)">
             <summary>
             Evaluates a series of FQL (Facebook Query Language) queries in one call and returns the data at one time.
             </summary>
             <example>
             <code>
             private static void RunDemoAsync()
             {
                 FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
                 var query1 = string.Format("SELECT uid, name FROM user WHERE uid IN ({0})", Constants.UserId);
                 var query2 = string.Format("SELECT uid, name FROM user WHERE uid IN ({0})", Constants.UserId);
                 var queries = new Dictionary&lt;string, string&gt;();
                 queries.Add("firstQuery", query1);
                 queries.Add("secondQuery", query2);
                 api.Fql.MultiqueryAsync(queries, AsyncDemoCompleted, null);
             }
            
             private static void AsyncDemoCompleted(IList&lt;fql_result&gt; result, Object state, FacebookException e)
             {
                 var actual = result;
             }
             </code>
             </example>
             <param name="queries">A collection of the queries to perform. The array contains a set of key/value pairs. Each key is a query name, which can contain only alphanumeric characters and optional underscores. Each key maps to a value containing a traditional FQL query.</param>
             <param name="callback">The AsyncCallback delegate</param>
             <param name="state">An object containing state information for this asynchronous request</param>        
             <returns>This call returns a List of query results. The keys returned are the names of the queries made.  As with fql.query, the data returned from each query very closely resembles the returns of other API calls like users.getInfo, as many API functions are simply wrappers for FQL queries.</returns>
        </member>
        <member name="P:Facebook.Rest.Fql.UseJson">
            <summary>
            Determines what format the query results will be returned in: JSON if true; XML otherwise.
            </summary>
        </member>
        <member name="T:Facebook.Rest.Fql.QueryCallback">
            <summary>
            Delegate called when Query call completed
            </summary>
            <param name="result">result of operation</param>
            <param name="state">An object containing state information for this asynchronous request</param>
            <param name="e">Exception object, if the call resulted in exception.</param>
        </member>
        <member name="T:Facebook.Rest.Fql.QueryCallback`1">
            <summary>
            Delegate called when Query call completed
            </summary>
            <param name="result">result of operation</param>
            <param name="state">An object containing state information for this asynchronous request</param>
            <param name="e">Exception object, if the call resulted in exception.</param>
        </member>
        <member name="T:Facebook.Rest.Fql.MultiqueryCallback">
            <summary>
            Delegate called when Multiquery call completed
            </summary>
            <param name="queryResults">A list of FQL query results.</param>
            <param name="state">An object containing state information for this asynchronous request</param>
            <param name="e">Exception object, if the call resulted in exception.</param>
        </member>
        <member name="T:Facebook.Rest.Fql.MultiqueryParsedCallback">
            <summary>
            Delegate called when Multiquery call completed
            </summary>
            <param name="queryResults">A list of FQL query results.</param>
            <param name="state">An object containing state information for this asynchronous request</param>
            <param name="exceptions">Array of Exception objects, if any call resulted in exception.</param>
        </member>
        <member name="T:Facebook.Rest.FqlMultiQueryInfo">
            <summary>
            Represent a query used in Fql multi query
            </summary>
        </member>
        <member name="P:Facebook.Rest.FqlMultiQueryInfo.Key">
            <summary>
            Name of key for query
            </summary>
        </member>
        <member name="P:Facebook.Rest.FqlMultiQueryInfo.Query">
            <summary>
            Query string
            </summary>
        </member>
        <member name="P:Facebook.Rest.FqlMultiQueryInfo.Type">
            <summary>
            Type of result object
            </summary>
        </member>
        <member name="T:Facebook.Rest.MultiQueryInfoState">
            <summary>
            Class used to hold multi query info
            </summary>
        </member>
        <member name="T:Facebook.Rest.QueryOutputFormt">
            <summary>
            Enumeration for Fql o/p format
            </summary>
        </member>
        <member name="F:Facebook.Rest.QueryOutputFormt.Xml">
            <summary>
            output the fql results in xml format
            </summary>
        </member>
        <member name="F:Facebook.Rest.QueryOutputFormt.JSON">
            <summary>
            output the fql results in json format
            </summary>
        </member>
        <member name="T:Facebook.Rest.Admin">
            <summary>
            Facebook Admin API methods.
            </summary>
        </member>
        <member name="M:Facebook.Rest.Admin.#ctor(Facebook.Session.IFacebookSession)">
            <summary>
            Public constructor for Facebook.ExampleObject
            </summary>
            <param name="session">Needs a connected Facebook Session object for making requests</param>
        </member>
        <member name="M:Facebook.Rest.Admin.GetMetrics(System.DateTime,System.DateTime,Facebook.Rest.Admin.Period)">
            <summary>
            Returns specified metrics for your application, given a time period.
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
            DateTime startDate = DateTime.Now.Subtract(new TimeSpan(10, 0, 0, 0));
            DateTime endDate = DateTime.Now;
            Admin.Period period = Admin.Period.Day;
            IList&lt;metrics&gt; actual = api.Admin.GetMetrics(startDate, endDate, period);
            </code>
            </example>
            <param name="startDate">A DateTime for the start of the range (inclusive).</param>
            <param name="endDate">A DateTime time for the end of the range (inclusive). The end_time cannot be more than 30 days after the start_time.</param>
            <param name="period">The length of the period, in seconds, during which the metrics were collected. Currently, the only supported periods are 86400 (1 day), 604800 (7-days), and 2592000 (30 days).</param>
            <returns>This method returns the metrics specified for the given range and time period.</returns>
        </member>
        <member name="M:Facebook.Rest.Admin.GetMetrics(System.Collections.Generic.List{System.String},System.DateTime,System.DateTime,Facebook.Rest.Admin.Period)">
            <summary>
            Returns specified metrics for your application, given a time period.
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
            DateTime startDate = DateTime.Now.Subtract(new TimeSpan(10, 0, 0, 0));
            DateTime endDate = DateTime.Now;
            Admin.Period period = Admin.Period.Day;
            List&lt;string&gt; metrics = new List&lt;string&gt; { "active_users", "canvas_page_views" };
            IList&lt;metrics&gt; actual = api.Admin.GetMetrics(metrics, startDate, endDate, period);
            </code>
            </example>
            <param name="metrics">A List of metrics to retrieve (e.g. "active_users", "canvas_page_views")</param>
            <param name="startDate">A DateTime for the start of the range (inclusive).</param>
            <param name="endDate">A DateTime time for the end of the range (inclusive). The end_time cannot be more than 30 days after the start_time.</param>
            <param name="period">The length of the period, in seconds, during which the metrics were collected. Currently, the only supported periods are 86400 (1 day), 604800 (7-days), and 2592000 (30 days).</param>
            <returns>This method returns the metrics specified for the given range and time period.</returns>
        </member>
        <member name="M:Facebook.Rest.Admin.GetAllocation(Facebook.Rest.Admin.IntegrationPointName)">
            <summary>
            Returns the current allocation limit for your application for the specified integration point.
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
            int requests = api.Admin.GetAllocation(Admin.IntegrationPointName.requests_per_day);
            </code>
            </example>
            <param name="name">Integration point name on which the allocation limit is requested</param>
            <returns>This method returns the allocation limit for your application for the specified integration point.</returns>
        </member>
        <member name="M:Facebook.Rest.Admin.SetAppProperties(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Sets values for properties for your applications in the Facebook Developer application.
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new FBMLCanvasSession(Constants.WebApplicationKey, Constants.WebSecret));
            api.Session.UserId = Constants.UserId;
            Dictionary&lt;string, string&gt; properties = new Dictionary&lt;string, string&gt; { { "privacy_url", "http://localhost/" } };
            bool result = api.Admin.SetAppProperties(properties);
            </code>
            </example>
            <param name="properties">A Dictionary of property names to new values. This call will fail if values have the wrong type.</param>
            <returns>This method returns true if the set is successful.</returns>
        </member>
        <member name="M:Facebook.Rest.Admin.GetAppProperties">
            <summary>
            Returns values of properties for your applications from the Facebook Developer application.
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new FBMLCanvasSession(Constants.WebApplicationKey, Constants.WebSecret));
            api.Session.UserId = Constants.UserId;
            Dictionary&lt;string, string&gt; result = api.Admin.GetAppProperties();
            </code>
            </example>
            <returns>This method returns the app properties as a Dictionary collection of property name to value.</returns>
        </member>
        <member name="M:Facebook.Rest.Admin.GetAppProperties(System.Collections.Generic.List{System.String})">
            <summary>
            Returns values of properties for your applications from the Facebook Developer application.
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new FBMLCanvasSession(Constants.WebApplicationKey, Constants.WebSecret));
            api.Session.UserId = Constants.UserId;
            List&lt;string&gt; properties = new List&lt;string&gt; { "privacy_url" };
            Dictionary&lt;string, string&gt; result = api.Admin.GetAppProperties(properties);
            </code>
            </example>
            <param name="properties">A list of property names that you want to view.</param>
            <returns>This method returns the app properties as a Dictionary collection of property name to value.</returns>
        </member>
        <member name="M:Facebook.Rest.Admin.GetRestrictionInfo">
            <summary>
            Returns the demographic restrictions for the application.
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new FBMLCanvasSession(Constants.WebApplicationKey, Constants.WebSecret));
            api.Session.UserId = Constants.UserId;
            string result = api.Admin.GetRestrictionInfo();
            </code>
            </example>
            <returns>This method returns a string containing the demographic restrictions for the application.</returns>
        </member>
        <member name="M:Facebook.Rest.Admin.SetRestrictionInfo">
            <summary>
            Sets the demographic restrictions for the application.
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new FBMLCanvasSession(Constants.WebApplicationKey, Constants.WebSecret));
            api.Session.UserId = Constants.UserId;
            bool result = api.Admin.SetRestrictionInfo();
            </code>
            </example>
            <returns>This method returns true if the restrictions are successfully set.</returns>
        </member>
        <member name="M:Facebook.Rest.Admin.SetRestrictionInfo(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Sets the demographic restrictions for the application.
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new FBMLCanvasSession(Constants.WebApplicationKey, Constants.WebSecret));
            api.Session.UserId = Constants.UserId;
            Dictionary&lt;string, string&gt; restrictions = new Dictionary&lt;string, string&gt; {{"age_distribution", "10-99"}};
            bool result = api.Admin.SetRestrictionInfo(restrictions);
            </code>
            </example>
            <param name="restriction">A Dictionary of the restricting attributes. Restrictions include age, location, age_distribution, and type.</param>
            <returns>This method returns true if the restrictions are successfully set.</returns>
        </member>
        <member name="M:Facebook.Rest.Admin.BanUsers(System.Collections.Generic.List{System.Int64})">
            <summary>
            Prevents users from accessing an application's canvas page and its forums.
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new FBMLCanvasSession(Constants.WebApplicationKey, Constants.WebSecret));
            api.Session.UserId = Constants.UserId;
            List&lt;long&gt; uids = new List&lt;long&gt; { 1000001, 1000002 };
            bool result = api.Admin.BanUsers(uids);
            </code>
            </example>
            <param name="uids">A List of user IDs to ban.</param>
            <returns>This method returns true if the users were successfully banned.</returns>
        </member>
        <member name="M:Facebook.Rest.Admin.UnbanUsers(System.Collections.Generic.List{System.Int64})">
            <summary>
            Unbans users previously banned with admin.banUsers.
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new FBMLCanvasSession(Constants.WebApplicationKey, Constants.WebSecret));
            api.Session.UserId = Constants.UserId;
            List&lt;long&gt; uids = new List&lt;long&gt; { 1000001, 1000002 };
            bool result = api.Admin.UnbanUsers(uids);
            </code>
            </example>
            <param name="uids">A List of user IDs to unban.</param>
            <returns>This method returns true if the users were successfully unbanned.</returns>
        </member>
        <member name="M:Facebook.Rest.Admin.GetBannedUsers">
            <summary>
            Returns the list of users who have been banned from the application.
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new FBMLCanvasSession(Constants.WebApplicationKey, Constants.WebSecret));
            api.Session.UserId = Constants.UserId;
            IList&lt;long&gt; result = api.Admin.GetBannedUsers();
            </code>
            </example>
            <returns>An List of user IDs from banned users.</returns>
        </member>
        <member name="M:Facebook.Rest.Admin.GetBannedUsers(System.Collections.Generic.List{System.Int64})">
            <summary>
            Returns the list of users who have been banned from the application.
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new FBMLCanvasSession(Constants.WebApplicationKey, Constants.WebSecret));
            api.Session.UserId = Constants.UserId;
            List&lt;long&gt; uids = new List&lt;long&gt; { 1000001, 1000002 };
            IList&lt;long&gt; result = api.Admin.GetBannedUsers(uids);
            </code>
            </example>
            <param name="uids">A List of user IDs used to filter the result. The only user IDs that are returned in uids are those of banned users.</param>
            <returns>An array of user IDs from banned users.</returns>
        </member>
        <member name="M:Facebook.Rest.Admin.GetAllocationAsync(Facebook.Rest.Admin.IntegrationPointName,Facebook.Rest.Admin.GetAllocationCallback,System.Object)">
            <summary>
            Returns the current allocation limit for your application for the specified integration point.
            </summary>
            <example>
            <code>
            private void RunDemoAsync()
            {
                FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.ApplicationSecret, Constants.SessionKey));
                api.Admin.GetAllocationAsync(Admin.IntegrationPointName.requests_per_day, AsyncDemoCompleted, null);
            }
            
            private void AsyncDemoCompleted(int result, Object state, FacebookException e)
            {
                int actual = result;
            }
            </code>
            </example>
            <param name="name">Integration point name on which the allocation limit is requested</param>
            <param name="callback">The AsyncCallback delegate</param>
            <param name="state">An object containing state information for this asynchronous request</param>
            <returns>This method returns the allocation limit for your application for the specified integration point.</returns>
        </member>
        <member name="M:Facebook.Rest.Admin.GetAppPropertiesAsync(Facebook.Rest.Admin.GetAppPropertiesCallback,System.Object)">
            <summary>
            Returns values of properties for your applications from the Facebook Developer application.
            </summary>
            <example>
            <code>
            private static void RunWebDemoAsync()
            {
                FacebookApi api = new FacebookApi(new FBMLCanvasSession(Constants.WebApplicationKey, Constants.WebSecret));
                api.Session.UserId = Constants.UserId;
                api.Admin.GetAppPropertiesAsync(AsyncWebDemoCompleted, null);
            }
            
            private static void AsyncWebDemoCompleted(Dictionary&lt;string, string&gt; result, Object state, FacebookException e)
            {
                Dictionary&lt;string, string&gt; properties = result;
            }
            </code>
            </example>
            <param name="callback">The AsyncCallback delegate</param>
            <param name="state">An object containing state information for this asynchronous request</param>
            <returns>This method returns the app properties as a Dictionary collection of property name to value.</returns>
        </member>
        <member name="M:Facebook.Rest.Admin.GetAppPropertiesAsync(System.Collections.Generic.List{System.String},Facebook.Rest.Admin.GetAppPropertiesCallback,System.Object)">
            <summary>
            Returns values of properties for your applications from the Facebook Developer application.
            </summary>
            <example>
            <code>
            private static void RunWebDemoAsync()
            {
                FacebookApi api = new FacebookApi(new FBMLCanvasSession(Constants.WebApplicationKey, Constants.WebSecret));
                api.Session.UserId = Constants.UserId;
                List&lt;string&gt; properties = new List&lt;string&gt; { "privacy_url" };
                api.Admin.GetAppPropertiesAsync(properties, AsyncWebDemoCompleted, null);
            }
            
            private static void AsyncWebDemoCompleted(Dictionary&lt;string, string&gt; result, Object state, FacebookException e)
            {
                Dictionary&lt;string, string&gt; properties = result;
            }
            </code>
            </example>
            <param name="properties">A list of property names that you want to view.</param>
            <param name="callback">The AsyncCallback delegate</param>
            <param name="state">An object containing state information for this asynchronous request</param>
            <returns>This method returns the app properties as a Dictionary collection of property name to value.</returns>
        </member>
        <member name="M:Facebook.Rest.Admin.GetMetricsAsync(System.DateTime,System.DateTime,Facebook.Rest.Admin.Period,Facebook.Rest.Admin.GetMetricsCallback,System.Object)">
             <summary>
             Returns specified metrics for your application, given a time period.
             </summary>
             <example>
             <code>
             private void RunDemo()
             {
                 FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.ApplicationSecret, Constants.SessionKey));
                 DateTime startDate = DateTime.Now.Subtract(new TimeSpan(10, 0, 0, 0));
                 DateTime endDate = DateTime.Now;
                 Admin.Period period = Admin.Period.Day;
                 api.Admin.GetMetricsAsync(startDate, endDate, period, DemoCompleted, null);
            }
            
             private void DemoCompleted(IList&lt;metrics&gt; status, Object state, FacebookException e)
             {
                 IList&lt;metrics&gt; actual = status;
             }
             </code>
             </example>
             <param name="startDate">A DateTime for the start of the range (inclusive).</param>
             <param name="endDate">A DateTime time for the end of the range (inclusive). The end_time cannot be more than 30 days after the start_time.</param>
             <param name="period">The length of the period, in seconds, during which the metrics were collected. Currently, the only supported periods are 86400 (1 day), 604800 (7-days), and 2592000 (30 days).</param>
             <param name="callback">The AsyncCallback delegate</param>
             <param name="state">An object containing state information for this asynchronous request</param>        
             <returns>This method returns the metrics specified for the given range and time period.</returns>
        </member>
        <member name="M:Facebook.Rest.Admin.GetMetricsAsync(System.Collections.Generic.List{System.String},System.DateTime,System.DateTime,Facebook.Rest.Admin.Period,Facebook.Rest.Admin.GetMetricsCallback,System.Object)">
             <summary>
             Returns specified metrics for your application, given a time period.
             </summary>
             <example>
             <code>
             private void RunDemo()
             {
                 FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.ApplicationSecret, Constants.SessionKey));
                 DateTime startDate = DateTime.Now.Subtract(new TimeSpan(10, 0, 0, 0));
                 DateTime endDate = DateTime.Now;
                 Admin.Period period = Admin.Period.Day;
                 List&lt;string&gt; metrics = new List&lt;string&gt; { "active_users", "canvas_page_views" };
                 api.Admin.GetMetricsAsync(startDate, endDate, period, DemoCompleted, null);
            }
            
             private void DemoCompleted(IList&lt;metrics&gt; status, Object state, FacebookException e)
             {
                 IList&lt;metrics&gt; actual = status;
             }
             </code>
             </example>
             <param name="metrics">A List of metrics to retrieve (e.g. "active_users", "canvas_page_views")</param>
             <param name="startDate">A DateTime for the start of the range (inclusive).</param>
             <param name="endDate">A DateTime time for the end of the range (inclusive). The end_time cannot be more than 30 days after the start_time.</param>
             <param name="period">The length of the period, in seconds, during which the metrics were collected. Currently, the only supported periods are 86400 (1 day), 604800 (7-days), and 2592000 (30 days).</param>
             <param name="callback">The AsyncCallback delegate</param>
             <param name="state">An object containing state information for this asynchronous request</param>        
             <returns>This method returns the metrics specified for the given range and time period.</returns>
        </member>
        <member name="M:Facebook.Rest.Admin.SetAppPropertiesAsync(System.Collections.Generic.Dictionary{System.String,System.String},Facebook.Rest.Admin.SetAppPropertiesCallback,System.Object)">
            <summary>
            Sets values for properties for your applications in the Facebook Developer application.
            </summary>
            <example>
            <code>
            private static void RunWebDemoAsync()
            {
                FacebookApi api = new FacebookApi(new FBMLCanvasSession(Constants.WebApplicationKey, Constants.WebSecret));
                api.Session.UserId = Constants.UserId;
                Dictionary&lt;string, string&gt; properties = new Dictionary&lt;string, string&gt; { { "privacy_url", "http://localhost/" } };
                api.Admin.SetAppPropertiesAsync(properties, AsyncWebDemoCompleted, null);
            }
            
            private static void AsyncWebDemoCompleted(bool result, Object state, FacebookException e)
            {
                bool actual = result;
            }
            </code>
            </example>
            <param name="properties">A Dictionary of property names to new values. This call will fail if values have the wrong type.</param>
            <param name="callback">The AsyncCallback delegate</param>
            <param name="state">An object containing state information for this asynchronous request</param>        
            <returns>This method returns true if the set is successful.</returns>
        </member>
        <member name="M:Facebook.Rest.Admin.GetRestrictionInfoAsync(Facebook.Rest.Admin.GetRestrictionInfoCallback,System.Object)">
            <summary>
            Returns the demographic restrictions for the application.
            </summary>
            <example>
            <code>
            private static void RunDemoAsync()
            {
                FacebookApi api = new FacebookApi(new FBMLCanvasSession(Constants.WebApplicationKey, Constants.WebSecret));
                api.Session.UserId = Constants.UserId;
                api.Admin.GetRestrictionInfoAsync(AsyncDemoCompleted, null);
            }
            
            private static void AsyncDemoCompleted(string result, Object state, FacebookException e)
            {
                string actual = result;
            }
            </code>
            </example>
            <param name="callback">The AsyncCallback delegate</param>
            <param name="state">An object containing state information for this asynchronous request</param>        
            <returns>This method returns a string containing the demographic restrictions for the application.</returns>
        </member>
        <member name="M:Facebook.Rest.Admin.SetRestrictionInfoAsync(Facebook.Rest.Admin.SetRestrictionInfoCallback,System.Object)">
            <summary>
            Sets the demographic restrictions for the application.
            </summary>
            <example>
            <code>
            private static void RunDemoAsync()
            {
                FacebookApi api = new FacebookApi(new FBMLCanvasSession(Constants.WebApplicationKey, Constants.WebSecret));
                api.Session.UserId = Constants.UserId;
                api.Admin.SetRestrictionInfoAsync(AsyncDemoCompleted, null);
            }
            
            private static void AsyncDemoCompleted(bool result, Object state, FacebookException e)
            {
                bool actual = result;
            }
            </code>
            </example>
            <param name="callback">The AsyncCallback delegate</param>
            <param name="state">An object containing state information for this asynchronous request</param>        
            <returns>This method returns true if the restrictions are successfully set.</returns>
        </member>
        <member name="M:Facebook.Rest.Admin.SetRestrictionInfoAsync(System.Collections.Generic.Dictionary{System.String,System.String},Facebook.Rest.Admin.SetRestrictionInfoCallback,System.Object)">
            <summary>
            Sets the demographic restrictions for the application.
            </summary>
            <example>
            <code>
            private static void RunDemoAsync()
            {
                FacebookApi api = new FacebookApi(new FBMLCanvasSession(Constants.WebApplicationKey, Constants.WebSecret));
                api.Session.UserId = Constants.UserId;
                Dictionary&lt;string, string&gt; restrictions = new Dictionary&lt;string, string&gt; { { "age_distribution", "10-99" } };
                api.Admin.SetRestrictionInfoAsync(restrictions, AsyncDemoCompleted, null);
            }
            
            private static void AsyncDemoCompleted(bool result, Object state, FacebookException e)
            {
                bool actual = result;
            }
            </code>
            </example>
            <param name="restriction">A Dictionary of the restricting attributes. Restrictions include age, location, age_distribution, and type.</param>
            <param name="callback">The AsyncCallback delegate</param>
            <param name="state">An object containing state information for this asynchronous request</param>        
            <returns>This method returns true if the restrictions are successfully set.</returns>
        </member>
        <member name="M:Facebook.Rest.Admin.BanUsersAsync(System.Collections.Generic.List{System.Int64},Facebook.Rest.Admin.BanUsersCallback,System.Object)">
            <summary>
            Prevents users from accessing an application's canvas page and its forums.
            </summary>
            <example>
            <code>
            private static void RunDemoAsync()
            {
                FacebookApi api = new FacebookApi(new FBMLCanvasSession(Constants.WebApplicationKey, Constants.WebSecret));
                api.Session.UserId = Constants.UserId;
                List&lt;long&gt; uids = new List&lt;long&gt; { 1000001, 1000002 };
                api.Admin.BanUsersAsync(uids, AsyncDemoCompleted, null);
            }
            
            private static void AsyncDemoCompleted(string result, Object state, FacebookException e)
            {
                var actual = result;
            }
            </code>
            </example>
            <param name="uids">A List of user IDs to ban.</param>
            <param name="callback">The AsyncCallback delegate</param>
            <param name="state">An object containing state information for this asynchronous request</param>        
            <returns>This method returns true if the users were successfully banned.</returns>
        </member>
        <member name="M:Facebook.Rest.Admin.UnbanUsersAsync(System.Collections.Generic.List{System.Int64},Facebook.Rest.Admin.UnBanUsersCallback,System.Object)">
             <summary>
             Unbans users previously banned with admin.banUsers.
             </summary>
             <example>
             <code>
             private static void RunDemoAsync()
             {
                FacebookApi api = new FacebookApi(new FBMLCanvasSession(Constants.WebApplicationKey, Constants.WebSecret));
                api.Session.UserId = Constants.UserId;
                List&lt;long&gt; uids = new List&lt;long&gt; { 1000001, 1000002 };
                api.Admin.UnbanUsersAsync(uids, AsyncDemoCompleted, null);
             }
            
             private static void AsyncDemoCompleted(bool result, Object state, FacebookException e)
             {
                var actual = result;
            }
             </code>
             </example>
             <param name="uids">A List of user IDs to unban.</param>
             <param name="callback">The AsyncCallback delegate</param>
             <param name="state">An object containing state information for this asynchronous request</param>        
             <returns>This method returns true if the users were successfully unbanned.</returns>
        </member>
        <member name="M:Facebook.Rest.Admin.GetBannedUsersAsync(Facebook.Rest.Admin.GetBannedUsersCallback,System.Object)">
            <summary>
            Returns the list of users who have been banned from the application.
            </summary>
            <example>
            <code>
            private static void RunDemoAsync()
            {
                FacebookApi api = new FacebookApi(new FBMLCanvasSession(Constants.WebApplicationKey, Constants.WebSecret));
                api.Session.UserId = Constants.UserId;
                api.Admin.GetBannedUsersAsync(AsyncDemoCompleted, null);
            }
            
            private static void AsyncDemoCompleted(IList&lt;long&gt; result, Object state, FacebookException e)
            {
                var actual = result;
            }
            </code>
            </example>
            <param name="callback">The AsyncCallback delegate</param>
            <param name="state">An object containing state information for this asynchronous request</param>        
            <returns>An List of user IDs from banned users.</returns>
        </member>
        <member name="M:Facebook.Rest.Admin.GetBannedUsersAsync(System.Collections.Generic.List{System.Int64},Facebook.Rest.Admin.GetBannedUsersCallback,System.Object)">
            <summary>
            Returns the list of users who have been banned from the application.
            </summary>
            <example>
            <code>
            /// private static void RunDemoAsync()
            {
                FacebookApi api = new FacebookApi(new FBMLCanvasSession(Constants.WebApplicationKey, Constants.WebSecret));
                api.Session.UserId = Constants.UserId;
                List&lt;long&gt; uids = new List&lt;long&gt; { 1000001, 1000002 };
                api.Admin.GetBannedUsersAsync(uids, AsyncDemoCompleted, null);
            }
            
            private static void AsyncDemoCompleted(IList&lt;long&gt; result, Object state, FacebookException e)
            {
                var actual = result;
            }
            </code>
            </example>
            <param name="uids">A List of user IDs used to filter the result. The only user IDs that are returned in uids are those of banned users.</param>
            <param name="callback">The AsyncCallback delegate</param>
            <param name="state">An object containing state information for this asynchronous request</param>        
            <returns>An List of user IDs from banned users.</returns>
        </member>
        <member name="M:Facebook.Rest.Admin.GetApplicationPropertyNames">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Facebook.Rest.Admin.GetMetricNames(Facebook.Rest.Admin.Period)">
            <summary>
            </summary>
            <param name="period"></param>
            <returns></returns>
        </member>
        <member name="M:Facebook.Rest.Admin.GetDailyMetricNames">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="T:Facebook.Rest.Admin.Period">
            <summary>
            The type of period over which metrics are collected.
            </summary>
        </member>
        <member name="F:Facebook.Rest.Admin.Period.Day">
            <summary>
            </summary>
        </member>
        <member name="F:Facebook.Rest.Admin.Period.Week">
            <summary>
            </summary>
        </member>
        <member name="F:Facebook.Rest.Admin.Period.Month">
            <summary>
            </summary>
        </member>
        <member name="T:Facebook.Rest.Admin.IntegrationPointName">
            <summary>
            </summary>
        </member>
        <member name="F:Facebook.Rest.Admin.IntegrationPointName.notifications_per_day">
            <summary>
            </summary>
        </member>
        <member name="F:Facebook.Rest.Admin.IntegrationPointName.requests_per_day">
            <summary>
            </summary>
        </member>
        <member name="F:Facebook.Rest.Admin.IntegrationPointName.emails_per_day">
            <summary>
            </summary>
        </member>
        <member name="F:Facebook.Rest.Admin.IntegrationPointName.email_disable_message_location">
            <summary>
            </summary>
        </member>
        <member name="T:Facebook.Rest.Admin.GetAllocationCallback">
            <summary>
            Delegate called when GetAllocation call is completed.
            </summary>
            <param name="allocation">current allocation limit</param>
            <param name="state">An object containing state information for this asynchronous request</param>
            <param name="e">Exception object, if the call resulted in exception.</param>
        </member>
        <member name="T:Facebook.Rest.Admin.GetAppPropertiesCallback">
            <summary>
            Delegate called when GetAppProperties call completed
            </summary>
            <param name="result">result of operation</param>
            <param name="state">An object containing state information for this asynchronous request</param>
            <param name="e">Exception object, if the call resulted in exception.</param>
        </member>
        <member name="T:Facebook.Rest.Admin.GetMetricsCallback">
            <summary>
            Delegate called when GetMetrics call completed
            </summary>
            <param name="metrics">metrics information</param>
            <param name="state">An object containing state information for this asynchronous request</param>
            <param name="e">Exception object, if the call resulted in exception.</param>
        </member>
        <member name="T:Facebook.Rest.Admin.SetAppPropertiesCallback">
            <summary>
            Delegate called when SetAppProperties call completed
            </summary>
            <param name="result">result of operation</param>
            <param name="state">An object containing state information for this asynchronous request</param>
            <param name="e">Exception object, if the call resulted in exception.</param>
        </member>
        <member name="T:Facebook.Rest.Admin.GetRestrictionInfoCallback">
            <summary>
            Delegate called when GetRestrictionInfo call completed
            </summary>
            <param name="result">result of operation</param>
            <param name="state">An object containing state information for this asynchronous request</param>
            <param name="e">Exception object, if the call resulted in exception.</param>
        </member>
        <member name="T:Facebook.Rest.Admin.SetRestrictionInfoCallback">
            <summary>
            Delegate called when SetRestrictionInfo call completed
            </summary>
            <param name="result">result of operation</param>
            <param name="state">An object containing state information for this asynchronous request</param>
            <param name="e">Exception object, if the call resulted in exception.</param>
        </member>
        <member name="T:Facebook.Rest.Admin.BanUsersCallback">
            <summary>
            Delegate called when BanUsers call completed
            </summary>
            <param name="result">result of operation</param>
            <param name="state">An object containing state information for this asynchronous request</param>
            <param name="e">Exception object, if the call resulted in exception.</param>
        </member>
        <member name="T:Facebook.Rest.Admin.UnBanUsersCallback">
            <summary>
            Delegate called when UnBanUsers call completed
            </summary>
            <param name="result">result of operation</param>
            <param name="state">An object containing state information for this asynchronous request</param>
            <param name="e">Exception object, if the call resulted in exception.</param>
        </member>
        <member name="T:Facebook.Rest.Admin.GetBannedUsersCallback">
            <summary>
            Delegate called when AreFriends call completed
            </summary>
            <param name="users">List of users objects</param>
            <param name="state">An object containing state information for this asynchronous request</param>
            <param name="e">Exception object, if the call resulted in exception.</param>
        </member>
        <member name="M:Facebook.Utility.WebClientHelper.SendRequest(System.Uri,System.Byte[],System.String)">
            <summary>
            
            </summary>
            <param name="uri"></param>
            <param name="postData"></param>
            <param name="contentType"></param>
        </member>
        <member name="M:Facebook.Utility.WebClientHelper.BeginRequest(System.IAsyncResult)">
            <summary>
            Writes post data to stream and begin to retrieve response from server
            </summary>
            <param name="ar"></param>
        </member>
        <member name="M:Facebook.Utility.WebClientHelper.BeginResponse(System.IAsyncResult)">
            <summary>
            Parses response from server and signals the async operation
            </summary>
            <param name="ar"></param>
        </member>
        <member name="T:Facebook.Rest.Profile">
            <summary>
            Facebook Profile API methods.
            </summary>
        </member>
        <member name="M:Facebook.Rest.Profile.#ctor(Facebook.Session.IFacebookSession)">
            <summary>
            Public constructor for facebook.Profile
            </summary>
            <param name="session">Needs a connected Facebook Session object for making requests</param>
        </member>
        <member name="M:Facebook.Rest.Profile.GetFBML(System.Int64,System.Int32)">
            <summary>
            Gets the FBML that is currently set for a user's profile.
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new FBMLCanvasSession(Constants.WebApplicationKey, Constants.WebSecret));
            api.Session.UserId = Constants.UserId;
            var result = api.Profile.GetFBML(Constants.UserId, 1);
            </code>
            </example>
            <param name="uid">The user whose profile FBML is to be fetched, or the page ID in case of a Page. This parameter applies only to Web applications and is required by them only if the session_key is not specified. Facebook ignores this parameter if it is passed by a desktop application. </param>
            <param name="type">The type of profile box to retrieve. Specify 1 for the original style (wide and narrow column boxes), 2 for profile_main box. (default value is 1)</param>
            <returns>The FBML markup from the user's profile.</returns>
            <remarks>It is not a violation of Facebook Privacy policy if you use this method to retrieve content originally rendered by your application from a user's profile, even if Facebook privacy restrictions would otherwise keep you from seeing that user’s profile (for example, you are not friends with the user in question). Cases where this would arise include verifying content posted by one user of your application to another user’s profile complies with the Facebook Developer Terms of Service. </remarks>
        </member>
        <member name="M:Facebook.Rest.Profile.SetFBML(System.Int64,System.String,System.String,System.String)">
            <summary>
            Sets the FBML for a user's profile, including the content for both the profile box and the profile actions.
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
            api.Session.UserId = Constants.UserId;
            string fbml = string.Format("&lt;fb:name uid=\"{0}\"&gt; is testing setFBML.&lt;/fb:name&gt;", Constants.UserId);
            var result = api.Profile.SetFBML(Constants.UserId, fbml, fbml, fbml);
            </code>
            </example>
            <param name="uid">The user whose profile is to be updated. Not allowed for desktop applications (since the application secret is essentially public).</param>
            <param name="profile">The FBML intended for the application profile box on the user's profile. </param>
            <param name="profile_main">The FBML intended for the narrow profile box on the Wall tab of the user's profile.</param>
            <param name="mobile_profile">The FBML intended for mobile devices. </param>
            <returns>This method returns true if FBML was set for a profile.</returns>
            <remarks>The FBML is cached on Facebook's server for that particular user and that particular application. To change it, profile.setFBML must be called through a canvas page or some other script (such as a cron job) that makes use of the Facebook API. </remarks>
        </member>
        <member name="M:Facebook.Rest.Profile.GetInfo(System.Int64)">
            <summary>
            Returns the specified user's application info section for the calling application.
            </summary>
            <example>
            <code>
            Api api = new FacebookApi(new FBMLCanvasSession(Constants.WebApplicationKey, Constants.WebSecret));
            api.Session.UserId = Constants.UserId;
            var result = api.Profile.GetInfo(Constants.UserId);
            </code>
            </example>
            <param name="uid">The user ID of the user who added the application info section.</param>
            <returns>This method returns a user_info object for the specified uid.</returns>
        </member>
        <member name="M:Facebook.Rest.Profile.GetInfoOptions(System.String)">
            <summary>
            Returns the options associated with the specified field for an application info section.
            </summary>
            <example>
            <code>
            Api api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
            api.Session.UserId = Constants.UserId;
            var result = api.Profile.GetInfoOptions("Test Field");
            </code>
            </example>
            <param name="field">The title of the field.</param>
            <returns>This method returns a List of info_item objects (typeahead options) for the specified field.</returns>
        </member>
        <member name="M:Facebook.Rest.Profile.SetInfo(System.String,System.Int32,System.Collections.Generic.List{Facebook.Schema.info_field},System.Int64)">
            <summary>
            Configures an application info section that the specified user can install on the Info tab of her profile.
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
            api.Session.UserId = Constants.UserId;
            var item = new info_item();
            item.label = "Test info item";
            item.link = "www.claritycon.com";
            var field = new info_field();
            field.items = new info_fieldItems();
            field.items.info_item.Add(item);
            field.field = "Test field";
            var result = api.Profile.SetInfo("Test Field", 5, new List&lt;info_field&gt;() { field }, Constants.UserId);
            </code>
            </example>
            <param name="title">The title or header of the application info section. </param>
            <param name="type">Specify 1 for a text-only field-item configuration or 5 for a thumbnail configuration.</param>
            <param name="info_fields">A List of elements comprising an application info section, including the field (the title of the field) and an array of info_item objects (each object has a label and a link, and optionally contains image, description, and sublabel fields).</param>
            <param name="uid">The user ID of the user adding the application info section. </param>
            <returns>This method returns true if the application info section was successfully set.</returns>
        </member>
        <member name="M:Facebook.Rest.Profile.SetInfoOptions(System.String,System.Collections.Generic.List{Facebook.Schema.info_item})">
            <summary>
            Specifies the objects for a field for an application info section.
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
            api.Session.UserId = Constants.UserId;
            var item1 = new info_item {link = "www.claritycon.com", label = "SetInfoOptions test 1"};
            var result = api.Profile.SetInfoOptions("Test Field", new List&lt;info_item&gt;() { item1 });
            </code>
            </example>
            <param name="field">The title of the field.</param>
            <param name="options">A List of items for a thumbnail, including a label and a link, and optionally contains image, description, and sublabel items.</param>
            <returns>This method returns true if the available items for a filed in an application info section was successfully set.</returns>
        </member>
        <member name="M:Facebook.Rest.Profile.GetFBMLAsync(System.Int64,System.Int32,Facebook.Rest.Profile.GetFBMLCallback,System.Object)">
             <summary>
             Gets the FBML that is currently set for a user's profile.
             </summary>
             <example>
             <code>
             private static void RunDemoAsync()
             {
                 FacebookApi api = new FacebookApi(new FBMLCanvasSession(Constants.WebApplicationKey, Constants.WebSecret));
                 api.Session.UserId = Constants.UserId;
                 api.Profile.GetFBMLAsync(Constants.UserId, 1, AsyncDemoCompleted, null);
             }
            
             private static void AsyncDemoCompleted(string result, Object state, FacebookException e)
             {
                 var actual = result;
             }
             </code>
             </example>
             <param name="uid">The user whose profile FBML is to be fetched, or the page ID in case of a Page. This parameter applies only to Web applications and is required by them only if the session_key is not specified. Facebook ignores this parameter if it is passed by a desktop application. </param>
             <param name="type">The type of profile box to retrieve. Specify 1 for the original style (wide and narrow column boxes), 2 for profile_main box. (default value is 1)</param>
             <param name="callback">The AsyncCallback delegate</param>
             <param name="state">An object containing state information for this asynchronous request</param>        
             <returns>The FBML markup from the user's profile.</returns>
             <remarks>It is not a violation of Facebook Privacy policy if you use this method to retrieve content originally rendered by your application from a user's profile, even if Facebook privacy restrictions would otherwise keep you from seeing that user’s profile (for example, you are not friends with the user in question). Cases where this would arise include verifying content posted by one user of your application to another user’s profile complies with the Facebook Developer Terms of Service. </remarks>
        </member>
        <member name="M:Facebook.Rest.Profile.SetFBMLAsync(System.Int64,System.String,System.String,System.String,Facebook.Rest.Profile.SetFBMLCallback,System.Object)">
             <summary>
             Sets the FBML for a user's profile, including the content for both the profile box and the profile actions.
             </summary>
             <example>
             <code>
             private static void RunDemoAsync()
             {
                 FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.ApplicationSecret, Constants.SessionKey));
                 api.Session.UserId = Constants.UserId;
                 string fbml = string.Format("&lt;fb:name uid=\"{0}\"&gt; is testing setFBML.&lt;/fb:name&gt;", Constants.UserId);
                 api.Profile.SetFBMLAsync(Constants.UserId, fbml, fbml, fbml, AsyncDemoCompleted, null);
             }
            
             private static void AsyncDemoCompleted(bool result, Object state, FacebookException e)
             {
                 var actual = result;
             }
             </code>
             </example>
             <param name="uid">The user whose profile is to be updated. Not allowed for desktop applications (since the application secret is essentially public).</param>
             <param name="profile">The FBML intended for the application profile box on the user's profile. </param>
             <param name="profile_main">The FBML intended for the narrow profile box on the Wall tab of the user's profile.</param>
             <param name="mobile_profile">The FBML intended for mobile devices. </param>
             <param name="callback">The AsyncCallback delegate</param>
             <param name="state">An object containing state information for this asynchronous request</param>        
             <returns>This method returns true if FBML was set for a profile.</returns>
             <remarks>The FBML is cached on Facebook's server for that particular user and that particular application. To change it, profile.setFBML must be called through a canvas page or some other script (such as a cron job) that makes use of the Facebook API. </remarks>
        </member>
        <member name="M:Facebook.Rest.Profile.GetInfoAsync(System.Int64,Facebook.Rest.Profile.GetInfoCallback,System.Object)">
             <summary>
             Returns the specified user's application info section for the calling application.
             </summary>
             <example>
             <code>
             private static void RunDemoAsync()
             {
                 FacebookApi api = new FacebookApi(new FBMLCanvasSession(Constants.WebApplicationKey, Constants.WebSecret));
                 api.Session.UserId = Constants.UserId;
                 api.Profile.GetInfoAsync(Constants.UserId, AsyncDemoCompleted, null);
             }
            
             private static void AsyncDemoCompleted(user_info result, Object state, FacebookException e)
             {
                 var actual = result;
             }
             </code>
             </example>
             <param name="uid">The user ID of the user who added the application info section.</param>
             <param name="callback">The AsyncCallback delegate</param>
             <param name="state">An object containing state information for this asynchronous request</param>        
             <returns>This method returns a user_info object for the specified uid.</returns>
        </member>
        <member name="M:Facebook.Rest.Profile.GetInfoOptionsAsync(System.String,Facebook.Rest.Profile.GetInfoOptionsCallback,System.Object)">
             <summary>
             Returns the options associated with the specified field for an application info section.
             </summary>
             <example>
             <code>
             private static void RunDemoAsync()
             {
                 FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.ApplicationSecret, Constants.SessionKey));
                 api.Session.UserId = Constants.UserId;
                 api.Profile.GetInfoOptionsAsync("Test Field", AsyncDemoCompleted, null);
             }
            
             private static void AsyncDemoCompleted(IList&lt;info_item&gt; result, Object state, FacebookException e)
             {
                 var actual = result;
             }
             </code>
             </example>
             <param name="field">The title of the field.</param>
             <param name="callback">The AsyncCallback delegate</param>
             <param name="state">An object containing state information for this asynchronous request</param>        
             <returns>This method returns a List of info_item objects (typeahead options) for the specified field.</returns>
        </member>
        <member name="M:Facebook.Rest.Profile.SetInfoAsync(System.String,System.Int32,System.Collections.Generic.List{Facebook.Schema.info_field},System.Int64,Facebook.Rest.Profile.SetInfoCallback,System.Object)">
             <summary>
             Configures an application info section that the specified user can install on the Info tab of her profile.
             </summary>
             <example>
             <code>
             private static void RunDemoAsync()
             {
                 FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.ApplicationSecret, Constants.SessionKey));
                 api.Session.UserId = Constants.UserId;
                 var item = new info_item();
                 item.label = "Test info item";
                 item.link = "www.claritycon.com";
                 var field = new info_field();
                 field.items = new info_fieldItems();
                 field.items.info_item.Add(item);
                 field.field = "Test field";
                 api.Profile.SetInfoAsync("Test Field", 5, new List&lt;info_field&gt;() { field }, Constants.UserId, AsyncDemoCompleted, null);
             }
            
             private static void AsyncDemoCompleted(bool result, Object state, FacebookException e)
             {
                 var actual = result;
             }
             </code>
             </example>
             <param name="title">The title or header of the application info section. </param>
             <param name="type">Specify 1 for a text-only field-item configuration or 5 for a thumbnail configuration.</param>
             <param name="info_fields">A List of elements comprising an application info section, including the field (the title of the field) and an array of info_item objects (each object has a label and a link, and optionally contains image, description, and sublabel fields).</param>
             <param name="uid">The user ID of the user adding the application info section. </param>
             <param name="callback">The AsyncCallback delegate</param>
             <param name="state">An object containing state information for this asynchronous request</param>        
             <returns>This method returns true if the application info section was successfully set.</returns>
        </member>
        <member name="M:Facebook.Rest.Profile.SetInfoOptionsAsync(System.String,System.Collections.Generic.List{Facebook.Schema.info_item},Facebook.Rest.Profile.SetInfoCallback,System.Object)">
             <summary>
             Specifies the objects for a field for an application info section.
             </summary>
             <example>
             <code>
             private static void RunDemoAsync()
             {
                 FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.ApplicationSecret, Constants.SessionKey));
                 api.Session.UserId = Constants.UserId;
                 var item1 = new info_item { link = "www.claritycon.com", label = "SetInfoOptions test 1" };
                 api.Profile.SetInfoOptionsAsync("Test Field", new List&lt;info_item&gt;() { item1 }, AsyncDemoCompleted, null);
             }
            
             private static void AsyncDemoCompleted(bool result, Object state, FacebookException e)
             {
                 var actual = result;
             }
             </code>
             </example>
             <param name="field">The title of the field.</param>
             <param name="options">A List of items for a thumbnail, including a label and a link, and optionally contains image, description, and sublabel items.</param>
             <param name="callback">The AsyncCallback delegate</param>
             <param name="state">An object containing state information for this asynchronous request</param>        
             <returns>This method returns true if the available items for a filed in an application info section was successfully set.</returns>
        </member>
        <member name="T:Facebook.Rest.Profile.GetFBMLCallback">
            <summary>
            Delegate called when GetFbml call completed
            </summary>
            <param name="result">result of operation</param>
            <param name="state">An object containing state information for this asynchronous request</param>
            <param name="e">Exception object, if the call resulted in exception.</param>
        </member>
        <member name="T:Facebook.Rest.Profile.SetFBMLCallback">
            <summary>
            Delegate called when SetFbml call completed
            </summary>
            <param name="result">result of operation</param>
            <param name="state">An object containing state information for this asynchronous request</param>
            <param name="e">Exception object, if the call resulted in exception.</param>
        </member>
        <member name="T:Facebook.Rest.Profile.GetInfoCallback">
            <summary>
            Delegate called when GetProfileInfo call completed
            </summary>
            <param name="profileInfo">list of profile info</param>
            <param name="state">An object containing state information for this asynchronous request</param>
            <param name="e">Exception object, if the call resulted in exception.</param>
        </member>
        <member name="T:Facebook.Rest.Profile.GetInfoOptionsCallback">
            <summary>
            Delegate called when GetProfileInfoOptions call completed
            </summary>
            <param name="result">result of operation</param>
            <param name="state">An object containing state information for this asynchronous request</param>
            <param name="e">Exception object, if the call resulted in exception.</param>
        </member>
        <member name="T:Facebook.Rest.Profile.SetInfoCallback">
            <summary>
            Delegate called when SetProfileInfo call completed
            </summary>
            <param name="result">result of operation</param>
            <param name="state">An object containing state information for this asynchronous request</param>
            <param name="e">Exception object, if the call resulted in exception.</param>
        </member>
        <member name="T:Facebook.Rest.Pages">
            <summary>
            Facebook Pages API methods.
            </summary>
        </member>
        <member name="M:Facebook.Rest.Pages.#ctor(Facebook.Session.IFacebookSession)">
            <summary>
            Public constructor for facebook.Pages
            </summary>
            <param name="session">Needs a connected Facebook Session object for making requests</param>
        </member>
        <member name="M:Facebook.Rest.Pages.GetInfo(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Returns all visible pages to the filters specified.
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
            List&lt;string&gt; fields = api.Pages.GetFields();
            List&lt;long&gt; pageIds = new List&lt;long&gt; { Constants.PageId };
            var result = api.Pages.GetInfo(fields, pageIds, Constants.UserId);
            </code>
            </example>
            <param name="fields">List of desired fields in return.</param>
            <param name="page_ids">List of page IDs.</param>
            <param name="uid">The ID of the user. Defaults to the logged in user if the session_key is valid, and no page_ids are passed. Used to get the pages a given user is a fan of.</param>
            <returns>The page info elements returned are those visible to the Facebook Platform.</returns>
        </member>
        <member name="M:Facebook.Rest.Pages.IsAppAdded(System.Int64)">
            <summary>
            Checks whether the Page has added the application.
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
            var result = api.Pages.IsAppAdded(Constants.PageId);
            </code>
            </example>
            <param name="page_id">The ID of the Facebook Page.</param>
            <returns>Returns true or false.</returns>
        </member>
        <member name="M:Facebook.Rest.Pages.IsAdmin(System.Int64)">
            <summary>
            Checks whether the logged-in user is the admin for a given Page.
            </summary>
            <example>
            <code>
            FacebookApi api = new Api(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
            var result = api.Pages.IsAdmin(Constants.PageId);
            </code>
            </example>
            <param name="page_id">The ID of the Facebook Page.</param>
            <returns>Returns true or false.</returns>
        </member>
        <member name="M:Facebook.Rest.Pages.IsFan(System.Int64)">
            <summary>
            Checks whether a user is a fan of a given Page.
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
            var result = api.Pages.IsFan(Constants.PageId);
            </code>
            </example>
            <param name="page_id">The ID of the page.</param>
            <returns>Returns true or false.</returns>
        </member>
        <member name="M:Facebook.Rest.Pages.IsFan(System.Int64,System.Int64)">
            <summary>
            Checks whether a user is a fan of a given Page.
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
            var result = api.Pages.IsFan(Constants.PageId, Constants.UserId);
            </code>
            </example>
            <param name="page_id">The ID of the page.</param>
            <param name="uid">The ID of the user. Defaults to the logged-in user if not set.</param>
            <returns>Returns true or false.</returns>
        </member>
        <member name="M:Facebook.Rest.Pages.GetInfoAsync(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.Int64},System.Nullable{System.Int64},Facebook.Rest.Pages.GetInfoCallback,System.Object)">
             <summary>
             Returns all visible pages to the filters specified.
             </summary>
             <example>
             <code>
             private static void RunDemoAsync()
             {
                 FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.ApplicationSecret, Constants.SessionKey));
                 List&lt;string&gt; fields = api.Pages.GetFields();
                 List&lt;long&gt; pageIds = new List&lt;long&gt; { Constants.PageId };
                 api.Pages.GetInfoAsync(fields, pageIds, Constants.UserId, AsyncDemoCompleted, null);
             }
            
             private static void AsyncDemoCompleted(IList&lt;page&gt; result, Object state, FacebookException e)
             {
                 var actual = result;
             }
             </code>
             </example>
             <param name="fields">List of desired fields in return.</param>
             <param name="page_ids">List of page IDs.</param>
             <param name="uid">The ID of the user. Defaults to the logged in user if the session_key is valid, and no page_ids are passed. Used to get the pages a given user is a fan of.</param>
             <param name="callback">The AsyncCallback delegate</param>
             <param name="state">An object containing state information for this asynchronous request</param>        
             <returns>The page info elements returned are those visible to the Facebook Platform.</returns>
        </member>
        <member name="M:Facebook.Rest.Pages.IsAdminAsync(System.Int64,Facebook.Rest.Pages.IsAdminCallback,System.Object)">
             <summary>
             Checks whether the logged-in user is the admin for a given Page.
             </summary>
             <example>
             <code>
             private static void RunDemoAsync()
             {
                 FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.ApplicationSecret, Constants.SessionKey));
                 api.Pages.IsAdminAsync(Constants.PageId, AsyncDemoCompleted, null);
             }
            
             private static void AsyncDemoCompleted(bool result, Object state, FacebookException e)
             {
                 var actual = result;
             }
             </code>
             </example>
             <param name="page_id">The ID of the Facebook Page.</param>
             <param name="callback">The AsyncCallback delegate</param>
             <param name="state">An object containing state information for this asynchronous request</param>        
             <returns>Returns true or false.</returns>
        </member>
        <member name="M:Facebook.Rest.Pages.IsAppAddedAsync(System.Int64,Facebook.Rest.Pages.IsAppAddedCallback,System.Object)">
             <summary>
             Checks whether the Page has added the application.
             </summary>
             <example>
             <code>
             private static void RunDemoAsync()
             {
                 FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.ApplicationSecret, Constants.SessionKey));
                 api.Pages.IsAppAddedAsync(Constants.PageId, AsyncDemoCompleted, null);
             }
            
             private static void AsyncDemoCompleted(bool result, Object state, FacebookException e)
             {
                 var actual = result;
             }
             </code>
             </example>
             <param name="page_id">The ID of the Facebook Page.</param>
             <param name="callback">The AsyncCallback delegate</param>
             <param name="state">An object containing state information for this asynchronous request</param>        
             <returns>Returns true or false.</returns>
        </member>
        <member name="M:Facebook.Rest.Pages.IsFanAsync(System.Int64,Facebook.Rest.Pages.IsFanCallback,System.Object)">
             <summary>
             Checks whether a user is a fan of a given Page.
             </summary>
             <example>
             <code>
             private static void RunDemoAsync()
             {
                 FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.ApplicationSecret, Constants.SessionKey));
                 api.Pages.IsFanAsync(Constants.PageId, AsyncDemoCompleted, null);
             }
            
             private static void AsyncDemoCompleted(bool result, Object state, FacebookException e)
             {
                 var actual = result;
             }
             </code>
             </example>
             <param name="page_id">The ID of the page.</param>
             <param name="callback">The AsyncCallback delegate</param>
             <param name="state">An object containing state information for this asynchronous request</param>        
             <returns>Returns true or false.</returns>
        </member>
        <member name="M:Facebook.Rest.Pages.IsFanAsync(System.Int64,System.Int64,Facebook.Rest.Pages.IsFanCallback,System.Object)">
             <summary>
             Checks whether a user is a fan of a given Page.
             </summary>
             <example>
             <code>
             private static void RunDemoAsync()
             {
                 FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.ApplicationSecret, Constants.SessionKey));
                 api.Pages.IsFanAsync(Constants.PageId, Constants.UserId, AsyncDemoCompleted, null);
             }
            
             private static void AsyncDemoCompleted(bool result, Object state, FacebookException e)
             {
                 var actual = result;
             }
             </code>
             </example>
             <param name="page_id">The ID of the page.</param>
             <param name="uid">The ID of the user. Defaults to the logged-in user if not set.</param>
             <param name="callback">The AsyncCallback delegate</param>
             <param name="state">An object containing state information for this asynchronous request</param>        
             <returns>Returns true or false.</returns>
        </member>
        <member name="M:Facebook.Rest.Pages.GetFields">
            <summary>
            Retrieves hardcoded List of fields names.
            </summary>
            <returns>This method returns a List of field strings.</returns>
        </member>
        <member name="T:Facebook.Rest.Pages.GetInfoCallback">
            <summary>
            Delegate called when GetInfo call is completed.
            </summary>
            <param name="pages">list of page objects</param>
            <param name="state">An object containing state information for this asynchronous request</param>
            <param name="e">Exception object, if the call resulted in exception.</param>
        </member>
        <member name="T:Facebook.Rest.Pages.IsAppAddedCallback">
            <summary>
            Delegate called when IsAppAdded call is completed.
            </summary>
            <param name="result">boolean result</param>
            <param name="state">An object containing state information for this asynchronous request</param>
            <param name="e">Exception object, if the call resulted in exception.</param>
        </member>
        <member name="T:Facebook.Rest.Pages.IsAdminCallback">
            <summary>
            Delegate called when IsAdmin call is completed.
            </summary>
            <param name="result">boolean result</param>
            <param name="state">An object containing state information for this asynchronous request</param>
            <param name="e">Exception object, if the call resulted in exception.</param>
        </member>
        <member name="T:Facebook.Rest.Pages.IsFanCallback">
            <summary>
            Delegate called when IsFan call is completed.
            </summary>
            <param name="result">boolean result</param>
            <param name="state">An object containing state information for this asynchronous request</param>
            <param name="e">Exception object, if the call resulted in exception.</param>
        </member>
        <member name="T:Facebook.Rest.Api">
            <summary>
            Provides various methods to utilize the Facebook Platform API.
            </summary>
        </member>
        <member name="M:Facebook.Rest.Api.ExtendedPermissionUrl(Facebook.Schema.Enums.ExtendedPermissions)">
            <summary>
            Constructs the URL to use to redirect a user to enable a given extended permission for your application.
            </summary>
            <param name="permission">The specific permission to enable.</param>
            <returns>The URL to redirect users to.</returns>
        </member>
        <member name="P:Facebook.Rest.Api.Auth">
            <summary>
             Gets or sets the Auth REST API object instance.
            </summary>
        </member>
        <member name="P:Facebook.Rest.Api.Connect">
            <summary>
             Gets or sets the Connect REST API object instance.
            </summary>
        </member>
        <member name="P:Facebook.Rest.Api.Marketplace">
            <summary>
             Gets or sets the Marketplace REST API object instance.
            </summary>
        </member>
        <member name="P:Facebook.Rest.Api.Comments">
            <summary>
             Gets or sets the Comments REST API object instance.
            </summary>
        </member>
        <member name="P:Facebook.Rest.Api.Photos">
            <summary>
             Gets or sets the Photos REST API object instance.
            </summary>
        </member>
        <member name="P:Facebook.Rest.Api.Users">
            <summary>
             Gets or sets the Users REST API object instance.
            </summary>
        </member>
        <member name="P:Facebook.Rest.Api.Friends">
            <summary>
             Gets or sets the Friends REST API object instance.
            </summary>
        </member>
        <member name="P:Facebook.Rest.Api.Intl">
            <summary>
             Gets or sets the Intl REST API object instance.
            </summary>
        </member>
        <member name="P:Facebook.Rest.Api.Events">
            <summary>
             Gets or sets the Events REST API object instance.
            </summary>
        </member>
        <member name="P:Facebook.Rest.Api.Groups">
            <summary>
             Gets or sets the Groups REST API object instance.
            </summary>
        </member>
        <member name="P:Facebook.Rest.Api.Admin">
            <summary>
             Gets or sets the Admin REST API object instance.
            </summary>
        </member>
        <member name="P:Facebook.Rest.Api.Profile">
            <summary>
             Gets or sets the Profile REST API object instance.
            </summary>
        </member>
        <member name="P:Facebook.Rest.Api.Notifications">
            <summary>
             Gets or sets the Notifications REST API object instance.
            </summary>
        </member>
        <member name="P:Facebook.Rest.Api.Fbml">
            <summary>
             Gets or sets the Fbml REST API object instance.
            </summary>
        </member>
        <member name="P:Facebook.Rest.Api.Feed">
            <summary>
             Gets or sets the Feed REST API object instance.
            </summary>
        </member>
        <member name="P:Facebook.Rest.Api.Fql">
            <summary>
             Gets or sets the Fql REST API object instance.
            </summary>
        </member>
        <member name="P:Facebook.Rest.Api.LiveMessage">
            <summary>
             Gets or sets the Livemessage REST API object instance.
            </summary>
        </member>
        <member name="P:Facebook.Rest.Api.Message">
            <summary>
             Gets or sets the Livemessage REST API object instance.
            </summary>
        </member>
        <member name="P:Facebook.Rest.Api.Pages">
            <summary>
             Gets or sets the Pages REST API object instance.
            </summary>
        </member>
        <member name="P:Facebook.Rest.Api.Application">
            <summary>
             Gets or sets the Application REST API object instance.
            </summary>
        </member>
        <member name="P:Facebook.Rest.Api.Data">
            <summary>
             Gets or sets the Data REST API object instance.
            </summary>
        </member>
        <member name="P:Facebook.Rest.Api.Stream">
            <summary>
             Gets or sets the Stream REST API object instance.
            </summary>
        </member>
        <member name="P:Facebook.Rest.Api.Status">
            <summary>
             Gets or sets the Status REST API object instance.
            </summary>
        </member>
        <member name="P:Facebook.Rest.Api.Video">
            <summary>
             Gets or sets the Video REST API object instance.
            </summary>
        </member>
        <member name="P:Facebook.Rest.Api.Links">
            <summary>
             Gets or sets the Links REST API object instance.
            </summary>
        </member>
        <member name="P:Facebook.Rest.Api.Notes">
            <summary>
             Gets or sets the Notes REST API object instance.
            </summary>
        </member>
        <member name="P:Facebook.Rest.Api.AuthToken">
            <summary>
             Gets or sets the AuthToken string.
            </summary>
        </member>
        <member name="P:Facebook.Rest.Api.LoginUrl">
            <summary>
             Gets or sets the LoginUrl sring.
            </summary>
        </member>
        <member name="P:Facebook.Rest.Api.LogOffUrl">
            <summary>
             Gets or sets the LogOffUrl string.
            </summary>
        </member>
        <member name="P:Facebook.Rest.Api.InstalledCulture">
            <summary>
            Gets the InstalledCulture CultureInfo object.
            </summary>
        </member>
        <member name="T:Facebook.BindingHelper.SearchResult">
            <summary>
            Data class used to hold the Search Results for XAML Databbinding
            </summary>
        </member>
        <member name="M:Facebook.BindingHelper.SearchResult.Equals(Facebook.BindingHelper.SearchResult)">
            <summary>
            Overriden operator to compare two SearchResults
            </summary>
        </member>
        <member name="T:Facebook.BindingHelper.SearchResultsCollection">
            <summary>
            Collection of SearchResult objects
            </summary>
        </member>
        <member name="M:Facebook.BindingHelper.SearchResultsCollection.#ctor(System.Collections.Generic.IList{Facebook.BindingHelper.SearchResult},System.String)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.SearchResultsCollection.SearchText">
            <summary>
            the text to search with
            </summary>
        </member>
        <member name="T:Facebook.BindingHelper.FacebookPhotoTagCollection">
            <summary>
            Represents a collection of photo tags
            </summary>
        </member>
        <member name="M:Facebook.BindingHelper.FacebookPhotoTagCollection.#ctor">
            <summary>
            Initializes FacebookContactCollection object
            </summary>
        </member>
        <member name="M:Facebook.BindingHelper.FacebookPhotoTagCollection.#ctor(System.Collections.Generic.IEnumerable{Facebook.Schema.photo_tag})">
            <summary>
            Initializes FacebookContactCollection from contacts list
            </summary>
            <param name="tags">list of tags</param>
        </member>
        <member name="T:Facebook.BindingHelper.FacebookPhotoAlbumCollection">
            <summary>
            Represents a album collection
            </summary>
        </member>
        <member name="M:Facebook.BindingHelper.FacebookPhotoAlbumCollection.#ctor">
            <summary>
            Initializes FacebookPhotoAlbumCollection object
            </summary>
        </member>
        <member name="M:Facebook.BindingHelper.FacebookPhotoAlbumCollection.#ctor(System.Collections.Generic.IEnumerable{Facebook.BindingHelper.FacebookPhotoAlbum})">
            <summary>
            Initializes FacebookPhotoAlbumCollection object from list of albums
            </summary>
            <param name="albums">album list</param>
        </member>
        <member name="T:Facebook.BindingHelper.DataRetrievalCompletedEventArgs">
            <summary>
            Represents event args for DataCollectionError
            </summary>
        </member>
        <member name="M:Facebook.BindingHelper.DataRetrievalCompletedEventArgs.#ctor(Facebook.Utility.FacebookException)">
            <summary>
            Creates new DataCollectionErrorEventArgs object
            </summary>
            <param name="exception"></param>
        </member>
        <member name="P:Facebook.BindingHelper.DataRetrievalCompletedEventArgs.Exception">
            <summary>
            Exception that was generated when updating the collection
            </summary>
        </member>
        <member name="T:Facebook.Rest.LiveMessage">
            <summary>
            Facebook LiveMessage API methods.
            </summary>
        </member>
        <member name="M:Facebook.Rest.LiveMessage.#ctor(Facebook.Session.IFacebookSession)">
            <summary>
            Public constructor for facebook.LiveMessage
            </summary>
            <param name="session">Needs a connected Facebook Session object for making requests</param>
        </member>
        <member name="M:Facebook.Rest.LiveMessage.Send(System.Int64,System.String,System.String)">
            <summary>
            Sends a "message" directly to a user's browser, which can be handled in FBJS.
            See the facebook guide for more information.
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
            var result = api.LiveMessage.Send(Constants.UserId, "live message event", "sending a message...");
            </code>
            </example>
            <param name="recipient">The user ID of the message recipient.</param>
            <param name="event_name">Name of the "event" for which messages will be sent and received.</param>
            <param name="message">The message to send (max length: 1024 bytes).</param>
            <returns>This method returns true if message was sent successfully.</returns>
        </member>
        <member name="M:Facebook.Rest.LiveMessage.SendAsync(System.Int64,System.String,System.String,Facebook.Rest.LiveMessage.SendCallback,System.Object)">
             <summary>
             Sends a "message" directly to a user's browser, which can be handled in FBJS.
             See the facebook guide for more information.
             </summary>
             <example>
             <code>
             private static void RunDemoAsync()
             {
                 FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.ApplicationSecret, Constants.SessionKey));
                 api.LiveMessage.SendAsync(Constants.UserId, "live message event", "sending a message...", AsyncDemoCompleted, null);
             }
            
             private static void AsyncDemoCompleted(bool result, Object state, FacebookException e)
             {
                 var actual = result;
             }
             </code>
             </example>
             <param name="recipient">The user ID of the message recipient.</param>
             <param name="event_name">Name of the "event" for which messages will be sent and received.</param>
             <param name="message">The message to send (max length: 1024 bytes).</param>
             <param name="callback">The AsyncCallback delegate</param>
             <param name="state">An object containing state information for this asynchronous request</param>        
             <returns>This method returns true if message was sent successfully.</returns>
        </member>
        <member name="T:Facebook.Rest.LiveMessage.SendCallback">
            <summary>
            Delegate called when Send call is completed.
            </summary>
            <param name="result">boolean result</param>
            <param name="state">An object containing state information for this asynchronous request</param>
            <param name="e">Exception object, if the call resulted in exception.</param>
        </member>
        <member name="T:Facebook.BindingHelper.FacebookProfile">
            <summary>
            Represents facebook profile information
            </summary>
        </member>
        <member name="M:Facebook.BindingHelper.FacebookProfile.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Facebook.BindingHelper.FacebookProfile.#ctor(Facebook.Schema.profile)">
            <summary>
            Constructor used to populate this object from an xml deserialized version of same data
            </summary>
        </member>
        <member name="M:Facebook.BindingHelper.FacebookProfile.Equals(Facebook.BindingHelper.FacebookProfile)">
            <summary>
            Overridden operator to compare to FacebookProfiles
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.FacebookProfile.Image">
            <summary>
            FacebookImage object for all sizes of profile image.
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.FacebookProfile.UserId">
            <summary>
            UserId of user
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.FacebookProfile.Url">
            <summary>
            Url on facebook site for this user
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.FacebookProfile.Name">
            <summary>
            Name of user
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.FacebookProfile.Picture">
            <summary>
            Url of users picture
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.FacebookProfile.PictureSquare">
            <summary>
            Url of users picture
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.FacebookProfile.PictureSmall">
            <summary>
            Url of users picture
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.FacebookProfile.PictureBig">
            <summary>
            Url of users picture
            </summary>
        </member>
        <member name="T:Facebook.BindingHelper.FacebookPhoto">
            <summary>
            Defines a Facebook Photo entity
            </summary>
        </member>
        <member name="M:Facebook.BindingHelper.FacebookPhoto.#ctor">
            <summary>
            Initializes FacebookPhoto object
            </summary>
        </member>
        <member name="M:Facebook.BindingHelper.FacebookPhoto.#ctor(Facebook.Schema.photo)">
            <summary>
            Initializes FacebookPhoto object
            </summary>
        </member>
        <member name="M:Facebook.BindingHelper.FacebookPhoto.AddTag(Facebook.BindingHelper.FacebookPhotoTag)">
            <summary>
            Adds a tag to the photo.
            </summary>
        </member>
        <member name="M:Facebook.BindingHelper.FacebookPhoto.Save(System.IO.Stream)">
            <summary>
            stream the file to save locally
            </summary>
        </member>
        <member name="M:Facebook.BindingHelper.FacebookPhoto.Equals(Facebook.BindingHelper.FacebookPhoto)">
            <summary>
            Overridden operator to compare this instance to another photo
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.FacebookPhoto.Image">
            <summary>
            Facebook Image object defining size images of photo object
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.FacebookPhoto.Tags">
            <summary>
            Gets list of tags for this photo.
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.FacebookPhoto.PhotoId">
            <summary>
            Photo Id
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.FacebookPhoto.AlbumId">
            <summary>
            Album Id
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.FacebookPhoto.Owner">
            <summary>
            Owner of this photo
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.FacebookPhoto.Source">
            <summary>
            Url of the photo
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.FacebookPhoto.SourceBig">
            <summary>
            Url of big size photo
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.FacebookPhoto.SourceSmall">
            <summary>
            Url of small size photo
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.FacebookPhoto.Link">
            <summary>
            Link information
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.FacebookPhoto.Caption">
            <summary>
            Caption of photo
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.FacebookPhoto.Created">
            <summary>
            Created time in facebook format
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.FacebookPhoto.CreatedTime">
            <summary>
            Created time
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.FacebookPhoto.StoryFbid">
            <summary>
            Story Fbid
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.FacebookPhoto.Modified">
            <summary>
            Modified time in facebook format
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.FacebookPhoto.ModifiedTime">
            <summary>
            Modified time
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.FacebookPhoto.Album">
            <summary>
            Gets album object holding this photo
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.FacebookPhoto.OwnerInfo">
            <summary>
            FacebookContact object for owner of this album
            </summary>
        </member>
        <member name="E:Facebook.BindingHelper.FacebookPhoto.PropertyChanged">
            <summary>
            PropertyChange notification event
            </summary>
        </member>
        <member name="T:Facebook.BindingHelper.PhotoTagsCollection">
            <summary>
            Represents photo tag collection
            </summary>
        </member>
        <member name="M:Facebook.BindingHelper.PhotoTagsCollection.#ctor(System.Collections.Generic.IEnumerable{Facebook.BindingHelper.FacebookPhotoTag})">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:Facebook.BindingHelper.FacebookPhotoTag">
            <summary>
            Contains photo tag information
            </summary>
        </member>
        <member name="M:Facebook.BindingHelper.FacebookPhotoTag.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Facebook.BindingHelper.FacebookPhotoTag.#ctor(Facebook.Schema.photo_tag)">
            <summary>
            Constructor that hydrates this object from xml deserialized object
            </summary>
        </member>
        <member name="M:Facebook.BindingHelper.FacebookPhotoTag.Equals(Facebook.BindingHelper.FacebookPhotoTag)">
            <summary>
            Operator overload to compare this instance against another FacebookPhotoTag
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.FacebookPhotoTag.PhotoId">
            <summary>
            photo Id
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.FacebookPhotoTag.Subject">
            <summary>
            Subject 
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.FacebookPhotoTag.Text">
            <summary>
            Text of tag
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.FacebookPhotoTag.Xcoord">
            <summary>
            Xcoord
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.FacebookPhotoTag.Ycoord">
            <summary>
            Ycoord
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.FacebookPhotoTag.Created">
            <summary>
            Created time in facebook format
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.FacebookPhotoTag.CreatedTime">
            <summary>
            Created time
            </summary>
        </member>
        <member name="T:Facebook.BindingHelper.BindingManager">
            <summary>
            Facebook service object
            </summary>
        </member>
        <member name="M:Facebook.BindingHelper.BindingManager.CreateInstance(Facebook.Session.FacebookSession)">
            <summary>
            Created an instance of this object.
            We always create new instance here for login/logout event.
            </summary>
            <param name="session"></param>
            <returns></returns>
        </member>
        <member name="M:Facebook.BindingHelper.BindingManager.#ctor(Facebook.Session.FacebookSession)">
            <summary>
            Initializes new BindingManager object
            </summary>
            <param name="session">Session object</param>
        </member>
        <member name="M:Facebook.BindingHelper.BindingManager.#ctor(System.String,System.String)">
            <summary>
            Initializes new BindingManager object
            </summary>
            <param name="appKey">Application Key</param>
            <param name="appSecret">Application Secret key</param>
        </member>
        <member name="M:Facebook.BindingHelper.BindingManager.RefreshCurrentUserAlbums">
            <summary>
            Refreshes current user albums that is downloaded by service object
            </summary>
        </member>
        <member name="M:Facebook.BindingHelper.BindingManager.RefreshFriendsAlbums">
            <summary>
            Refreshes friends albums that is downloaded by service object
            </summary>
        </member>
        <member name="M:Facebook.BindingHelper.BindingManager.RefreshFriends">
            <summary>
            Refreshes friends that is downloaded by service object
            </summary>
        </member>
        <member name="M:Facebook.BindingHelper.BindingManager.IsFriend(System.Int64)">
            <summary>
            Checks if given user is a friend
            </summary>
            <param name="userId">userId to check against</param>
            <returns>true if user is friend</returns>
        </member>
        <member name="M:Facebook.BindingHelper.BindingManager.ExecuteFqlQuery``1(System.String,Facebook.Rest.Fql.QueryCallback{``0},System.Object)">
            <summary>
            Executes an fql query and deserialiizes it to type specified
            </summary>
            <typeparam name="T">Type of object to deserialize</typeparam>
            <param name="query">Query string</param>
            <param name="callback">Callback to be called when request completes</param>
            <param name="state">User state object</param>
        </member>
        <member name="M:Facebook.BindingHelper.BindingManager.GetFriendsAlbums(System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Boolean})">
            <summary>
            Executes an fql query to get the albums of the friends
            </summary>
            <param name="limit">The maximum number of albums to return</param>
            <param name="startTime">Only albums after this date</param>
            <param name="endTime">Only albums before this date</param>
            <param name="getProfilePictureAlbums">Indicator if we want to include profile picture albums</param>
        </member>
        <member name="M:Facebook.BindingHelper.BindingManager.GetPhotos(System.String)">
            <summary>
            Gets photo information for given album id or photo ids. Either albumid or
            photoids need to be specified
            </summary>
            <param name="albumid">Album id</param>
            <returns>FacebookPhotoCollection collection object</returns>
        </member>
        <member name="M:Facebook.BindingHelper.BindingManager.GetPhotosOf(System.Int64)">
            <summary>
            Gets photo information for photos in which the given user is tagged
            </summary>
            <param name="userId">User Id of the tagged user</param>
            <returns></returns>
        </member>
        <member name="M:Facebook.BindingHelper.BindingManager.GetPhotosBy(System.Int64)">
            <summary>
            Gets photo information for most recent photos added by the given user
            </summary>
            <param name="userId">User Id of the user</param>
            <returns></returns>
        </member>
        <member name="M:Facebook.BindingHelper.BindingManager.GetUsers(System.Int64[])">
            <summary>
            Retrieves information for given set of user ids
            </summary>
            <param name="userIds">userids for users for which informaiton needs to be retrieved</param>
            <returns>FacebookUsersCollection object</returns>
        </member>
        <member name="M:Facebook.BindingHelper.BindingManager.UpdateStatus(System.String)">
            <summary>
            Updates the user status
            </summary>
            <param name="newStatus">new status string</param>
        </member>
        <member name="M:Facebook.BindingHelper.BindingManager.GetStream(System.Collections.Generic.List{System.Int64},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.String)">
            <summary>
            Gets stream data.
            </summary>
            <param name="userIds">The list of IDs of the users used to filter the posts.</param>
            <param name="startTime">The earliest time  for which to retrieve posts from the stream.</param>
            <param name="endTime">The latest time  for which to retrieve posts from the stream</param>
            <param name="limit">The total number of posts to return.</param>
            <param name="filter">User specified filter</param>
        </member>
        <member name="M:Facebook.BindingHelper.BindingManager.GetStream(System.String,System.Nullable{System.Int32},System.Nullable{System.DateTime})">
            <summary>
            Gets stream data for given filter key
            </summary>
            <param name="filterKey">Filter key</param>
            <param name="limit">Optional limit on number of items to retrieve.</param>
            <param name="createdTime">Optional datetime used to filter items that have created_time less than specified value.</param>
            <returns>ActivityPostCollection collection object</returns>
        </member>
        <member name="M:Facebook.BindingHelper.BindingManager.GetAllStreams(System.Int64,System.DateTime)">
            <summary>
            Gets all posts since a given datetime value
            </summary>
            <param name="userId"></param>
            <param name="lastModified">Optional datetime used for obtaining incremental changes (i.e. only those comments that have been modified since specified value)</param>
            <returns></returns>
        </member>
        <member name="M:Facebook.BindingHelper.BindingManager.SearchOnStream(System.String,System.Int64,System.Boolean,System.Nullable{System.Int32})">
            <summary>
            Search the users stream
            </summary>
            <param name="keywords">keywords to use in the search</param>
            <param name="userId">userid to search</param>
            <param name="globalSearch">global search or not</param>
            <param name="limit">maximum results to return</param>
        </member>
        <member name="M:Facebook.BindingHelper.BindingManager.GetAlbums(System.Int64)">
            <summary>
            Gets albums form given user
            </summary>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:Facebook.BindingHelper.BindingManager.GetAlbums(System.String[])">
            <summary>
            Makes an async request to get album matching given album id
            </summary>
            <param name="albumIds">id of album</param>
            <returns>Albumcollection object containing the album</returns>
        </member>
        <member name="M:Facebook.BindingHelper.BindingManager.GetAlbums(System.String[],System.Boolean)">
            <summary>
            Makes an async request to get album matching given album id, specifying whether to use cache
            </summary>
            <param name="albumIds">id of album</param>
            <param name="useCache">whether to cache the results or not</param>
            <returns>Albumcollection object containing the album</returns>
        </member>
        <member name="M:Facebook.BindingHelper.BindingManager.GetProfiles(System.Int64[])">
            <summary>
            Gets profiles for given user ids
            </summary>
            <param name="userIds">array of userIds</param>
            <returns>FacebookProfile object</returns>
        </member>
        <member name="M:Facebook.BindingHelper.BindingManager.session_LoginCompleted(System.Object,System.ComponentModel.AsyncCompletedEventArgs)">
            <summary>
            Login completed event from session object
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Facebook.BindingHelper.BindingManager.session_LogoutCompleted(System.Object,System.ComponentModel.AsyncCompletedEventArgs)">
            <summary>
            Logout completed event from session object
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Facebook.BindingHelper.BindingManager.GetComments(System.String,System.Nullable{System.Int32},System.Nullable{System.DateTime},Facebook.BindingHelper.GetStreamCommentsCallback,System.Object)">
            <summary>
            Gets new comments for given post, in ascending order
            </summary>
            <param name="postId"></param>
            <param name="limit">Optional number of coments to get</param>
            <param name="lastModified">Option datetime used for obtaining incremental changes (i.e. only those comments that have been modified since specified value)</param>
            <param name="callback"></param>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="E:Facebook.BindingHelper.BindingManager.PropertyChanged">
            <summary>
            Property changed event
            </summary>
        </member>
        <member name="E:Facebook.BindingHelper.BindingManager.LoginCompletedEvent">
            <summary>
            Login completed events
            </summary>
        </member>
        <member name="E:Facebook.BindingHelper.BindingManager.LogoutCompletedEvent">
            <summary>
            Logout completed events
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.BindingManager.Api">
            <summary>
            Facebook api object
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.BindingManager.Friends">
            <summary>
            Friends collection of logged in user
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.BindingManager.MyPhotoAlbums">
            <summary>
            Albums collection of logged in user
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.BindingManager.FriendsAlbums">
            <summary>
            Albums collections of all user friends
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.BindingManager.Stream">
            <summary>
            Stream information for current user
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.BindingManager.Notifications">
            <summary>
            Notifications for current user
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.BindingManager.CurrentUser">
            <summary>
            User information about currently logged in user
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.BindingManager.CurrentUserId">
            <summary>
            UserID about currently logged in user
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.BindingManager.Instance">
            <summary>
            Gets an instance of this object
            </summary>
        </member>
        <member name="T:Facebook.BindingHelper.ActivityComment">
            <summary>
            Defines a facebook stream comment 
            </summary>
        </member>
        <member name="M:Facebook.BindingHelper.ActivityComment.#ctor">
            <summary>
            Initializes ActivityComment object
            </summary>
        </member>
        <member name="M:Facebook.BindingHelper.ActivityComment.#ctor(Facebook.Utility.FacebookComment)">
            <summary>
            Initializes ActivityComment object from underlying facebook data object
            </summary>
            <param name="comment">comment object</param>
        </member>
        <member name="M:Facebook.BindingHelper.ActivityComment.#ctor(Facebook.Schema.comment)">
            <summary>
            Initializes ActivityComment object from underlying facebook data object
            </summary>
            <param name="comment">comment object</param>
        </member>
        <member name="M:Facebook.BindingHelper.ActivityComment.Equals(Facebook.BindingHelper.ActivityComment)">
            <summary>
            Overridden operator used to compare to ActivityComments
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.ActivityComment.FromUserId">
            <summary>
            Id of User who posted this comment
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.ActivityComment.Time">
            <summary>
            Time the comment was posted
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.ActivityComment.Text">
            <summary>
            Comment text
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.ActivityComment.CommentId">
            <summary>
            Id of comment
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.ActivityComment.FromUser">
            <summary>
            Profile object of user who posted this comment
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.ActivityComment.IsMine">
            <summary>
            Indicates if this comment was posted by currently logged in user
            </summary>
        </member>
        <member name="T:Facebook.Utility.StringHelper">
            <summary>
            Helper functions for string manipulation
            </summary>
        </member>
        <member name="M:Facebook.Utility.StringHelper.ConvertToCommaSeparated``1(``0[])">
            <summary>
            Convert a collection of strings to a comma separated list.
            </summary>
            <param name="items">The array to convert to a comma separated list.</param>
            <returns>comma separated string.</returns>
        </member>
        <member name="M:Facebook.Utility.StringHelper.ConvertToCommaSeparated``1(System.Collections.Generic.IList{``0})">
            <summary>
            Convert a collection of strings to a comma separated list.
            </summary>
            <param name="collection">The collection to convert to a comma separated list.</param>
            <returns>comma separated string.</returns>
        </member>
        <member name="M:Facebook.Utility.StringHelper.StripNonValidXMLCharacters(System.String)">
            <summary>
            Strip Non Valid XML Characters.
            </summary>
        </member>
        <member name="T:Facebook.Utility.FacebookException">
            <summary>
            Represents an error returned by the Facebook REST-like API.
            </summary>
        </member>
        <member name="M:Facebook.Utility.FacebookException.#ctor(System.String,System.Int32,System.String,System.String)">
            <summary>
            Constructor for the FacebookException.
            </summary>
            <param name="errorXml">The request that caused the error, in XML format.</param>
            <param name="errorCode">The specific error code returned by Facebook.</param>
            <param name="message">The error message returned by Facebook.</param>
            <param name="requestXml">The request that caused the error, in XML format.</param>
        </member>
        <member name="M:Facebook.Utility.FacebookException.#ctor(System.Int32,System.String,Facebook.Schema.FacebookApiExceptionRequest_args)">
            <summary>
            Constructor for the FacebookException.
            </summary>
            <param name="errorCode">The specific error code returned by Facebook.</param>
            <param name="message">The error message returned by Facebook.</param>
            <param name="requestArgs">Request arguments for the call that caused this exception</param>
        </member>
        <member name="M:Facebook.Utility.FacebookException.#ctor(System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="message">The error message returned by Facebook</param>
            <param name="e">Inner exception</param>
        </member>
        <member name="M:Facebook.Utility.FacebookException.#ctor(System.String)">
            <summary>
            Constructor for the FacebookException.
            </summary>
            <param name="message">The error message returned by Facebook</param>
        </member>
        <member name="P:Facebook.Utility.FacebookException.ErrorXml">
            <summary>
            The error returned by Facebook in XML format.
            </summary>
        </member>
        <member name="P:Facebook.Utility.FacebookException.ErrorCode">
            <summary>
            The specific error code returned by Facebook.
            </summary>
        </member>
        <member name="P:Facebook.Utility.FacebookException.RequestArguments">
            <summary>
            The request that caused the error, in XML format.
            </summary>
        </member>
        <member name="P:Facebook.Utility.FacebookException.Message">
            <summary>
            The error message returned by Facebook.
            </summary>
        </member>
        <member name="P:Facebook.Utility.FacebookException.RequestXml">
            <summary>
            The request that caused the error, in XML format.
            </summary>
        </member>
        <member name="P:Facebook.Utility.FacebookException.ErrorType">
            <summary>
            A value representing the specific type of error returned by Facebook.
            </summary>
        </member>
        <member name="T:Facebook.Utility.RequestArgs">
            <summary>
            Contains Key-Value pair exception information returned by server
            </summary>
        </member>
        <member name="P:Facebook.Utility.RequestArgs.key">
            <summary>
            Key variable 
            </summary>
        </member>
        <member name="P:Facebook.Utility.RequestArgs.value">
            <summary>
            Value variable
            </summary>
        </member>
        <member name="T:Facebook.Utility.ErrorType">
            <summary>
            A value representing the specific type of error returned by Facebook.
            </summary>
        </member>
        <member name="F:Facebook.Utility.ErrorType.Unknown">
            <summary>
            </summary>
        </member>
        <member name="F:Facebook.Utility.ErrorType.ServiceUnavailable">
            <summary>
            </summary>
        </member>
        <member name="F:Facebook.Utility.ErrorType.RequestLimit">
            <summary>
            </summary>
        </member>
        <member name="F:Facebook.Utility.ErrorType.Timeout">
            <summary>
            </summary>
        </member>
        <member name="F:Facebook.Utility.ErrorType.Signing">
            <summary>
            </summary>
        </member>
        <member name="F:Facebook.Utility.ErrorType.InvalidUser">
            <summary>
            </summary>
        </member>
        <member name="F:Facebook.Utility.ErrorType.InvalidAlbum">
            <summary>
            </summary>
        </member>
        <member name="F:Facebook.Utility.ErrorType.UserNotVisible">
            <summary>
            </summary>
        </member>
        <member name="F:Facebook.Utility.ErrorType.AlbumNotVisible">
            <summary>
            </summary>
        </member>
        <member name="F:Facebook.Utility.ErrorType.PhotoNotVIsible">
            <summary>
            </summary>
        </member>
        <member name="F:Facebook.Utility.ErrorType.InvaldFQLSyntax">
            <summary>
            </summary>
        </member>
        <member name="T:Facebook.Utility.FacebookStreamData">
            <summary>
            Contains Stream information  
            </summary>
        </member>
        <member name="M:Facebook.Utility.FacebookStreamData.OnDeserialized(System.Runtime.Serialization.StreamingContext)">
            <summary>
            Method called after deserialization of the class completes.
            </summary>
            <param name="context"></param>
        </member>
        <member name="P:Facebook.Utility.FacebookStreamData.Posts">
            <summary>
            Contains all posts in the stream
            </summary>
        </member>
        <member name="P:Facebook.Utility.FacebookStreamData.Profiles">
            <summary>
            Contains profile information for all users in the stream
            </summary>
        </member>
        <member name="P:Facebook.Utility.FacebookStreamData.Albums">
            <summary>
            Contains albums information for all albums in the stream
            </summary>
        </member>
        <member name="T:Facebook.Session.DesktopPopup.FacebookWPFBrowser">
            <summary>
            Interaction logic for FacebookWPFBrowser.xaml
            </summary>
            <summary>
            FacebookWPFBrowser
            </summary>
        </member>
        <member name="M:Facebook.Session.DesktopPopup.FacebookWPFBrowser.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="url">The url to navigate to when loaded.</param>
        </member>
        <member name="M:Facebook.Session.DesktopPopup.FacebookWPFBrowser.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="P:Facebook.Session.DesktopPopup.FacebookWPFBrowser.SessionProperties">
            <summary>
            Key value pairs of the session information returned by facebook includes session_key, secret, expires and uid
            </summary>
        </member>
        <member name="M:Facebook.Session.ConnectSessionProvider.GetCookie(System.String)">
            <summary>
            </summary>
            <param name="cookieName"></param>
            <returns></returns>
        </member>
        <member name="M:Facebook.Session.ConnectSessionProvider.IsConnected">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Facebook.Session.ConnectSessionProvider.ComputeHash(System.String)">
            <summary>
            Computes an MD5 Hash from the given clear text string.
            </summary>
            <param name="clearTextString">Clear text string used to compute the hash.</param>
            <returns>Returns an MD5 computed hash.</returns>
            <remarks>Uses <see cref="P:System.Text.Encoding.UTF8">UTF-8</see> encoding by default.</remarks>
        </member>
        <member name="M:Facebook.Session.ConnectSessionProvider.ComputeHash(System.String,System.Text.Encoding)">
            <summary>
            Computes an MD5 Hash from the given clear text string.
            </summary>
            <param name="clearTextString">Clear text string used to compute the hash.</param>
            <param name="encoding">Encoding to be used.</param>
            <returns>Returns an MD5 computed hash.</returns>
        </member>
        <member name="M:Facebook.Schema.feed_image.#ctor(System.String,System.String)">
            <summary>
            constructor
            </summary>
        </member>
        <member name="P:Facebook.Schema.feed_image.image_url">
            <summary>
            The URL of an image to be displayed in the News Feed story.
            </summary>
        </member>
        <member name="P:Facebook.Schema.feed_image.image_link_url">
            <summary>
            The URL destination after a click on the image referenced by ImageURL.
            </summary>
        </member>
        <member name="T:Facebook.Rest.Notifications">
            <summary>
            Facebook Notifications API methods.
            </summary>
        </member>
        <member name="M:Facebook.Rest.Notifications.#ctor(Facebook.Session.IFacebookSession)">
            <summary>
            Public constructor for facebook.Notifications
            </summary>
            <param name="session">Needs a connected Facebook Session object for making requests</param>
        </member>
        <member name="M:Facebook.Rest.Notifications.Get">
            <summary>
            Returns a list of all of the visible notes written by the specified user.
            </summary>
            <example>
            <code>
            FacebookApi api = new Api(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
            var result = api.Notifications.Get();
            </code>
            </example>
            <returns>This method returns the same set of subelements, whether or not there are outstanding notifications in any area. Note that if the unread subelement value is 0 for any of the pokes or shares elements, the most_recent element is also 0. Otherwise, the most_recent element contains an identifier for the most recent notification of the enclosing type.</returns>
        </member>
        <member name="M:Facebook.Rest.Notifications.Send(System.Collections.Generic.List{System.Int64},System.String)">
            <summary>
            Sends a notification to a set of users.
            </summary>
            <example>
            <code>
            List&lt;long&gt; notificationList = new List&lt;long&gt;();
            notificationList.Add(Constants.UserId);
            FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
            var result = api.Notifications.Send(notificationList, "my notification from samples app");
            </code>
            </example>
            <param name="to_ids">List recipient IDs. These must be either friends of the logged-in user or people who have added your application. To send a notification to the current logged-in user without a name prepended to the message, set to_ids to empty List.</param>
            <param name="notification">The content of the notification. The notification uses a stripped down version of FBML and HTML, allowing only text and links (see the list of allowed tags). The notification can contain up to 2,000 characters.</param>
            <returns>This returns a list of user ids for whom notifications were successfully sent. We will throw an error if an error occurred.</returns>
            <remarks>The notification parameter is a very stripped-down set of FBML which allows only tags that result in just text and links.</remarks>
        </member>
        <member name="M:Facebook.Rest.Notifications.Send(System.Collections.Generic.List{System.Int64},System.String,System.String)">
            <summary>
            Sends a notification to a set of users.
            </summary>
            <example>
            <code>
            List&lt;long&gt; notificationList = new List&lt;long&gt;();
            notificationList.Add(Constants.UserId);
            FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
            var result = api.Notifications.Send(notificationList, "my notification from samples app", "app_to_user");
            </code>
            </example>
            <param name="to_ids">List recipient IDs. These must be either friends of the logged-in user or people who have added your application. To send a notification to the current logged-in user without a name prepended to the message, set to_ids to empty List.</param>
            <param name="notification">The content of the notification. The notification uses a stripped down version of FBML and HTML, allowing only text and links (see the list of allowed tags). The notification can contain up to 2,000 characters.</param>
            <param name="type">Specify whether the notification is a user_to_user one or an app_to_user. (Default value is user_to_user.)</param>
            <returns>This returns a list of user ids for whom notifications were successfully sent. We will throw an error if an error occurred.</returns>
            <remarks>The notification parameter is a very stripped-down set of FBML which allows only tags that result in just text and links.</remarks>
        </member>
        <member name="M:Facebook.Rest.Notifications.Send(System.String,System.String)">
            <summary>
            Sends a notification to a set of users.
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
            var result = api.Notifications.Send(Constants.UserId.ToString(), "my notification from samples app");
            </code>
            </example>
            <param name="to_ids">Comma-separated list of recipient IDs. These must be either friends of the logged-in user or people who have added your application. To send a notification to the current logged-in user without a name prepended to the message, set to_ids to empty List.</param>
            <param name="notification">The content of the notification. The notification uses a stripped down version of FBML and HTML, allowing only text and links (see the list of allowed tags). The notification can contain up to 2,000 characters.</param>
            <returns>This returns a list of user ids for whom notifications were successfully sent. We will throw an error if an error occurred.</returns>
            <remarks>The notification parameter is a very stripped-down set of FBML which allows only tags that result in just text and links.</remarks>
        </member>
        <member name="M:Facebook.Rest.Notifications.Send(System.String,System.String,System.String)">
            <summary>
            Sends a notification to a set of users.
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
            var result = api.Notifications.Send(Constants.UserId.ToString(), "my notification from samples app", "app_to_user");
            </code>
            </example>
            <param name="to_ids">List recipient IDs. These must be either friends of the logged-in user or people who have added your application. To send a notification to the current logged-in user without a name prepended to the message, set to_ids to empty List.</param>
            <param name="notification">The content of the notification. The notification uses a stripped down version of FBML and HTML, allowing only text and links (see the list of allowed tags). The notification can contain up to 2,000 characters.</param>
            <param name="type">Specify whether the notification is a user_to_user one or an app_to_user. (Default value is user_to_user.)</param>
            <returns>This returns a list of user ids for whom notifications were successfully sent. We will throw an error if an error occurred.</returns>
            <remarks>The notification parameter is a very stripped-down set of FBML which allows only tags that result in just text and links.</remarks>
        </member>
        <member name="M:Facebook.Rest.Notifications.GetList(System.Nullable{System.DateTime},System.Boolean)">
            <summary>
            This method gets all the current session user's notifications, as well as data for the applications that generated those notifications. It is a wrapper around the notification and application FQL tables; you can achieve more fine-grained control by using those two FQL tables in conjunction with the fql.multiquery API call. 
            Applications must pass a valid session key. 
            </summary>
            <param name="start_time">Indicates the earliest time to return a notification. This equates to the updated_time field in the notification FQL table. If not specified, this call returns all available notifications. </param>
            <param name="include_read">Indicates whether to include notifications that have already been read. By default, notifications a user has read are not included. </param>
            <returns>alerts and apps.</returns>
        </member>
        <member name="M:Facebook.Rest.Notifications.MarkRead(System.Collections.Generic.List{System.Int64})">
            <summary>
            This method marks one or more notifications as read. You return the notifications by calling notifications.getList or querying the notification FQL table. 
            Applications must pass a valid session key, and can only mark the notifications of the current session user. 
            </summary>
            <param name="notification_ids">List of notification ids</param>
            <returns>if successful</returns>
        </member>
        <member name="M:Facebook.Rest.Notifications.SendEmail(System.Collections.Generic.List{System.Int64},System.String,System.String,System.String)">
            <summary>
            Sends an email to the specified users who have the application.
            </summary>
            <example>
            <code>
            List&lt;long&gt; notificationList = new List&lt;long&gt;();
            notificationList.Add(Constants.UserId);
            string fbml = string.Format("&lt;fb:switch&gt;&lt;fb:profile-pic uid=\"{0}\" /&gt;&lt;fb:default&gt;Unable to show profile pic&lt;/fb:default&gt;&lt;/fb:switch&gt;", Constants.UserId);
            FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
            
            // This action will require the user to have granted this app "email" Extended Permission.
            //var result = api.Notifications.SendEmail(notificationList, "email test", "here is plain text", string.Empty);
            var result = api.Notifications.SendEmail(notificationList, "email test", string.Empty, fbml);
            </code>
            </example>
            <param name="recipients">A List of recipient IDs. The recipients must be people who have already added your application. You can email up to 100 people at a time.</param>
            <param name="subject">The subject of the email message. As of 10/28/2008, the subject will accept a limited set of FBML tags, including names, and tags related to internationalization.</param>
            <param name="plainText">The plain text version of the email content. You must include a non-empty value for at least one of either the fbml or text parameters. The FBML input takes precedence, but if the given FBML value is invalid or cannot be rendered, then the text will be used instead. There is currently no character limit on the length of either the text or FBML body.</param>
            <param name="fbml">The FBML version of the email. You must include a non-empty value for at least one of either the fbml or text parameters. The fbml parameter is a stripped-down set of FBML that allows only HTML/FBML tags that result in text, links, linebreaks, as well as tags related to internationalization.</param>
            <returns>This returns a comma-separated list of user ids for whom notifications were successfully sent. We will throw an error if an error occurred.</returns>
        </member>
        <member name="M:Facebook.Rest.Notifications.SendEmail(System.String,System.String,System.String,System.String)">
             <summary>
             Sends an email to the specified users who have the application.
             </summary>
             <example>
             <code>
             string fbml = string.Format("&lt;fb:switch&gt;&lt;fb:profile-pic uid=\"{0}\" /&gt;&lt;fb:default&gt;Unable to show profile pic&lt;/fb:default&gt;&lt;/fb:switch&gt;", Constants.UserId);
             FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
            
             // This action will require the user to have granted this app "email" Extended Permission.
             //var result = api.Notifications.SendEmail(Constants.UserId.ToString(), "email test", "here is plain text", string.Empty);
             var result = api.Notifications.SendEmail(Constants.UserId.ToString(), "email test", string.Empty, fbml);
             </code>
             </example>
             <param name="recipients">A comma-separated list of recipient IDs. The recipients must be people who have already added your application. You can email up to 100 people at a time.</param>
             <param name="subject">The subject of the email message. As of 10/28/2008, the subject will accept a limited set of FBML tags, including names, and tags related to internationalization.</param>
             <param name="plainText">The plain text version of the email content. You must include a non-empty value for at least one of either the fbml or text parameters. The FBML input takes precedence, but if the given FBML value is invalid or cannot be rendered, then the text will be used instead. There is currently no character limit on the length of either the text or FBML body.</param>
             <param name="fbml">The FBML version of the email. You must include a non-empty value for at least one of either the fbml or text parameters. The fbml parameter is a stripped-down set of FBML that allows only HTML/FBML tags that result in text, links, linebreaks, as well as tags related to internationalization.</param>
             <returns>This returns a comma-separated list of user ids for whom notifications were successfully sent. We will throw an error if an error occurred.</returns>
        </member>
        <member name="M:Facebook.Rest.Notifications.GetAsync(Facebook.Rest.Notifications.GetCallback,System.Object)">
             <summary>
             Returns a list of all of the visible notes written by the specified user.
             </summary>
             <example>
             <code>
             private static void RunDemoAsync()
             {
                 FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.ApplicationSecret, Constants.SessionKey));
                 api.Notifications.GetAsync(AsyncDemoCompleted, null);
             }
            
             private static void AsyncDemoCompleted(notifications result, Object state, FacebookException e)
             {
                 var actual = result;
             }
             </code>
             </example>
             <param name="callback">The AsyncCallback delegate</param>
             <param name="state">An object containing state information for this asynchronous request</param>        
             <returns>This method returns the same set of subelements, whether or not there are outstanding notifications in any area. Note that if the unread subelement value is 0 for any of the pokes or shares elements, the most_recent element is also 0. Otherwise, the most_recent element contains an identifier for the most recent notification of the enclosing type.</returns>
        </member>
        <member name="M:Facebook.Rest.Notifications.SendAsync(System.Collections.Generic.List{System.Int64},System.String,Facebook.Rest.Notifications.SendCallback,System.Object)">
             <summary>
             Sends a notification to a set of users.
             </summary>
             <example>
             <code>
             private static void RunDemoAsync()
             {
                 List&lt;long&gt; notificationList = new List&lt;long&gt;();
                 notificationList.Add(Constants.UserId);
                 FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.ApplicationSecret, Constants.SessionKey));
                 api.Notifications.SendAsync(notificationList, "my notification from samples app", AsyncDemoCompleted, null);
             }
            
             private static void AsyncDemoCompleted(string result, Object state, FacebookException e)
             {
                 var actual = result;
             }
             </code>
             </example>
             <param name="to_ids">List recipient IDs. These must be either friends of the logged-in user or people who have added your application. To send a notification to the current logged-in user without a name prepended to the message, set to_ids to empty List.</param>
             <param name="notification">The content of the notification. The notification uses a stripped down version of FBML and HTML, allowing only text and links (see the list of allowed tags). The notification can contain up to 2,000 characters.</param>
             <param name="callback">The AsyncCallback delegate</param>
             <param name="state">An object containing state information for this asynchronous request</param>        
             <returns>This returns a list of user ids for whom notifications were successfully sent. We will throw an error if an error occurred.</returns>
             <remarks>The notification parameter is a very stripped-down set of FBML which allows only tags that result in just text and links.</remarks>
        </member>
        <member name="M:Facebook.Rest.Notifications.SendAsync(System.Collections.Generic.List{System.Int64},System.String,System.String,Facebook.Rest.Notifications.SendCallback,System.Object)">
             <summary>
             Sends a notification to a set of users.
             </summary>
             <example>
             <code>
             private static void RunDemoAsync()
             {
                 List&lt;long&gt; notificationList = new List&lt;long&gt;();
                 notificationList.Add(Constants.UserId);
                 FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.ApplicationSecret, Constants.SessionKey));
                 api.Notifications.SendAsync(notificationList, "my notification from samples app", "app_to_user", AsyncDemoCompleted, null);
             }
            
             private static void AsyncDemoCompleted(string result, Object state, FacebookException e)
             {
                 var actual = result;
             }
             </code>
             </example>
             <param name="to_ids">List recipient IDs. These must be either friends of the logged-in user or people who have added your application. To send a notification to the current logged-in user without a name prepended to the message, set to_ids to empty List.</param>
             <param name="notification">The content of the notification. The notification uses a stripped down version of FBML and HTML, allowing only text and links (see the list of allowed tags). The notification can contain up to 2,000 characters.</param>
             <param name="type">Specify whether the notification is a user_to_user one or an app_to_user. (Default value is user_to_user.)</param>
             <param name="callback">The AsyncCallback delegate</param>
             <param name="state">An object containing state information for this asynchronous request</param>        
             <returns>This returns a list of user ids for whom notifications were successfully sent. We will throw an error if an error occurred.</returns>
             <remarks>The notification parameter is a very stripped-down set of FBML which allows only tags that result in just text and links.</remarks>
        </member>
        <member name="M:Facebook.Rest.Notifications.SendAsync(System.String,System.String,Facebook.Rest.Notifications.SendCallback,System.Object)">
             <summary>
             Sends a notification to a set of users.
             </summary>
             <example>
             <code>
             private static void RunDemoAsync()
             {
                 FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.ApplicationSecret, Constants.SessionKey));
                 api.Notifications.SendAsync(Constants.UserId.ToString(), "my notification from samples app", AsyncDemoCompleted, null);
             }
            
             private static void AsyncDemoCompleted(string result, Object state, FacebookException e)
             {
                 var actual = result;
             }
             </code>
             </example>
             <param name="to_ids">Comma-separated list of recipient IDs. These must be either friends of the logged-in user or people who have added your application. To send a notification to the current logged-in user without a name prepended to the message, set to_ids to empty List.</param>
             <param name="notification">The content of the notification. The notification uses a stripped down version of FBML and HTML, allowing only text and links (see the list of allowed tags). The notification can contain up to 2,000 characters.</param>
             <param name="callback">The AsyncCallback delegate</param>
             <param name="state">An object containing state information for this asynchronous request</param>        
             <returns>This returns a list of user ids for whom notifications were successfully sent. We will throw an error if an error occurred.</returns>
             <remarks>The notification parameter is a very stripped-down set of FBML which allows only tags that result in just text and links.</remarks>
        </member>
        <member name="M:Facebook.Rest.Notifications.SendAsync(System.String,System.String,System.String,Facebook.Rest.Notifications.SendCallback,System.Object)">
             <summary>
             Sends a notification to a set of users.
             </summary>
             <example>
             <code>
             private static void RunDemoAsync()
             {
                 FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.ApplicationSecret, Constants.SessionKey));
                 api.Notifications.SendAsync(Constants.UserId.ToString(), "my notification from samples app", "app_to_user", AsyncDemoCompleted, null);
             }
            
             private static void AsyncDemoCompleted(string result, Object state, FacebookException e)
             {
                 var actual = result;
             }
             </code>
             </example>
             <param name="to_ids">List recipient IDs. These must be either friends of the logged-in user or people who have added your application. To send a notification to the current logged-in user without a name prepended to the message, set to_ids to empty List.</param>
             <param name="notification">The content of the notification. The notification uses a stripped down version of FBML and HTML, allowing only text and links (see the list of allowed tags). The notification can contain up to 2,000 characters.</param>
             <param name="type">Specify whether the notification is a user_to_user one or an app_to_user. (Default value is user_to_user.)</param>
             <param name="callback">The AsyncCallback delegate</param>
             <param name="state">An object containing state information for this asynchronous request</param>        
             <returns>This returns a list of user ids for whom notifications were successfully sent. We will throw an error if an error occurred.</returns>
             <remarks>The notification parameter is a very stripped-down set of FBML which allows only tags that result in just text and links.</remarks>
        </member>
        <member name="M:Facebook.Rest.Notifications.GetListAsync(System.Nullable{System.DateTime},System.Boolean,Facebook.Rest.Notifications.GetListCallback,System.Object)">
            <summary>
            This method gets all the current session user's notifications, as well as data for the applications that generated those notifications. It is a wrapper around the notification and application FQL tables; you can achieve more fine-grained control by using those two FQL tables in conjunction with the fql.multiquery API call. 
            Applications must pass a valid session key. 
            </summary>
            <param name="start_time">Indicates the earliest time to return a notification. This equates to the updated_time field in the notification FQL table. If not specified, this call returns all available notifications. </param>
            <param name="include_read">Indicates whether to include notifications that have already been read. By default, notifications a user has read are not included. </param>
            <param name="callback">The AsyncCallback delegate</param>
            <param name="state">An object containing state information for this asynchronous request</param>        
            <returns>alerts and apps.</returns>
        </member>
        <member name="M:Facebook.Rest.Notifications.MarkReadAsync(System.Collections.Generic.List{System.Int64},Facebook.Rest.Notifications.MarkReadCallback,System.Object)">
            <summary>
            This method marks one or more notifications as read. You return the notifications by calling notifications.getList or querying the notification FQL table. 
            Applications must pass a valid session key, and can only mark the notifications of the current session user. 
            </summary>
            <param name="notification_ids">List of notification ids</param>
            <param name="callback">The AsyncCallback delegate</param>
            <param name="state">An object containing state information for this asynchronous request</param>        
            <returns>alerts and apps.</returns>
        </member>
        <member name="M:Facebook.Rest.Notifications.SendEmailAsync(System.Collections.Generic.List{System.Int64},System.String,System.String,System.String,Facebook.Rest.Notifications.SendCallback,System.Object)">
             <summary>
             Sends an email to the specified users who have the application.
             </summary>
             <example>
             <code>
             private static void RunDemoAsync()
             {
                 List&lt;long&gt; notificationList = new List&lt;long&gt;();
                 notificationList.Add(Constants.UserId);
                 string fbml = string.Format("&lt;fb:switch&gt;&lt;fb:profile-pic uid=\"{0}\" /&gt;&lt;fb:default&gt;Unable to show profile pic&lt;/fb:default&gt;&lt;/fb:switch&gt;", Constants.UserId);
                 FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.ApplicationSecret, Constants.SessionKey));
            
                 // This action will require the user to have granted this app "email" Extended Permission.
                 //var result = api.Notifications.SendEmail(notificationList, "email test", "here is plain text", string.Empty);
                 api.Notifications.SendEmailAsync(notificationList, "email test", string.Empty, fbml, AsyncDemoCompleted, null);
             }
            
             private static void AsyncDemoCompleted(string result, Object state, FacebookException e)
             {
                 var actual = result;
             }
             </code>
             </example>
             <param name="recipients">A List of recipient IDs. The recipients must be people who have already added your application. You can email up to 100 people at a time.</param>
             <param name="subject">The subject of the email message. As of 10/28/2008, the subject will accept a limited set of FBML tags, including names, and tags related to internationalization.</param>
             <param name="plainText">The plain text version of the email content. You must include a non-empty value for at least one of either the fbml or text parameters. The FBML input takes precedence, but if the given FBML value is invalid or cannot be rendered, then the text will be used instead. There is currently no character limit on the length of either the text or FBML body.</param>
             <param name="fbml">The FBML version of the email. You must include a non-empty value for at least one of either the fbml or text parameters. The fbml parameter is a stripped-down set of FBML that allows only HTML/FBML tags that result in text, links, linebreaks, as well as tags related to internationalization.</param>
             <param name="callback">The AsyncCallback delegate</param>
             <param name="state">An object containing state information for this asynchronous request</param>        
             <returns>This returns a comma-separated list of user ids for whom notifications were successfully sent. We will throw an error if an error occurred.</returns>
        </member>
        <member name="M:Facebook.Rest.Notifications.SendEmailAsync(System.String,System.String,System.String,System.String,Facebook.Rest.Notifications.SendCallback,System.Object)">
             <summary>
             Sends an email to the specified users who have the application.
             </summary>
             <example>
             <code>
             private static void RunDemoAsync()
             {
                 string fbml = string.Format("&lt;fb:switch&gt;&lt;fb:profile-pic uid=\"{0}\" /&gt;&lt;fb:default&gt;Unable to show profile pic&lt;/fb:default&gt;&lt;/fb:switch&gt;", Constants.UserId);
                 FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.ApplicationSecret, Constants.SessionKey));
            
                 // This action will require the user to have granted this app "email" Extended Permission.
                 //var result = api.Notifications.SendEmail(Constants.UserId.ToString(), "email test", "here is plain text", string.Empty);
                 api.Notifications.SendEmailAsync(Constants.UserId.ToString(), "email test", string.Empty, fbml, AsyncDemoCompleted, null);
             }
            
             private static void AsyncDemoCompleted(string result, Object state, FacebookException e)
             {
                 var actual = result;
             }
             </code>
             </example>
             <param name="recipients">A comma-separated list of recipient IDs. The recipients must be people who have already added your application. You can email up to 100 people at a time.</param>
             <param name="subject">The subject of the email message. As of 10/28/2008, the subject will accept a limited set of FBML tags, including names, and tags related to internationalization.</param>
             <param name="plainText">The plain text version of the email content. You must include a non-empty value for at least one of either the fbml or text parameters. The FBML input takes precedence, but if the given FBML value is invalid or cannot be rendered, then the text will be used instead. There is currently no character limit on the length of either the text or FBML body.</param>
             <param name="fbml">The FBML version of the email. You must include a non-empty value for at least one of either the fbml or text parameters. The fbml parameter is a stripped-down set of FBML that allows only HTML/FBML tags that result in text, links, linebreaks, as well as tags related to internationalization.</param>
             <param name="callback">The AsyncCallback delegate</param>
             <param name="state">An object containing state information for this asynchronous request</param>        
             <returns>This returns a comma-separated list of user ids for whom notifications were successfully sent. We will throw an error if an error occurred.</returns>
        </member>
        <member name="T:Facebook.Rest.Notifications.GetCallback">
            <summary>
            Delegate called when GetNotifications call is completed.
            </summary>
            <param name="notifications">notifications object</param>
            <param name="state">An object containing state information for this asynchronous request</param>
            <param name="e">Exception object, if the call resulted in exception.</param>
        </member>
        <member name="T:Facebook.Rest.Notifications.SendCallback">
            <summary>
            Delegate called when SendNotification or SendEmail call is completed.
            </summary>
            <param name="receipientIds">Ids of receipients who received the notification</param>
            <param name="state">An object containing state information for this asynchronous request</param>
            <param name="e">Exception object, if the call resulted in exception.</param>
        </member>
        <member name="T:Facebook.Rest.Notifications.GetListCallback">
            <summary>
            Delegate called when GetList call is completed.
            </summary>
            <param name="notifications">notifications</param>
            <param name="state">An object containing state information for this asynchronous request</param>
            <param name="e">Exception object, if the call resulted in exception.</param>
        </member>
        <member name="T:Facebook.Rest.Notifications.MarkReadCallback">
            <summary>
            Delegate called when MarkRead call is completed.
            </summary>
            <param name="isSuccessful">indicator if notifications are successful</param>
            <param name="state">An object containing state information for this asynchronous request</param>
            <param name="e">Exception object, if the call resulted in exception.</param>
        </member>
        <member name="T:Facebook.Rest.Notes">
            <summary>
            Facebook Notes API methods.
            </summary>
        </member>
        <member name="M:Facebook.Rest.Notes.#ctor(Facebook.Session.IFacebookSession)">
            <summary>
            Public constructor for facebook.Notes
            </summary>
            <param name="session">Needs a connected Facebook Session object for making requests</param>
        </member>
        <member name="M:Facebook.Rest.Notes.Get">
            <summary>
            Returns a list of all of the visible notes written by the specified user.
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
            var result = api.Notes.Get();
            </code>
            </example>
            <returns>This method returns a List of notes with their data in their respective fields (note_id, title, content, created_time, updated_time, uid).</returns>
            <remarks> For desktop applications, don't specify a uid; keep the default. (Default value is the logged-in user.)</remarks>
        </member>
        <member name="M:Facebook.Rest.Notes.Get(System.Int64)">
            <summary>
            Returns a list of all of the visible notes written by the specified user.
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
            var result = api.Notes.Get(Constants.UserId);
            </code>
            </example>
            <param name="uid">The user ID of the user whose notes you want to retrieve.</param>
            <returns>This method returns a List of notes with their data in their respective fields (note_id, title, content, created_time, updated_time, uid).</returns>
            <remarks> For desktop applications, don't specify a uid; keep the default. (Default value is the logged-in user.)</remarks>
        </member>
        <member name="M:Facebook.Rest.Notes.Create(System.Int64,System.String,System.String)">
            <summary>
            Lets a user write a Facebook note through your application.
            See the facebook guide for more information.
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.ApplicationSecret, Constants.SessionKey));
            var result = api.Notes.Create(Constants.UserId, "A test note", "My note content");
            </code>
            </example>
            <param name="uid">The user ID of the user posting the link.</param>
            <param name="title">The title of the note.</param>
            <param name="content">The note's content.</param>
            <returns>If successful, this method returns the note_id of the note that was just created.</returns>
        </member>
        <member name="M:Facebook.Rest.Notes.Edit(System.Int64,System.String,System.String)">
            <summary>
            Lets a user edit a Facebook note through your application.
            </summary>
            <example>
            <code>
            Api api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
            var result = api.Notes.Edit(Constants.NoteId, "A test note (Updated)", "My note content has also been updated!");
            </code>
            </example>
            <param name="note_id">The ID of the note to edit.</param>
            <param name="title">The title of the note.</param>
            <param name="content">The note's content.</param>
            <returns>This method returns true if successful.</returns>
        </member>
        <member name="M:Facebook.Rest.Notes.Delete(System.Int64)">
            <summary>
            Lets a user delete a Facebook note that was written through your application.
            </summary>
            <example>
            <code>
            FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.SessionSecret, Constants.SessionKey));
            var result = api.Notes.Delete(Constants.NoteId);
            </code>
            </example>
            <param name="note_id">The ID of the note to delete.</param>
            <returns>This method returns true if successful.</returns>
        </member>
        <member name="M:Facebook.Rest.Notes.CreateAsync(System.Int64,System.String,System.String,Facebook.Rest.Notes.CreateCallback,System.Object)">
             <summary>
             Lets a user write a Facebook note through your application.
             See the facebook guide for more information.
             </summary>
             <example>
             <code>
             private static void RunDemoAsync()
             {
                 FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.ApplicationSecret, Constants.SessionKey));
                 api.Notes.CreateAsync(Constants.UserId, "A test note", "My note content", AsyncDemoCompleted, null);
             }
            
             private static void AsyncDemoCompleted(long result, Object state, FacebookException e)
             {
                 var actual = result;
             }
             </code>
             </example>
             <param name="uid">The user ID of the user posting the link.</param>
             <param name="title">The title of the note.</param>
             <param name="content">The note's content.</param>
             <param name="callback">The AsyncCallback delegate</param>
             <param name="state">An object containing state information for this asynchronous request</param>        
             <returns>If successful, this method returns the note_id of the note that was just created.</returns>
        </member>
        <member name="M:Facebook.Rest.Notes.DeleteAsync(System.Int64,Facebook.Rest.Notes.DeleteCallback,System.Object)">
             <summary>
             Lets a user delete a Facebook note that was written through your application.
             </summary>
             <example>
             <code>
             private static void RunDemoAsync()
             {
                 FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.ApplicationSecret, Constants.SessionKey));
                 api.Notes.DeleteAsync(Constants.NoteId, AsyncDemoCompleted, null);
             }
            
             private static void AsyncDemoCompleted(bool result, Object state, FacebookException e)
             {
                 var actual = result;
             }
             </code>
             </example>
             <param name="note_id">The ID of the note to delete.</param>
             <param name="callback">The AsyncCallback delegate</param>
             <param name="state">An object containing state information for this asynchronous request</param>        
             <returns>This method returns true if successful.</returns>
        </member>
        <member name="M:Facebook.Rest.Notes.EditAsync(System.Int64,System.String,System.String,Facebook.Rest.Notes.EditCallback,System.Object)">
             <summary>
             Lets a user edit a Facebook note through your application.
             </summary>
             <example>
             <code>
             private static void RunDemoAsync()
             {
                 FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.ApplicationSecret, Constants.SessionKey));
                 api.Notes.EditAsync(Constants.NoteId, "An Async test note (Updated)", "My Async note content has also been updated!", AsyncDemoCompleted, null);
             }
            
             private static void AsyncDemoCompleted(bool result, Object state, FacebookException e)
             {
                 var actual = result;
             }
             </code>
             </example>
             <param name="note_id">The ID of the note to edit.</param>
             <param name="title">The title of the note.</param>
             <param name="content">The note's content.</param>
             <param name="callback">The AsyncCallback delegate</param>
             <param name="state">An object containing state information for this asynchronous request</param>        
             <returns>This method returns true if successful.</returns>
        </member>
        <member name="M:Facebook.Rest.Notes.GetAsync(Facebook.Rest.Notes.GetCallback,System.Object)">
             <summary>
             Returns a list of all of the visible notes written by the specified user.
             </summary>
             <example>
             <code>
             private static void RunDemoAsync()
             {
                FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.ApplicationSecret, Constants.SessionKey));
                api.Notes.GetAsync(AsyncDemoCompleted, null);
             }
            
             private static void AsyncDemoCompleted(IList&lt;note&gt; result, Object state, FacebookException e)
             {
                 var actual = result;
             }
             </code>
             </example>
             <param name="callback">The AsyncCallback delegate</param>
             <param name="state">An object containing state information for this asynchronous request</param>        
             <returns>This method returns a List of notes with their data in their respective fields (note_id, title, content, created_time, updated_time, uid).</returns>
             <remarks> For desktop applications, don't specify a uid; keep the default. (Default value is the logged-in user.)</remarks>
        </member>
        <member name="M:Facebook.Rest.Notes.GetAsync(System.Int64,Facebook.Rest.Notes.GetCallback,System.Object)">
             <summary>
             Returns a list of all of the visible notes written by the specified user.
             </summary>
             <example>
             <code>
             private static void RunDemoAsync()
             {
                FacebookApi api = new FacebookApi(new DesktopSession(Constants.ApplicationKey, Constants.ApplicationSecret, Constants.ApplicationSecret, Constants.SessionKey));
                api.Notes.GetAsync(Constants.UserId, AsyncDemoCompleted, null);
             }
            
             private static void AsyncDemoCompleted(IList&lt;note&gt; result, Object state, FacebookException e)
             {
                 var actual = result;
             }
             </code>
             </example>
             <param name="uid">The user ID of the user whose notes you want to retrieve.</param>
             <param name="callback">The AsyncCallback delegate</param>
             <param name="state">An object containing state information for this asynchronous request</param>        
             <returns>This method returns a List of notes with their data in their respective fields (note_id, title, content, created_time, updated_time, uid).</returns>
             <remarks> For desktop applications, don't specify a uid; keep the default. (Default value is the logged-in user.)</remarks>
        </member>
        <member name="T:Facebook.Rest.Notes.GetCallback">
            <summary>
            Delegate called when Get call is completed.
            </summary>
            <param name="notes">IList of notes</param>
            <param name="state">An object containing state information for this asynchronous request</param>
            <param name="e">Exception object, if the call resulted in exception.</param>
        </member>
        <member name="T:Facebook.Rest.Notes.CreateCallback">
            <summary>
            Delegate called when Create call is completed.
            </summary>
            <param name="note_id">Note identifier</param>
            <param name="state">An object containing state information for this asynchronous request</param>
            <param name="e">Exception object, if the call resulted in exception.</param>
        </member>
        <member name="T:Facebook.Rest.Notes.EditCallback">
            <summary>
            Delegate called when Edit call is completed.
            </summary>
            <param name="result">boolean result</param>
            <param name="state">An object containing state information for this asynchronous request</param>
            <param name="e">Exception object, if the call resulted in exception.</param>
        </member>
        <member name="T:Facebook.Rest.Notes.DeleteCallback">
            <summary>
            Delegate called when Delete call is completed.
            </summary>
            <param name="result">boolean result</param>
            <param name="state">An object containing state information for this asynchronous request</param>
            <param name="e">Exception object, if the call resulted in exception.</param>
        </member>
        <member name="T:Facebook.BindingHelper.ActivityPostCollection">
            <summary>
            Defines a collection of ActivityPost object
            </summary>
        </member>
        <member name="M:Facebook.BindingHelper.ActivityPostCollection.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Facebook.BindingHelper.ActivityPostCollection.Item(System.String)">
            <summary>
            Accessor to find items using a given key
            </summary>
        </member>
    </members>
</doc>
